(function(P,B){typeof exports=="object"&&typeof module<"u"?B(exports):typeof define=="function"&&define.amd?define(["exports"],B):(P=typeof globalThis<"u"?globalThis:P||self,B(P.OpenAIAgentsRealtime={}))})(this,function(P){"use strict";var kc=Object.defineProperty;var ba=P=>{throw TypeError(P)};var Ic=(P,B,K)=>B in P?kc(P,B,{enumerable:!0,configurable:!0,writable:!0,value:K}):P[B]=K;var _=(P,B,K)=>Ic(P,typeof B!="symbol"?B+"":B,K),Rr=(P,B,K)=>B.has(P)||ba("Cannot "+K);var u=(P,B,K)=>(Rr(P,B,"read from private field"),K?K.call(P):B.get(P)),k=(P,B,K)=>B.has(P)?ba("Cannot add the same private member more than once"):B instanceof WeakSet?B.add(P):B.set(P,K),y=(P,B,K,Dt)=>(Rr(P,B,"write to private field"),Dt?Dt.call(P,K):B.set(P,K),K),$=(P,B,K)=>(Rr(P,B,"access private method"),K);var vt,Wt,wt,Ht,Kt,xt,se,Pe,Ue,Je,bt,ue,Dr,Pr,Rt,le,Yt,Xt,Qt,en,st,qe,Be,at,tn,St,Me,re,it,qn,Sa,pe,nn,Tt,xe,Ge,kt,rn,sn,an,It,ae,Mr,jr,Fr,Ta,$r,ot,on,fe,un,cn,z,dn,ut,ln,ct,dt,te,pn,je,lt,pt,Bn,ka,q,j,fn,D,Ct,Ot,hn,V,Et,Nt,Ce,mn,W,Gn,zn,Ia,Vn,Aa,Zr,Ca;const B={version:"0.0.17"};function K(n){const e=atob(n),t=e.length,r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e.charCodeAt(s);return r.buffer}function Dt(n){const e=String.fromCharCode(...new Uint8Array(n));return btoa(e)}function Lr(n){if(typeof n>"u"||n===null||typeof n!="object"||!("type"in n)||typeof n.type!="string"||!n.type||n.type!=="message"||!("content"in n)||!Array.isArray(n.content)||n.content.length<1)return;const e=n.content[n.content.length-1];if(!(!("type"in e)||typeof e.type!="string")){if(e.type==="text")return typeof e.text=="string"?e.text:void 0;if(e.type==="audio")return typeof e.transcript=="string"?e.transcript:void 0}}function Oa(n,e){const t=n.filter(a=>!e.some(i=>i.itemId===a.itemId)),r=e.filter(a=>!n.some(i=>i.itemId===a.itemId)),s=e.filter(a=>n.some(i=>i.itemId===a.itemId&&JSON.stringify(i)!==JSON.stringify(a)));return{removals:t,additions:r,updates:s}}function Ea(){return typeof window>"u"?!1:typeof window.RTCPeerConnection<"u"}function Ur(n){return n.role==="system"?n:n.role==="assistant"?{...n,content:n.content.map(e=>e.type==="audio"?{...e,audio:null}:e)}:n.role==="user"?{...n,content:n.content.map(e=>e.type==="input_audio"?{...e,audio:null}:e)}:n}function Jr(n,e,t){if(e.type==="conversation.item.input_audio_transcription.completed")return n.map(a=>{if(a.itemId===e.item_id&&a.type==="message"&&"role"in a&&a.role==="user"){const i=a.content.map(o=>o.type==="input_audio"?{...o,transcript:e.transcript}:o);return{...a,content:i,status:"completed"}}return a});const r=!t&&e.type==="message"?Ur(e):e,s=n.findIndex(a=>a.itemId===e.itemId);if(s!==-1)return n.map((a,i)=>i===s?r:!t&&a.type==="message"?Ur(a):a);if(e.previousItemId){const a=n.findIndex(i=>i.itemId===e.previousItemId);return a!==-1?[...n.slice(0,a+1),r,...n.slice(a+1)]:[...n,r]}else return[...n,r]}const Na={"User-Agent":`Agents/JavaScript ${B.version}`,"X-OpenAI-Agents-SDK":`openai-agents-sdk.${B.version}`},Ra=`openai-agents-sdk.${B.version}`;async function Wn(n){try{return[null,await n()]}catch(e){return[e,null]}}function Da(n,e){const t={...n};return Object.defineProperties(t,{$brand:{value:"auto-parseable-response-format",enumerable:!1},$parseRaw:{value:e,enumerable:!1}}),t}const Pa=Symbol("Let zodToJsonSchema decide on which parser to use"),qr={name:void 0,$refStrategy:"root",effectStrategy:"input",pipeStrategy:"all",dateStrategy:"format:date-time",mapStrategy:"entries",nullableStrategy:"from-target",removeAdditionalStrategy:"passthrough",definitionPath:"definitions",target:"jsonSchema7",strictUnions:!1,errorMessages:!1,markdownDescription:!1,patternStrategy:"escape",applyRegexFlags:!1,emailStrategy:"format:email",base64Strategy:"contentEncoding:base64",nameStrategy:"ref"},Ma=n=>typeof n=="string"?{...qr,basePath:["#"],definitions:{},name:n}:{...qr,basePath:["#"],definitions:{},...n},Hn=n=>"_def"in n?n._def:n;function ja(n){if(!n)return!0;for(const e in n)return!1;return!0}const Fa=n=>{const e=Ma(n),t=e.name!==void 0?[...e.basePath,e.definitionPath,e.name]:e.basePath;return{...e,currentPath:t,propertyPath:void 0,seenRefs:new Set,seen:new Map(Object.entries(e.definitions).map(([r,s])=>[Hn(s),{def:Hn(s),path:[...e.basePath,e.definitionPath,r],jsonSchema:void 0}]))}};function Br(n,e,t,r){r!=null&&r.errorMessages&&t&&(n.errorMessage={...n.errorMessage,[e]:t})}function G(n,e,t,r,s){n[e]=t,Br(n,e,r,s)}var L;(function(n){n.assertEqual=s=>{};function e(s){}n.assertIs=e;function t(s){throw new Error}n.assertNever=t,n.arrayToEnum=s=>{const a={};for(const i of s)a[i]=i;return a},n.getValidEnumValues=s=>{const a=n.objectKeys(s).filter(o=>typeof s[s[o]]!="number"),i={};for(const o of a)i[o]=s[o];return n.objectValues(i)},n.objectValues=s=>n.objectKeys(s).map(function(a){return s[a]}),n.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{const a=[];for(const i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},n.find=(s,a)=>{for(const i of s)if(a(i))return i},n.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&Number.isFinite(s)&&Math.floor(s)===s;function r(s,a=" | "){return s.map(i=>typeof i=="string"?`'${i}'`:i).join(a)}n.joinValues=r,n.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(L||(L={}));var Gr;(function(n){n.mergeShapes=(e,t)=>({...e,...t})})(Gr||(Gr={}));const I=L.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),Fe=n=>{switch(typeof n){case"undefined":return I.undefined;case"string":return I.string;case"number":return Number.isNaN(n)?I.nan:I.number;case"boolean":return I.boolean;case"function":return I.function;case"bigint":return I.bigint;case"symbol":return I.symbol;case"object":return Array.isArray(n)?I.array:n===null?I.null:n.then&&typeof n.then=="function"&&n.catch&&typeof n.catch=="function"?I.promise:typeof Map<"u"&&n instanceof Map?I.map:typeof Set<"u"&&n instanceof Set?I.set:typeof Date<"u"&&n instanceof Date?I.date:I.object;default:return I.unknown}},w=L.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);class Oe extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}format(e){const t=e||function(a){return a.message},r={_errors:[]},s=a=>{for(const i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)r._errors.push(t(i));else{let o=r,l=0;for(;l<i.path.length;){const c=i.path[l];l===i.path.length-1?(o[c]=o[c]||{_errors:[]},o[c]._errors.push(t(i))):o[c]=o[c]||{_errors:[]},o=o[c],l++}}};return s(this),r}static assert(e){if(!(e instanceof Oe))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,L.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},r=[];for(const s of this.issues)s.path.length>0?(t[s.path[0]]=t[s.path[0]]||[],t[s.path[0]].push(e(s))):r.push(e(s));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}}Oe.create=n=>new Oe(n);const Kn=(n,e)=>{let t;switch(n.code){case w.invalid_type:n.received===I.undefined?t="Required":t=`Expected ${n.expected}, received ${n.received}`;break;case w.invalid_literal:t=`Invalid literal value, expected ${JSON.stringify(n.expected,L.jsonStringifyReplacer)}`;break;case w.unrecognized_keys:t=`Unrecognized key(s) in object: ${L.joinValues(n.keys,", ")}`;break;case w.invalid_union:t="Invalid input";break;case w.invalid_union_discriminator:t=`Invalid discriminator value. Expected ${L.joinValues(n.options)}`;break;case w.invalid_enum_value:t=`Invalid enum value. Expected ${L.joinValues(n.options)}, received '${n.received}'`;break;case w.invalid_arguments:t="Invalid function arguments";break;case w.invalid_return_type:t="Invalid function return type";break;case w.invalid_date:t="Invalid date";break;case w.invalid_string:typeof n.validation=="object"?"includes"in n.validation?(t=`Invalid input: must include "${n.validation.includes}"`,typeof n.validation.position=="number"&&(t=`${t} at one or more positions greater than or equal to ${n.validation.position}`)):"startsWith"in n.validation?t=`Invalid input: must start with "${n.validation.startsWith}"`:"endsWith"in n.validation?t=`Invalid input: must end with "${n.validation.endsWith}"`:L.assertNever(n.validation):n.validation!=="regex"?t=`Invalid ${n.validation}`:t="Invalid";break;case w.too_small:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at least":"more than"} ${n.minimum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at least":"over"} ${n.minimum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${n.minimum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(n.minimum))}`:t="Invalid input";break;case w.too_big:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at most":"less than"} ${n.maximum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at most":"under"} ${n.maximum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="bigint"?t=`BigInt must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly":n.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(n.maximum))}`:t="Invalid input";break;case w.custom:t="Invalid input";break;case w.invalid_intersection_types:t="Intersection results could not be merged";break;case w.not_multiple_of:t=`Number must be a multiple of ${n.multipleOf}`;break;case w.not_finite:t="Number must be finite";break;default:t=e.defaultError,L.assertNever(n)}return{message:t}};let $a=Kn;function Za(){return $a}const La=n=>{const{data:e,path:t,errorMaps:r,issueData:s}=n,a=[...t,...s.path||[]],i={...s,path:a};if(s.message!==void 0)return{...s,path:a,message:s.message};let o="";const l=r.filter(c=>!!c).slice().reverse();for(const c of l)o=c(i,{data:e,defaultError:o}).message;return{...s,path:a,message:o}};function T(n,e){const t=Za(),r=La({issueData:e,data:n.data,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,t,t===Kn?void 0:Kn].filter(s=>!!s)});n.common.issues.push(r)}class ie{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,t){const r=[];for(const s of t){if(s.status==="aborted")return N;s.status==="dirty"&&e.dirty(),r.push(s.value)}return{status:e.value,value:r}}static async mergeObjectAsync(e,t){const r=[];for(const s of t){const a=await s.key,i=await s.value;r.push({key:a,value:i})}return ie.mergeObjectSync(e,r)}static mergeObjectSync(e,t){const r={};for(const s of t){const{key:a,value:i}=s;if(a.status==="aborted"||i.status==="aborted")return N;a.status==="dirty"&&e.dirty(),i.status==="dirty"&&e.dirty(),a.value!=="__proto__"&&(typeof i.value<"u"||s.alwaysSet)&&(r[a.value]=i.value)}return{status:e.value,value:r}}}const N=Object.freeze({status:"aborted"}),Pt=n=>({status:"dirty",value:n}),ge=n=>({status:"valid",value:n}),zr=n=>n.status==="aborted",Vr=n=>n.status==="dirty",ft=n=>n.status==="valid",_n=n=>typeof Promise<"u"&&n instanceof Promise;var A;(function(n){n.errToObj=e=>typeof e=="string"?{message:e}:e||{},n.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(A||(A={}));class be{constructor(e,t,r,s){this._cachedPath=[],this.parent=e,this.data=t,this._path=r,this._key=s}get path(){return this._cachedPath.length||(Array.isArray(this._key)?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const Wr=(n,e)=>{if(ft(e))return{success:!0,data:e.value};if(!n.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const t=new Oe(n.common.issues);return this._error=t,this._error}}};function M(n){if(!n)return{};const{errorMap:e,invalid_type_error:t,required_error:r,description:s}=n;if(e&&(t||r))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:s}:{errorMap:(i,o)=>{const{message:l}=n;return i.code==="invalid_enum_value"?{message:l??o.defaultError}:typeof o.data>"u"?{message:l??r??o.defaultError}:i.code!=="invalid_type"?{message:o.defaultError}:{message:l??t??o.defaultError}},description:s}}class F{get description(){return this._def.description}_getType(e){return Fe(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:Fe(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new ie,ctx:{common:e.parent.common,data:e.data,parsedType:Fe(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if(_n(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const r=this.safeParse(e,t);if(r.success)return r.data;throw r.error}safeParse(e,t){const r={common:{issues:[],async:(t==null?void 0:t.async)??!1,contextualErrorMap:t==null?void 0:t.errorMap},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Fe(e)},s=this._parseSync({data:e,path:r.path,parent:r});return Wr(r,s)}"~validate"(e){var r,s;const t={common:{issues:[],async:!!this["~standard"].async},path:[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Fe(e)};if(!this["~standard"].async)try{const a=this._parseSync({data:e,path:[],parent:t});return ft(a)?{value:a.value}:{issues:t.common.issues}}catch(a){(s=(r=a==null?void 0:a.message)==null?void 0:r.toLowerCase())!=null&&s.includes("encountered")&&(this["~standard"].async=!0),t.common={issues:[],async:!0}}return this._parseAsync({data:e,path:[],parent:t}).then(a=>ft(a)?{value:a.value}:{issues:t.common.issues})}async parseAsync(e,t){const r=await this.safeParseAsync(e,t);if(r.success)return r.data;throw r.error}async safeParseAsync(e,t){const r={common:{issues:[],contextualErrorMap:t==null?void 0:t.errorMap,async:!0},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Fe(e)},s=this._parse({data:e,path:r.path,parent:r}),a=await(_n(s)?s:Promise.resolve(s));return Wr(r,a)}refine(e,t){const r=s=>typeof t=="string"||typeof t>"u"?{message:t}:typeof t=="function"?t(s):t;return this._refinement((s,a)=>{const i=e(s),o=()=>a.addIssue({code:w.custom,...r(s)});return typeof Promise<"u"&&i instanceof Promise?i.then(l=>l?!0:(o(),!1)):i?!0:(o(),!1)})}refinement(e,t){return this._refinement((r,s)=>e(r)?!0:(s.addIssue(typeof t=="function"?t(r,s):t),!1))}_refinement(e){return new We({schema:this,typeName:x.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this),this["~standard"]={version:1,vendor:"zod",validate:t=>this["~validate"](t)}}optional(){return Re.create(this,this._def)}nullable(){return He.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return Se.create(this)}promise(){return Tn.create(this,this._def)}or(e){return vn.create([this,e],this._def)}and(e){return wn.create(this,e,this._def)}transform(e){return new We({...M(this._def),schema:this,typeName:x.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t=typeof e=="function"?e:()=>e;return new kn({...M(this._def),innerType:this,defaultValue:t,typeName:x.ZodDefault})}brand(){return new rs({typeName:x.ZodBranded,type:this,...M(this._def)})}catch(e){const t=typeof e=="function"?e:()=>e;return new In({...M(this._def),innerType:this,catchValue:t,typeName:x.ZodCatch})}describe(e){const t=this.constructor;return new t({...this._def,description:e})}pipe(e){return ar.create(this,e)}readonly(){return An.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const Ua=/^c[^\s-]{8,}$/i,Ja=/^[0-9a-z]+$/,qa=/^[0-9A-HJKMNP-TV-Z]{26}$/i,Ba=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,Ga=/^[a-z0-9_-]{21}$/i,za=/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,Va=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,Wa=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,Ha="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let Yn;const Ka=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,Ya=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,Xa=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,Qa=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,ei=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,ti=/^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,Hr="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",ni=new RegExp(`^${Hr}$`);function Kr(n){let e="[0-5]\\d";n.precision?e=`${e}\\.\\d{${n.precision}}`:n.precision==null&&(e=`${e}(\\.\\d+)?`);const t=n.precision?"+":"?";return`([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`}function ri(n){return new RegExp(`^${Kr(n)}$`)}function si(n){let e=`${Hr}T${Kr(n)}`;const t=[];return t.push(n.local?"Z?":"Z"),n.offset&&t.push("([+-]\\d{2}:?\\d{2})"),e=`${e}(${t.join("|")})`,new RegExp(`^${e}$`)}function ai(n,e){return!!((e==="v4"||!e)&&Ka.test(n)||(e==="v6"||!e)&&Xa.test(n))}function ii(n,e){if(!za.test(n))return!1;try{const[t]=n.split("."),r=t.replace(/-/g,"+").replace(/_/g,"/").padEnd(t.length+(4-t.length%4)%4,"="),s=JSON.parse(atob(r));return!(typeof s!="object"||s===null||"typ"in s&&(s==null?void 0:s.typ)!=="JWT"||!s.alg||e&&s.alg!==e)}catch{return!1}}function oi(n,e){return!!((e==="v4"||!e)&&Ya.test(n)||(e==="v6"||!e)&&Qa.test(n))}class Ee extends F{_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==I.string){const a=this._getOrReturnCtx(e);return T(a,{code:w.invalid_type,expected:I.string,received:a.parsedType}),N}const r=new ie;let s;for(const a of this._def.checks)if(a.kind==="min")e.data.length<a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:w.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="max")e.data.length>a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:w.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="length"){const i=e.data.length>a.value,o=e.data.length<a.value;(i||o)&&(s=this._getOrReturnCtx(e,s),i?T(s,{code:w.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}):o&&T(s,{code:w.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}),r.dirty())}else if(a.kind==="email")Wa.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"email",code:w.invalid_string,message:a.message}),r.dirty());else if(a.kind==="emoji")Yn||(Yn=new RegExp(Ha,"u")),Yn.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"emoji",code:w.invalid_string,message:a.message}),r.dirty());else if(a.kind==="uuid")Ba.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"uuid",code:w.invalid_string,message:a.message}),r.dirty());else if(a.kind==="nanoid")Ga.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"nanoid",code:w.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid")Ua.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"cuid",code:w.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid2")Ja.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"cuid2",code:w.invalid_string,message:a.message}),r.dirty());else if(a.kind==="ulid")qa.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"ulid",code:w.invalid_string,message:a.message}),r.dirty());else if(a.kind==="url")try{new URL(e.data)}catch{s=this._getOrReturnCtx(e,s),T(s,{validation:"url",code:w.invalid_string,message:a.message}),r.dirty()}else a.kind==="regex"?(a.regex.lastIndex=0,a.regex.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"regex",code:w.invalid_string,message:a.message}),r.dirty())):a.kind==="trim"?e.data=e.data.trim():a.kind==="includes"?e.data.includes(a.value,a.position)||(s=this._getOrReturnCtx(e,s),T(s,{code:w.invalid_string,validation:{includes:a.value,position:a.position},message:a.message}),r.dirty()):a.kind==="toLowerCase"?e.data=e.data.toLowerCase():a.kind==="toUpperCase"?e.data=e.data.toUpperCase():a.kind==="startsWith"?e.data.startsWith(a.value)||(s=this._getOrReturnCtx(e,s),T(s,{code:w.invalid_string,validation:{startsWith:a.value},message:a.message}),r.dirty()):a.kind==="endsWith"?e.data.endsWith(a.value)||(s=this._getOrReturnCtx(e,s),T(s,{code:w.invalid_string,validation:{endsWith:a.value},message:a.message}),r.dirty()):a.kind==="datetime"?si(a).test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{code:w.invalid_string,validation:"datetime",message:a.message}),r.dirty()):a.kind==="date"?ni.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{code:w.invalid_string,validation:"date",message:a.message}),r.dirty()):a.kind==="time"?ri(a).test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{code:w.invalid_string,validation:"time",message:a.message}),r.dirty()):a.kind==="duration"?Va.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"duration",code:w.invalid_string,message:a.message}),r.dirty()):a.kind==="ip"?ai(e.data,a.version)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"ip",code:w.invalid_string,message:a.message}),r.dirty()):a.kind==="jwt"?ii(e.data,a.alg)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"jwt",code:w.invalid_string,message:a.message}),r.dirty()):a.kind==="cidr"?oi(e.data,a.version)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"cidr",code:w.invalid_string,message:a.message}),r.dirty()):a.kind==="base64"?ei.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"base64",code:w.invalid_string,message:a.message}),r.dirty()):a.kind==="base64url"?ti.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"base64url",code:w.invalid_string,message:a.message}),r.dirty()):L.assertNever(a);return{status:r.value,value:e.data}}_regex(e,t,r){return this.refinement(s=>e.test(s),{validation:t,code:w.invalid_string,...A.errToObj(r)})}_addCheck(e){return new Ee({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...A.errToObj(e)})}url(e){return this._addCheck({kind:"url",...A.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...A.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...A.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...A.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...A.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...A.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...A.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...A.errToObj(e)})}base64url(e){return this._addCheck({kind:"base64url",...A.errToObj(e)})}jwt(e){return this._addCheck({kind:"jwt",...A.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...A.errToObj(e)})}cidr(e){return this._addCheck({kind:"cidr",...A.errToObj(e)})}datetime(e){return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,offset:(e==null?void 0:e.offset)??!1,local:(e==null?void 0:e.local)??!1,...A.errToObj(e==null?void 0:e.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return typeof e=="string"?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,...A.errToObj(e==null?void 0:e.message)})}duration(e){return this._addCheck({kind:"duration",...A.errToObj(e)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...A.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:t==null?void 0:t.position,...A.errToObj(t==null?void 0:t.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...A.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...A.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...A.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...A.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...A.errToObj(t)})}nonempty(e){return this.min(1,A.errToObj(e))}trim(){return new Ee({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new Ee({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new Ee({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isDate(){return!!this._def.checks.find(e=>e.kind==="date")}get isTime(){return!!this._def.checks.find(e=>e.kind==="time")}get isDuration(){return!!this._def.checks.find(e=>e.kind==="duration")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isNANOID(){return!!this._def.checks.find(e=>e.kind==="nanoid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get isCIDR(){return!!this._def.checks.find(e=>e.kind==="cidr")}get isBase64(){return!!this._def.checks.find(e=>e.kind==="base64")}get isBase64url(){return!!this._def.checks.find(e=>e.kind==="base64url")}get minLength(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Ee.create=n=>new Ee({checks:[],typeName:x.ZodString,coerce:(n==null?void 0:n.coerce)??!1,...M(n)});function ui(n,e){const t=(n.toString().split(".")[1]||"").length,r=(e.toString().split(".")[1]||"").length,s=t>r?t:r,a=Number.parseInt(n.toFixed(s).replace(".","")),i=Number.parseInt(e.toFixed(s).replace(".",""));return a%i/10**s}class ht extends F{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==I.number){const a=this._getOrReturnCtx(e);return T(a,{code:w.invalid_type,expected:I.number,received:a.parsedType}),N}let r;const s=new ie;for(const a of this._def.checks)a.kind==="int"?L.isInteger(e.data)||(r=this._getOrReturnCtx(e,r),T(r,{code:w.invalid_type,expected:"integer",received:"float",message:a.message}),s.dirty()):a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:w.too_small,minimum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:w.too_big,maximum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="multipleOf"?ui(e.data,a.value)!==0&&(r=this._getOrReturnCtx(e,r),T(r,{code:w.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):a.kind==="finite"?Number.isFinite(e.data)||(r=this._getOrReturnCtx(e,r),T(r,{code:w.not_finite,message:a.message}),s.dirty()):L.assertNever(a);return{status:s.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,A.toString(t))}gt(e,t){return this.setLimit("min",e,!1,A.toString(t))}lte(e,t){return this.setLimit("max",e,!0,A.toString(t))}lt(e,t){return this.setLimit("max",e,!1,A.toString(t))}setLimit(e,t,r,s){return new ht({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:A.toString(s)}]})}_addCheck(e){return new ht({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:A.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:A.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:A.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:A.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:A.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:A.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:A.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:A.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:A.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&L.isInteger(e.value))}get isFinite(){let e=null,t=null;for(const r of this._def.checks){if(r.kind==="finite"||r.kind==="int"||r.kind==="multipleOf")return!0;r.kind==="min"?(t===null||r.value>t)&&(t=r.value):r.kind==="max"&&(e===null||r.value<e)&&(e=r.value)}return Number.isFinite(t)&&Number.isFinite(e)}}ht.create=n=>new ht({checks:[],typeName:x.ZodNumber,coerce:(n==null?void 0:n.coerce)||!1,...M(n)});class Mt extends F{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce)try{e.data=BigInt(e.data)}catch{return this._getInvalidInput(e)}if(this._getType(e)!==I.bigint)return this._getInvalidInput(e);let r;const s=new ie;for(const a of this._def.checks)a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:w.too_small,type:"bigint",minimum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:w.too_big,type:"bigint",maximum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="multipleOf"?e.data%a.value!==BigInt(0)&&(r=this._getOrReturnCtx(e,r),T(r,{code:w.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):L.assertNever(a);return{status:s.value,value:e.data}}_getInvalidInput(e){const t=this._getOrReturnCtx(e);return T(t,{code:w.invalid_type,expected:I.bigint,received:t.parsedType}),N}gte(e,t){return this.setLimit("min",e,!0,A.toString(t))}gt(e,t){return this.setLimit("min",e,!1,A.toString(t))}lte(e,t){return this.setLimit("max",e,!0,A.toString(t))}lt(e,t){return this.setLimit("max",e,!1,A.toString(t))}setLimit(e,t,r,s){return new Mt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:A.toString(s)}]})}_addCheck(e){return new Mt({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:A.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:A.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:A.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:A.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:A.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Mt.create=n=>new Mt({checks:[],typeName:x.ZodBigInt,coerce:(n==null?void 0:n.coerce)??!1,...M(n)});class Xn extends F{_parse(e){if(this._def.coerce&&(e.data=!!e.data),this._getType(e)!==I.boolean){const r=this._getOrReturnCtx(e);return T(r,{code:w.invalid_type,expected:I.boolean,received:r.parsedType}),N}return ge(e.data)}}Xn.create=n=>new Xn({typeName:x.ZodBoolean,coerce:(n==null?void 0:n.coerce)||!1,...M(n)});class yn extends F{_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==I.date){const a=this._getOrReturnCtx(e);return T(a,{code:w.invalid_type,expected:I.date,received:a.parsedType}),N}if(Number.isNaN(e.data.getTime())){const a=this._getOrReturnCtx(e);return T(a,{code:w.invalid_date}),N}const r=new ie;let s;for(const a of this._def.checks)a.kind==="min"?e.data.getTime()<a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:w.too_small,message:a.message,inclusive:!0,exact:!1,minimum:a.value,type:"date"}),r.dirty()):a.kind==="max"?e.data.getTime()>a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:w.too_big,message:a.message,inclusive:!0,exact:!1,maximum:a.value,type:"date"}),r.dirty()):L.assertNever(a);return{status:r.value,value:new Date(e.data.getTime())}}_addCheck(e){return new yn({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:A.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:A.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e!=null?new Date(e):null}}yn.create=n=>new yn({checks:[],coerce:(n==null?void 0:n.coerce)||!1,typeName:x.ZodDate,...M(n)});class Yr extends F{_parse(e){if(this._getType(e)!==I.symbol){const r=this._getOrReturnCtx(e);return T(r,{code:w.invalid_type,expected:I.symbol,received:r.parsedType}),N}return ge(e.data)}}Yr.create=n=>new Yr({typeName:x.ZodSymbol,...M(n)});class Qn extends F{_parse(e){if(this._getType(e)!==I.undefined){const r=this._getOrReturnCtx(e);return T(r,{code:w.invalid_type,expected:I.undefined,received:r.parsedType}),N}return ge(e.data)}}Qn.create=n=>new Qn({typeName:x.ZodUndefined,...M(n)});class er extends F{_parse(e){if(this._getType(e)!==I.null){const r=this._getOrReturnCtx(e);return T(r,{code:w.invalid_type,expected:I.null,received:r.parsedType}),N}return ge(e.data)}}er.create=n=>new er({typeName:x.ZodNull,...M(n)});class tr extends F{constructor(){super(...arguments),this._any=!0}_parse(e){return ge(e.data)}}tr.create=n=>new tr({typeName:x.ZodAny,...M(n)});class Xr extends F{constructor(){super(...arguments),this._unknown=!0}_parse(e){return ge(e.data)}}Xr.create=n=>new Xr({typeName:x.ZodUnknown,...M(n)});class $e extends F{_parse(e){const t=this._getOrReturnCtx(e);return T(t,{code:w.invalid_type,expected:I.never,received:t.parsedType}),N}}$e.create=n=>new $e({typeName:x.ZodNever,...M(n)});class Qr extends F{_parse(e){if(this._getType(e)!==I.undefined){const r=this._getOrReturnCtx(e);return T(r,{code:w.invalid_type,expected:I.void,received:r.parsedType}),N}return ge(e.data)}}Qr.create=n=>new Qr({typeName:x.ZodVoid,...M(n)});class Se extends F{_parse(e){const{ctx:t,status:r}=this._processInputParams(e),s=this._def;if(t.parsedType!==I.array)return T(t,{code:w.invalid_type,expected:I.array,received:t.parsedType}),N;if(s.exactLength!==null){const i=t.data.length>s.exactLength.value,o=t.data.length<s.exactLength.value;(i||o)&&(T(t,{code:i?w.too_big:w.too_small,minimum:o?s.exactLength.value:void 0,maximum:i?s.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:s.exactLength.message}),r.dirty())}if(s.minLength!==null&&t.data.length<s.minLength.value&&(T(t,{code:w.too_small,minimum:s.minLength.value,type:"array",inclusive:!0,exact:!1,message:s.minLength.message}),r.dirty()),s.maxLength!==null&&t.data.length>s.maxLength.value&&(T(t,{code:w.too_big,maximum:s.maxLength.value,type:"array",inclusive:!0,exact:!1,message:s.maxLength.message}),r.dirty()),t.common.async)return Promise.all([...t.data].map((i,o)=>s.type._parseAsync(new be(t,i,t.path,o)))).then(i=>ie.mergeArray(r,i));const a=[...t.data].map((i,o)=>s.type._parseSync(new be(t,i,t.path,o)));return ie.mergeArray(r,a)}get element(){return this._def.type}min(e,t){return new Se({...this._def,minLength:{value:e,message:A.toString(t)}})}max(e,t){return new Se({...this._def,maxLength:{value:e,message:A.toString(t)}})}length(e,t){return new Se({...this._def,exactLength:{value:e,message:A.toString(t)}})}nonempty(e){return this.min(1,e)}}Se.create=(n,e)=>new Se({type:n,minLength:null,maxLength:null,exactLength:null,typeName:x.ZodArray,...M(e)});function mt(n){if(n instanceof Y){const e={};for(const t in n.shape){const r=n.shape[t];e[t]=Re.create(mt(r))}return new Y({...n._def,shape:()=>e})}else return n instanceof Se?new Se({...n._def,type:mt(n.element)}):n instanceof Re?Re.create(mt(n.unwrap())):n instanceof He?He.create(mt(n.unwrap())):n instanceof ze?ze.create(n.items.map(e=>mt(e))):n}class Y extends F{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const e=this._def.shape(),t=L.objectKeys(e);return this._cached={shape:e,keys:t},this._cached}_parse(e){if(this._getType(e)!==I.object){const c=this._getOrReturnCtx(e);return T(c,{code:w.invalid_type,expected:I.object,received:c.parsedType}),N}const{status:r,ctx:s}=this._processInputParams(e),{shape:a,keys:i}=this._getCached(),o=[];if(!(this._def.catchall instanceof $e&&this._def.unknownKeys==="strip"))for(const c in s.data)i.includes(c)||o.push(c);const l=[];for(const c of i){const p=a[c],f=s.data[c];l.push({key:{status:"valid",value:c},value:p._parse(new be(s,f,s.path,c)),alwaysSet:c in s.data})}if(this._def.catchall instanceof $e){const c=this._def.unknownKeys;if(c==="passthrough")for(const p of o)l.push({key:{status:"valid",value:p},value:{status:"valid",value:s.data[p]}});else if(c==="strict")o.length>0&&(T(s,{code:w.unrecognized_keys,keys:o}),r.dirty());else if(c!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const c=this._def.catchall;for(const p of o){const f=s.data[p];l.push({key:{status:"valid",value:p},value:c._parse(new be(s,f,s.path,p)),alwaysSet:p in s.data})}}return s.common.async?Promise.resolve().then(async()=>{const c=[];for(const p of l){const f=await p.key,h=await p.value;c.push({key:f,value:h,alwaysSet:p.alwaysSet})}return c}).then(c=>ie.mergeObjectSync(r,c)):ie.mergeObjectSync(r,l)}get shape(){return this._def.shape()}strict(e){return A.errToObj,new Y({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(t,r)=>{var a,i;const s=((i=(a=this._def).errorMap)==null?void 0:i.call(a,t,r).message)??r.defaultError;return t.code==="unrecognized_keys"?{message:A.errToObj(e).message??s}:{message:s}}}:{}})}strip(){return new Y({...this._def,unknownKeys:"strip"})}passthrough(){return new Y({...this._def,unknownKeys:"passthrough"})}extend(e){return new Y({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new Y({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:x.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new Y({...this._def,catchall:e})}pick(e){const t={};for(const r of L.objectKeys(e))e[r]&&this.shape[r]&&(t[r]=this.shape[r]);return new Y({...this._def,shape:()=>t})}omit(e){const t={};for(const r of L.objectKeys(this.shape))e[r]||(t[r]=this.shape[r]);return new Y({...this._def,shape:()=>t})}deepPartial(){return mt(this)}partial(e){const t={};for(const r of L.objectKeys(this.shape)){const s=this.shape[r];e&&!e[r]?t[r]=s:t[r]=s.optional()}return new Y({...this._def,shape:()=>t})}required(e){const t={};for(const r of L.objectKeys(this.shape))if(e&&!e[r])t[r]=this.shape[r];else{let a=this.shape[r];for(;a instanceof Re;)a=a._def.innerType;t[r]=a}return new Y({...this._def,shape:()=>t})}keyof(){return ts(L.objectKeys(this.shape))}}Y.create=(n,e)=>new Y({shape:()=>n,unknownKeys:"strip",catchall:$e.create(),typeName:x.ZodObject,...M(e)}),Y.strictCreate=(n,e)=>new Y({shape:()=>n,unknownKeys:"strict",catchall:$e.create(),typeName:x.ZodObject,...M(e)}),Y.lazycreate=(n,e)=>new Y({shape:n,unknownKeys:"strip",catchall:$e.create(),typeName:x.ZodObject,...M(e)});class vn extends F{_parse(e){const{ctx:t}=this._processInputParams(e),r=this._def.options;function s(a){for(const o of a)if(o.result.status==="valid")return o.result;for(const o of a)if(o.result.status==="dirty")return t.common.issues.push(...o.ctx.common.issues),o.result;const i=a.map(o=>new Oe(o.ctx.common.issues));return T(t,{code:w.invalid_union,unionErrors:i}),N}if(t.common.async)return Promise.all(r.map(async a=>{const i={...t,common:{...t.common,issues:[]},parent:null};return{result:await a._parseAsync({data:t.data,path:t.path,parent:i}),ctx:i}})).then(s);{let a;const i=[];for(const l of r){const c={...t,common:{...t.common,issues:[]},parent:null},p=l._parseSync({data:t.data,path:t.path,parent:c});if(p.status==="valid")return p;p.status==="dirty"&&!a&&(a={result:p,ctx:c}),c.common.issues.length&&i.push(c.common.issues)}if(a)return t.common.issues.push(...a.ctx.common.issues),a.result;const o=i.map(l=>new Oe(l));return T(t,{code:w.invalid_union,unionErrors:o}),N}}get options(){return this._def.options}}vn.create=(n,e)=>new vn({options:n,typeName:x.ZodUnion,...M(e)});const Ne=n=>n instanceof bn?Ne(n.schema):n instanceof We?Ne(n.innerType()):n instanceof Sn?[n.value]:n instanceof Ve?n.options:n instanceof sr?L.objectValues(n.enum):n instanceof kn?Ne(n._def.innerType):n instanceof Qn?[void 0]:n instanceof er?[null]:n instanceof Re?[void 0,...Ne(n.unwrap())]:n instanceof He?[null,...Ne(n.unwrap())]:n instanceof rs||n instanceof An?Ne(n.unwrap()):n instanceof In?Ne(n._def.innerType):[];class nr extends F{_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==I.object)return T(t,{code:w.invalid_type,expected:I.object,received:t.parsedType}),N;const r=this.discriminator,s=t.data[r],a=this.optionsMap.get(s);return a?t.common.async?a._parseAsync({data:t.data,path:t.path,parent:t}):a._parseSync({data:t.data,path:t.path,parent:t}):(T(t,{code:w.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[r]}),N)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,r){const s=new Map;for(const a of t){const i=Ne(a.shape[e]);if(!i.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const o of i){if(s.has(o))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(o)}`);s.set(o,a)}}return new nr({typeName:x.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:s,...M(r)})}}function rr(n,e){const t=Fe(n),r=Fe(e);if(n===e)return{valid:!0,data:n};if(t===I.object&&r===I.object){const s=L.objectKeys(e),a=L.objectKeys(n).filter(o=>s.indexOf(o)!==-1),i={...n,...e};for(const o of a){const l=rr(n[o],e[o]);if(!l.valid)return{valid:!1};i[o]=l.data}return{valid:!0,data:i}}else if(t===I.array&&r===I.array){if(n.length!==e.length)return{valid:!1};const s=[];for(let a=0;a<n.length;a++){const i=n[a],o=e[a],l=rr(i,o);if(!l.valid)return{valid:!1};s.push(l.data)}return{valid:!0,data:s}}else return t===I.date&&r===I.date&&+n==+e?{valid:!0,data:n}:{valid:!1}}class wn extends F{_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=(a,i)=>{if(zr(a)||zr(i))return N;const o=rr(a.value,i.value);return o.valid?((Vr(a)||Vr(i))&&t.dirty(),{status:t.value,value:o.data}):(T(r,{code:w.invalid_intersection_types}),N)};return r.common.async?Promise.all([this._def.left._parseAsync({data:r.data,path:r.path,parent:r}),this._def.right._parseAsync({data:r.data,path:r.path,parent:r})]).then(([a,i])=>s(a,i)):s(this._def.left._parseSync({data:r.data,path:r.path,parent:r}),this._def.right._parseSync({data:r.data,path:r.path,parent:r}))}}wn.create=(n,e,t)=>new wn({left:n,right:e,typeName:x.ZodIntersection,...M(t)});class ze extends F{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==I.array)return T(r,{code:w.invalid_type,expected:I.array,received:r.parsedType}),N;if(r.data.length<this._def.items.length)return T(r,{code:w.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),N;!this._def.rest&&r.data.length>this._def.items.length&&(T(r,{code:w.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());const a=[...r.data].map((i,o)=>{const l=this._def.items[o]||this._def.rest;return l?l._parse(new be(r,i,r.path,o)):null}).filter(i=>!!i);return r.common.async?Promise.all(a).then(i=>ie.mergeArray(t,i)):ie.mergeArray(t,a)}get items(){return this._def.items}rest(e){return new ze({...this._def,rest:e})}}ze.create=(n,e)=>{if(!Array.isArray(n))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new ze({items:n,typeName:x.ZodTuple,rest:null,...M(e)})};class xn extends F{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==I.object)return T(r,{code:w.invalid_type,expected:I.object,received:r.parsedType}),N;const s=[],a=this._def.keyType,i=this._def.valueType;for(const o in r.data)s.push({key:a._parse(new be(r,o,r.path,o)),value:i._parse(new be(r,r.data[o],r.path,o)),alwaysSet:o in r.data});return r.common.async?ie.mergeObjectAsync(t,s):ie.mergeObjectSync(t,s)}get element(){return this._def.valueType}static create(e,t,r){return t instanceof F?new xn({keyType:e,valueType:t,typeName:x.ZodRecord,...M(r)}):new xn({keyType:Ee.create(),valueType:e,typeName:x.ZodRecord,...M(t)})}}class es extends F{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==I.map)return T(r,{code:w.invalid_type,expected:I.map,received:r.parsedType}),N;const s=this._def.keyType,a=this._def.valueType,i=[...r.data.entries()].map(([o,l],c)=>({key:s._parse(new be(r,o,r.path,[c,"key"])),value:a._parse(new be(r,l,r.path,[c,"value"]))}));if(r.common.async){const o=new Map;return Promise.resolve().then(async()=>{for(const l of i){const c=await l.key,p=await l.value;if(c.status==="aborted"||p.status==="aborted")return N;(c.status==="dirty"||p.status==="dirty")&&t.dirty(),o.set(c.value,p.value)}return{status:t.value,value:o}})}else{const o=new Map;for(const l of i){const c=l.key,p=l.value;if(c.status==="aborted"||p.status==="aborted")return N;(c.status==="dirty"||p.status==="dirty")&&t.dirty(),o.set(c.value,p.value)}return{status:t.value,value:o}}}}es.create=(n,e,t)=>new es({valueType:e,keyType:n,typeName:x.ZodMap,...M(t)});class jt extends F{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==I.set)return T(r,{code:w.invalid_type,expected:I.set,received:r.parsedType}),N;const s=this._def;s.minSize!==null&&r.data.size<s.minSize.value&&(T(r,{code:w.too_small,minimum:s.minSize.value,type:"set",inclusive:!0,exact:!1,message:s.minSize.message}),t.dirty()),s.maxSize!==null&&r.data.size>s.maxSize.value&&(T(r,{code:w.too_big,maximum:s.maxSize.value,type:"set",inclusive:!0,exact:!1,message:s.maxSize.message}),t.dirty());const a=this._def.valueType;function i(l){const c=new Set;for(const p of l){if(p.status==="aborted")return N;p.status==="dirty"&&t.dirty(),c.add(p.value)}return{status:t.value,value:c}}const o=[...r.data.values()].map((l,c)=>a._parse(new be(r,l,r.path,c)));return r.common.async?Promise.all(o).then(l=>i(l)):i(o)}min(e,t){return new jt({...this._def,minSize:{value:e,message:A.toString(t)}})}max(e,t){return new jt({...this._def,maxSize:{value:e,message:A.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}jt.create=(n,e)=>new jt({valueType:n,minSize:null,maxSize:null,typeName:x.ZodSet,...M(e)});class bn extends F{get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}bn.create=(n,e)=>new bn({getter:n,typeName:x.ZodLazy,...M(e)});class Sn extends F{_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return T(t,{received:t.data,code:w.invalid_literal,expected:this._def.value}),N}return{status:"valid",value:e.data}}get value(){return this._def.value}}Sn.create=(n,e)=>new Sn({value:n,typeName:x.ZodLiteral,...M(e)});function ts(n,e){return new Ve({values:n,typeName:x.ZodEnum,...M(e)})}class Ve extends F{_parse(e){if(typeof e.data!="string"){const t=this._getOrReturnCtx(e),r=this._def.values;return T(t,{expected:L.joinValues(r),received:t.parsedType,code:w.invalid_type}),N}if(this._cache||(this._cache=new Set(this._def.values)),!this._cache.has(e.data)){const t=this._getOrReturnCtx(e),r=this._def.values;return T(t,{received:t.data,code:w.invalid_enum_value,options:r}),N}return ge(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e,t=this._def){return Ve.create(e,{...this._def,...t})}exclude(e,t=this._def){return Ve.create(this.options.filter(r=>!e.includes(r)),{...this._def,...t})}}Ve.create=ts;class sr extends F{_parse(e){const t=L.getValidEnumValues(this._def.values),r=this._getOrReturnCtx(e);if(r.parsedType!==I.string&&r.parsedType!==I.number){const s=L.objectValues(t);return T(r,{expected:L.joinValues(s),received:r.parsedType,code:w.invalid_type}),N}if(this._cache||(this._cache=new Set(L.getValidEnumValues(this._def.values))),!this._cache.has(e.data)){const s=L.objectValues(t);return T(r,{received:r.data,code:w.invalid_enum_value,options:s}),N}return ge(e.data)}get enum(){return this._def.values}}sr.create=(n,e)=>new sr({values:n,typeName:x.ZodNativeEnum,...M(e)});class Tn extends F{unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==I.promise&&t.common.async===!1)return T(t,{code:w.invalid_type,expected:I.promise,received:t.parsedType}),N;const r=t.parsedType===I.promise?t.data:Promise.resolve(t.data);return ge(r.then(s=>this._def.type.parseAsync(s,{path:t.path,errorMap:t.common.contextualErrorMap})))}}Tn.create=(n,e)=>new Tn({type:n,typeName:x.ZodPromise,...M(e)});class We extends F{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===x.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=this._def.effect||null,a={addIssue:i=>{T(r,i),i.fatal?t.abort():t.dirty()},get path(){return r.path}};if(a.addIssue=a.addIssue.bind(a),s.type==="preprocess"){const i=s.transform(r.data,a);if(r.common.async)return Promise.resolve(i).then(async o=>{if(t.value==="aborted")return N;const l=await this._def.schema._parseAsync({data:o,path:r.path,parent:r});return l.status==="aborted"?N:l.status==="dirty"||t.value==="dirty"?Pt(l.value):l});{if(t.value==="aborted")return N;const o=this._def.schema._parseSync({data:i,path:r.path,parent:r});return o.status==="aborted"?N:o.status==="dirty"||t.value==="dirty"?Pt(o.value):o}}if(s.type==="refinement"){const i=o=>{const l=s.refinement(o,a);if(r.common.async)return Promise.resolve(l);if(l instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return o};if(r.common.async===!1){const o=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});return o.status==="aborted"?N:(o.status==="dirty"&&t.dirty(),i(o.value),{status:t.value,value:o.value})}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(o=>o.status==="aborted"?N:(o.status==="dirty"&&t.dirty(),i(o.value).then(()=>({status:t.value,value:o.value}))))}if(s.type==="transform")if(r.common.async===!1){const i=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});if(!ft(i))return N;const o=s.transform(i.value,a);if(o instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:o}}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(i=>ft(i)?Promise.resolve(s.transform(i.value,a)).then(o=>({status:t.value,value:o})):N);L.assertNever(s)}}We.create=(n,e,t)=>new We({schema:n,typeName:x.ZodEffects,effect:e,...M(t)}),We.createWithPreprocess=(n,e,t)=>new We({schema:e,effect:{type:"preprocess",transform:n},typeName:x.ZodEffects,...M(t)});class Re extends F{_parse(e){return this._getType(e)===I.undefined?ge(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Re.create=(n,e)=>new Re({innerType:n,typeName:x.ZodOptional,...M(e)});class He extends F{_parse(e){return this._getType(e)===I.null?ge(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}He.create=(n,e)=>new He({innerType:n,typeName:x.ZodNullable,...M(e)});class kn extends F{_parse(e){const{ctx:t}=this._processInputParams(e);let r=t.data;return t.parsedType===I.undefined&&(r=this._def.defaultValue()),this._def.innerType._parse({data:r,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}kn.create=(n,e)=>new kn({innerType:n,typeName:x.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...M(e)});class In extends F{_parse(e){const{ctx:t}=this._processInputParams(e),r={...t,common:{...t.common,issues:[]}},s=this._def.innerType._parse({data:r.data,path:r.path,parent:{...r}});return _n(s)?s.then(a=>({status:"valid",value:a.status==="valid"?a.value:this._def.catchValue({get error(){return new Oe(r.common.issues)},input:r.data})})):{status:"valid",value:s.status==="valid"?s.value:this._def.catchValue({get error(){return new Oe(r.common.issues)},input:r.data})}}removeCatch(){return this._def.innerType}}In.create=(n,e)=>new In({innerType:n,typeName:x.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...M(e)});class ns extends F{_parse(e){if(this._getType(e)!==I.nan){const r=this._getOrReturnCtx(e);return T(r,{code:w.invalid_type,expected:I.nan,received:r.parsedType}),N}return{status:"valid",value:e.data}}}ns.create=n=>new ns({typeName:x.ZodNaN,...M(n)});class rs extends F{_parse(e){const{ctx:t}=this._processInputParams(e),r=t.data;return this._def.type._parse({data:r,path:t.path,parent:t})}unwrap(){return this._def.type}}class ar extends F{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.common.async)return(async()=>{const a=await this._def.in._parseAsync({data:r.data,path:r.path,parent:r});return a.status==="aborted"?N:a.status==="dirty"?(t.dirty(),Pt(a.value)):this._def.out._parseAsync({data:a.value,path:r.path,parent:r})})();{const s=this._def.in._parseSync({data:r.data,path:r.path,parent:r});return s.status==="aborted"?N:s.status==="dirty"?(t.dirty(),{status:"dirty",value:s.value}):this._def.out._parseSync({data:s.value,path:r.path,parent:r})}}static create(e,t){return new ar({in:e,out:t,typeName:x.ZodPipeline})}}class An extends F{_parse(e){const t=this._def.innerType._parse(e),r=s=>(ft(s)&&(s.value=Object.freeze(s.value)),s);return _n(t)?t.then(s=>r(s)):r(t)}unwrap(){return this._def.innerType}}An.create=(n,e)=>new An({innerType:n,typeName:x.ZodReadonly,...M(e)});var x;(function(n){n.ZodString="ZodString",n.ZodNumber="ZodNumber",n.ZodNaN="ZodNaN",n.ZodBigInt="ZodBigInt",n.ZodBoolean="ZodBoolean",n.ZodDate="ZodDate",n.ZodSymbol="ZodSymbol",n.ZodUndefined="ZodUndefined",n.ZodNull="ZodNull",n.ZodAny="ZodAny",n.ZodUnknown="ZodUnknown",n.ZodNever="ZodNever",n.ZodVoid="ZodVoid",n.ZodArray="ZodArray",n.ZodObject="ZodObject",n.ZodUnion="ZodUnion",n.ZodDiscriminatedUnion="ZodDiscriminatedUnion",n.ZodIntersection="ZodIntersection",n.ZodTuple="ZodTuple",n.ZodRecord="ZodRecord",n.ZodMap="ZodMap",n.ZodSet="ZodSet",n.ZodFunction="ZodFunction",n.ZodLazy="ZodLazy",n.ZodLiteral="ZodLiteral",n.ZodEnum="ZodEnum",n.ZodEffects="ZodEffects",n.ZodNativeEnum="ZodNativeEnum",n.ZodOptional="ZodOptional",n.ZodNullable="ZodNullable",n.ZodDefault="ZodDefault",n.ZodCatch="ZodCatch",n.ZodPromise="ZodPromise",n.ZodBranded="ZodBranded",n.ZodPipeline="ZodPipeline",n.ZodReadonly="ZodReadonly"})(x||(x={}));const d=Ee.create,C=ht.create,Ft=Xn.create,Z=tr.create;$e.create;const U=Se.create,g=Y.create,ss=vn.create,ce=nr.create;wn.create,ze.create;const Q=xn.create,ci=bn.create,m=Sn.create,oe=Ve.create;Tn.create,Re.create,He.create;function di(){return{}}function li(n,e){var r,s;const t={type:"array"};return((s=(r=n.type)==null?void 0:r._def)==null?void 0:s.typeName)!==x.ZodAny&&(t.items=J(n.type._def,{...e,currentPath:[...e.currentPath,"items"]})),n.minLength&&G(t,"minItems",n.minLength.value,n.minLength.message,e),n.maxLength&&G(t,"maxItems",n.maxLength.value,n.maxLength.message,e),n.exactLength&&(G(t,"minItems",n.exactLength.value,n.exactLength.message,e),G(t,"maxItems",n.exactLength.value,n.exactLength.message,e)),t}function pi(n,e){const t={type:"integer",format:"int64"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"min":e.target==="jsonSchema7"?r.inclusive?G(t,"minimum",r.value,r.message,e):G(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),G(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?G(t,"maximum",r.value,r.message,e):G(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),G(t,"maximum",r.value,r.message,e));break;case"multipleOf":G(t,"multipleOf",r.value,r.message,e);break}return t}function fi(){return{type:"boolean"}}function hi(n,e){return J(n.type._def,e)}const mi=(n,e)=>J(n.innerType._def,e);function as(n,e,t){const r=t??e.dateStrategy;if(Array.isArray(r))return{anyOf:r.map((s,a)=>as(n,e,s))};switch(r){case"string":case"format:date-time":return{type:"string",format:"date-time"};case"format:date":return{type:"string",format:"date"};case"integer":return gi(n,e)}}const gi=(n,e)=>{const t={type:"integer",format:"unix-time"};if(e.target==="openApi3")return t;for(const r of n.checks)switch(r.kind){case"min":G(t,"minimum",r.value,r.message,e);break;case"max":G(t,"maximum",r.value,r.message,e);break}return t};function _i(n,e){return{...J(n.innerType._def,e),default:n.defaultValue()}}function yi(n,e,t){return e.effectStrategy==="input"?J(n.schema._def,e,t):{}}function vi(n){return{type:"string",enum:[...n.values]}}const wi=n=>"type"in n&&n.type==="string"?!1:"allOf"in n;function xi(n,e){const t=[J(n.left._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),J(n.right._def,{...e,currentPath:[...e.currentPath,"allOf","1"]})].filter(a=>!!a);let r=e.target==="jsonSchema2019-09"?{unevaluatedProperties:!1}:void 0;const s=[];return t.forEach(a=>{if(wi(a))s.push(...a.allOf),a.unevaluatedProperties===void 0&&(r=void 0);else{let i=a;if("additionalProperties"in a&&a.additionalProperties===!1){const{additionalProperties:o,...l}=a;i=l}else r=void 0;s.push(i)}}),s.length?{allOf:s,...r}:void 0}function bi(n,e){const t=typeof n.value;return t!=="bigint"&&t!=="number"&&t!=="boolean"&&t!=="string"?{type:Array.isArray(n.value)?"array":"object"}:e.target==="openApi3"?{type:t==="bigint"?"integer":t,enum:[n.value]}:{type:t==="bigint"?"integer":t,const:n.value}}let ir;const Ke={cuid:/^[cC][^\s-]{8,}$/,cuid2:/^[0-9a-z]+$/,ulid:/^[0-9A-HJKMNP-TV-Z]{26}$/,email:/^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,emoji:()=>(ir===void 0&&(ir=RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),ir),base64:/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,nanoid:/^[a-zA-Z0-9_-]{21}$/};function is(n,e){const t={type:"string"};function r(s){return e.patternStrategy==="escape"?Si(s):s}if(n.checks)for(const s of n.checks)switch(s.kind){case"min":G(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e);break;case"max":G(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"email":switch(e.emailStrategy){case"format:email":_e(t,"email",s.message,e);break;case"format:idn-email":_e(t,"idn-email",s.message,e);break;case"pattern:zod":ye(t,Ke.email,s.message,e);break}break;case"url":_e(t,"uri",s.message,e);break;case"uuid":_e(t,"uuid",s.message,e);break;case"regex":ye(t,s.regex,s.message,e);break;case"cuid":ye(t,Ke.cuid,s.message,e);break;case"cuid2":ye(t,Ke.cuid2,s.message,e);break;case"startsWith":ye(t,RegExp(`^${r(s.value)}`),s.message,e);break;case"endsWith":ye(t,RegExp(`${r(s.value)}$`),s.message,e);break;case"datetime":_e(t,"date-time",s.message,e);break;case"date":_e(t,"date",s.message,e);break;case"time":_e(t,"time",s.message,e);break;case"duration":_e(t,"duration",s.message,e);break;case"length":G(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e),G(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"includes":{ye(t,RegExp(r(s.value)),s.message,e);break}case"ip":{s.version!=="v6"&&_e(t,"ipv4",s.message,e),s.version!=="v4"&&_e(t,"ipv6",s.message,e);break}case"emoji":ye(t,Ke.emoji,s.message,e);break;case"ulid":{ye(t,Ke.ulid,s.message,e);break}case"base64":{switch(e.base64Strategy){case"format:binary":{_e(t,"binary",s.message,e);break}case"contentEncoding:base64":{G(t,"contentEncoding","base64",s.message,e);break}case"pattern:zod":{ye(t,Ke.base64,s.message,e);break}}break}case"nanoid":ye(t,Ke.nanoid,s.message,e)}return t}const Si=n=>Array.from(n).map(e=>/[a-zA-Z0-9]/.test(e)?e:`\\${e}`).join(""),_e=(n,e,t,r)=>{var s;n.format||(s=n.anyOf)!=null&&s.some(a=>a.format)?(n.anyOf||(n.anyOf=[]),n.format&&(n.anyOf.push({format:n.format,...n.errorMessage&&r.errorMessages&&{errorMessage:{format:n.errorMessage.format}}}),delete n.format,n.errorMessage&&(delete n.errorMessage.format,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.anyOf.push({format:e,...t&&r.errorMessages&&{errorMessage:{format:t}}})):G(n,"format",e,t,r)},ye=(n,e,t,r)=>{var s;n.pattern||(s=n.allOf)!=null&&s.some(a=>a.pattern)?(n.allOf||(n.allOf=[]),n.pattern&&(n.allOf.push({pattern:n.pattern,...n.errorMessage&&r.errorMessages&&{errorMessage:{pattern:n.errorMessage.pattern}}}),delete n.pattern,n.errorMessage&&(delete n.errorMessage.pattern,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.allOf.push({pattern:os(e,r),...t&&r.errorMessages&&{errorMessage:{pattern:t}}})):G(n,"pattern",os(e,r),t,r)},os=(n,e)=>{var c;const t=typeof n=="function"?n():n;if(!e.applyRegexFlags||!t.flags)return t.source;const r={i:t.flags.includes("i"),m:t.flags.includes("m"),s:t.flags.includes("s")},s=r.i?t.source.toLowerCase():t.source;let a="",i=!1,o=!1,l=!1;for(let p=0;p<s.length;p++){if(i){a+=s[p],i=!1;continue}if(r.i){if(o){if(s[p].match(/[a-z]/)){l?(a+=s[p],a+=`${s[p-2]}-${s[p]}`.toUpperCase(),l=!1):s[p+1]==="-"&&((c=s[p+2])!=null&&c.match(/[a-z]/))?(a+=s[p],l=!0):a+=`${s[p]}${s[p].toUpperCase()}`;continue}}else if(s[p].match(/[a-z]/)){a+=`[${s[p]}${s[p].toUpperCase()}]`;continue}}if(r.m){if(s[p]==="^"){a+=`(^|(?<=[\r
]))`;continue}else if(s[p]==="$"){a+=`($|(?=[\r
]))`;continue}}if(r.s&&s[p]==="."){a+=o?`${s[p]}\r
`:`[${s[p]}\r
]`;continue}a+=s[p],s[p]==="\\"?i=!0:o&&s[p]==="]"?o=!1:!o&&s[p]==="["&&(o=!0)}try{const p=new RegExp(a)}catch{return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`),t.source}return a};function us(n,e){var r,s,a,i;if(e.target==="openApi3"&&((r=n.keyType)==null?void 0:r._def.typeName)===x.ZodEnum)return{type:"object",required:n.keyType._def.values,properties:n.keyType._def.values.reduce((o,l)=>({...o,[l]:J(n.valueType._def,{...e,currentPath:[...e.currentPath,"properties",l]})??{}}),{}),additionalProperties:!1};const t={type:"object",additionalProperties:J(n.valueType._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??{}};if(e.target==="openApi3")return t;if(((s=n.keyType)==null?void 0:s._def.typeName)===x.ZodString&&((a=n.keyType._def.checks)!=null&&a.length)){const o=Object.entries(is(n.keyType._def,e)).reduce((l,[c,p])=>c==="type"?l:{...l,[c]:p},{});return{...t,propertyNames:o}}else if(((i=n.keyType)==null?void 0:i._def.typeName)===x.ZodEnum)return{...t,propertyNames:{enum:n.keyType._def.values}};return t}function Ti(n,e){if(e.mapStrategy==="record")return us(n,e);const t=J(n.keyType._def,{...e,currentPath:[...e.currentPath,"items","items","0"]})||{},r=J(n.valueType._def,{...e,currentPath:[...e.currentPath,"items","items","1"]})||{};return{type:"array",maxItems:125,items:{type:"array",items:[t,r],minItems:2,maxItems:2}}}function ki(n){const e=n.values,r=Object.keys(n.values).filter(a=>typeof e[e[a]]!="number").map(a=>e[a]),s=Array.from(new Set(r.map(a=>typeof a)));return{type:s.length===1?s[0]==="string"?"string":"number":["string","number"],enum:r}}function Ii(){return{not:{}}}function Ai(n){return n.target==="openApi3"?{enum:["null"],nullable:!0}:{type:"null"}}const Cn={ZodString:"string",ZodNumber:"number",ZodBigInt:"integer",ZodBoolean:"boolean",ZodNull:"null"};function Ci(n,e){if(e.target==="openApi3")return cs(n,e);const t=n.options instanceof Map?Array.from(n.options.values()):n.options;if(t.every(r=>r._def.typeName in Cn&&(!r._def.checks||!r._def.checks.length))){const r=t.reduce((s,a)=>{const i=Cn[a._def.typeName];return i&&!s.includes(i)?[...s,i]:s},[]);return{type:r.length>1?r:r[0]}}else if(t.every(r=>r._def.typeName==="ZodLiteral"&&!r.description)){const r=t.reduce((s,a)=>{const i=typeof a._def.value;switch(i){case"string":case"number":case"boolean":return[...s,i];case"bigint":return[...s,"integer"];case"object":if(a._def.value===null)return[...s,"null"];case"symbol":case"undefined":case"function":default:return s}},[]);if(r.length===t.length){const s=r.filter((a,i,o)=>o.indexOf(a)===i);return{type:s.length>1?s:s[0],enum:t.reduce((a,i)=>a.includes(i._def.value)?a:[...a,i._def.value],[])}}}else if(t.every(r=>r._def.typeName==="ZodEnum"))return{type:"string",enum:t.reduce((r,s)=>[...r,...s._def.values.filter(a=>!r.includes(a))],[])};return cs(n,e)}const cs=(n,e)=>{const t=(n.options instanceof Map?Array.from(n.options.values()):n.options).map((r,s)=>J(r._def,{...e,currentPath:[...e.currentPath,"anyOf",`${s}`]})).filter(r=>!!r&&(!e.strictUnions||typeof r=="object"&&Object.keys(r).length>0));return t.length?{anyOf:t}:void 0};function Oi(n,e){if(["ZodString","ZodNumber","ZodBigInt","ZodBoolean","ZodNull"].includes(n.innerType._def.typeName)&&(!n.innerType._def.checks||!n.innerType._def.checks.length))return e.target==="openApi3"||e.nullableStrategy==="property"?{type:Cn[n.innerType._def.typeName],nullable:!0}:{type:[Cn[n.innerType._def.typeName],"null"]};if(e.target==="openApi3"){const r=J(n.innerType._def,{...e,currentPath:[...e.currentPath]});return r&&"$ref"in r?{allOf:[r],nullable:!0}:r&&{...r,nullable:!0}}const t=J(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","0"]});return t&&{anyOf:[t,{type:"null"}]}}function Ei(n,e){const t={type:"number"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"int":t.type="integer",Br(t,"type",r.message,e);break;case"min":e.target==="jsonSchema7"?r.inclusive?G(t,"minimum",r.value,r.message,e):G(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),G(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?G(t,"maximum",r.value,r.message,e):G(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),G(t,"maximum",r.value,r.message,e));break;case"multipleOf":G(t,"multipleOf",r.value,r.message,e);break}return t}function Ni(n,e){return e.removeAdditionalStrategy==="strict"?n.catchall._def.typeName==="ZodNever"?n.unknownKeys!=="strict":J(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0:n.catchall._def.typeName==="ZodNever"?n.unknownKeys==="passthrough":J(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0}function Ri(n,e){const t={type:"object",...Object.entries(n.shape()).reduce((r,[s,a])=>{var l;if(a===void 0||a._def===void 0)return r;const i=[...e.currentPath,"properties",s],o=J(a._def,{...e,currentPath:i,propertyPath:i});if(o===void 0)return r;if(e.openaiStrictMode&&a.isOptional()&&!a.isNullable()&&typeof((l=a._def)==null?void 0:l.defaultValue)>"u")throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);return{properties:{...r.properties,[s]:o},required:a.isOptional()&&!e.openaiStrictMode?r.required:[...r.required,s]}},{properties:{},required:[]}),additionalProperties:Ni(n,e)};return t.required.length||delete t.required,t}const Di=(n,e)=>{var r;if(e.currentPath.toString()===((r=e.propertyPath)==null?void 0:r.toString()))return J(n.innerType._def,e);const t=J(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","1"]});return t?{anyOf:[{not:{}},t]}:{}},Pi=(n,e)=>{if(e.pipeStrategy==="input")return J(n.in._def,e);if(e.pipeStrategy==="output")return J(n.out._def,e);const t=J(n.in._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),r=J(n.out._def,{...e,currentPath:[...e.currentPath,"allOf",t?"1":"0"]});return{allOf:[t,r].filter(s=>s!==void 0)}};function Mi(n,e){return J(n.type._def,e)}function ji(n,e){const r={type:"array",uniqueItems:!0,items:J(n.valueType._def,{...e,currentPath:[...e.currentPath,"items"]})};return n.minSize&&G(r,"minItems",n.minSize.value,n.minSize.message,e),n.maxSize&&G(r,"maxItems",n.maxSize.value,n.maxSize.message,e),r}function Fi(n,e){return n.rest?{type:"array",minItems:n.items.length,items:n.items.map((t,r)=>J(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[]),additionalItems:J(n.rest._def,{...e,currentPath:[...e.currentPath,"additionalItems"]})}:{type:"array",minItems:n.items.length,maxItems:n.items.length,items:n.items.map((t,r)=>J(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[])}}function $i(){return{not:{}}}function Zi(){return{}}const Li=(n,e)=>J(n.innerType._def,e);function J(n,e,t=!1){var i;const r=e.seen.get(n);if(e.override){const o=(i=e.override)==null?void 0:i.call(e,n,e,r,t);if(o!==Pa)return o}if(r&&!t){const o=Ui(r,e);if(o!==void 0)return"$ref"in o&&e.seenRefs.add(o.$ref),o}const s={def:n,path:e.currentPath,jsonSchema:void 0};e.seen.set(n,s);const a=qi(n,n.typeName,e,t);return a&&Bi(n,e,a),s.jsonSchema=a,a}const Ui=(n,e)=>{switch(e.$refStrategy){case"root":return{$ref:n.path.join("/")};case"extract-to-root":const t=n.path.slice(e.basePath.length+1).join("_");return t!==e.name&&e.nameStrategy==="duplicate-ref"&&(e.definitions[t]=n.def),{$ref:[...e.basePath,e.definitionPath,t].join("/")};case"relative":return{$ref:Ji(e.currentPath,n.path)};case"none":case"seen":return n.path.length<e.currentPath.length&&n.path.every((r,s)=>e.currentPath[s]===r)?(console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`),{}):e.$refStrategy==="seen"?{}:void 0}},Ji=(n,e)=>{let t=0;for(;t<n.length&&t<e.length&&n[t]===e[t];t++);return[(n.length-t).toString(),...e.slice(t)].join("/")},qi=(n,e,t,r)=>{switch(e){case x.ZodString:return is(n,t);case x.ZodNumber:return Ei(n,t);case x.ZodObject:return Ri(n,t);case x.ZodBigInt:return pi(n,t);case x.ZodBoolean:return fi();case x.ZodDate:return as(n,t);case x.ZodUndefined:return $i();case x.ZodNull:return Ai(t);case x.ZodArray:return li(n,t);case x.ZodUnion:case x.ZodDiscriminatedUnion:return Ci(n,t);case x.ZodIntersection:return xi(n,t);case x.ZodTuple:return Fi(n,t);case x.ZodRecord:return us(n,t);case x.ZodLiteral:return bi(n,t);case x.ZodEnum:return vi(n);case x.ZodNativeEnum:return ki(n);case x.ZodNullable:return Oi(n,t);case x.ZodOptional:return Di(n,t);case x.ZodMap:return Ti(n,t);case x.ZodSet:return ji(n,t);case x.ZodLazy:return J(n.getter()._def,t);case x.ZodPromise:return Mi(n,t);case x.ZodNaN:case x.ZodNever:return Ii();case x.ZodEffects:return yi(n,t,r);case x.ZodAny:return di();case x.ZodUnknown:return Zi();case x.ZodDefault:return _i(n,t);case x.ZodBranded:return hi(n,t);case x.ZodReadonly:return Li(n,t);case x.ZodCatch:return mi(n,t);case x.ZodPipeline:return Pi(n,t);case x.ZodFunction:case x.ZodVoid:case x.ZodSymbol:return;default:return(s=>{})()}},Bi=(n,e,t)=>(n.description&&(t.description=n.description,e.markdownDescription&&(t.markdownDescription=n.description)),t),Gi=(n,e)=>{const t=Fa(e),r=typeof e=="string"?e:(e==null?void 0:e.nameStrategy)==="title"||e==null?void 0:e.name,s=J(n._def,r===void 0?t:{...t,currentPath:[...t.basePath,t.definitionPath,r]},!1)??{},a=typeof e=="object"&&e.name!==void 0&&e.nameStrategy==="title"?e.name:void 0;a!==void 0&&(s.title=a);const i=(()=>{if(ja(t.definitions))return;const l={},c=new Set;for(let p=0;p<500;p++){const f=Object.entries(t.definitions).filter(([h])=>!c.has(h));if(f.length===0)break;for(const[h,S]of f)l[h]=J(Hn(S),{...t,currentPath:[...t.basePath,t.definitionPath,h]},!0)??{},c.add(h)}return l})(),o=r===void 0?i?{...s,[t.definitionPath]:i}:s:t.nameStrategy==="duplicate-ref"?{...s,...i||t.seenRefs.size?{[t.definitionPath]:{...i,...t.seenRefs.size?{[r]:s}:void 0}}:void 0}:{$ref:[...t.$refStrategy==="relative"?[]:t.basePath,t.definitionPath,r].join("/"),[t.definitionPath]:{...i,[r]:s}};return t.target==="jsonSchema7"?o.$schema="http://json-schema.org/draft-07/schema#":t.target==="jsonSchema2019-09"&&(o.$schema="https://json-schema.org/draft/2019-09/schema#"),o};function zi(n,{parser:e,callback:t}){const r={...n};return Object.defineProperties(r,{$brand:{value:"auto-parseable-tool",enumerable:!1},$parseRaw:{value:e,enumerable:!1},$callback:{value:t,enumerable:!1}}),r}function ds(n,e){return Gi(n,{openaiStrictMode:!0,name:e.name,nameStrategy:"duplicate-ref",$refStrategy:"extract-to-root",nullableStrategy:"property"})}function Vi(n,e,t){return Da({type:"json_schema",...t,name:e,strict:!0,schema:ds(n,{name:e})},r=>n.parse(JSON.parse(r)))}function Wi(n){return zi({type:"function",name:n.name,parameters:ds(n.parameters,{name:n.name}),strict:!0},{callback:n.function,parser:e=>n.parameters.parse(JSON.parse(e))})}class Ze extends Error{constructor(t,r){super(t);_(this,"state");this.state=r}}class Hi extends Ze{}class ls extends Ze{}class de extends Ze{}class X extends Ze{}class ps extends Ze{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class Ki extends Ze{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class fs extends Ze{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}class On extends Ze{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}function Ye(n){return typeof n=="object"&&n!==null&&"_def"in n&&typeof n._def=="object"&&n._def!==null&&"typeName"in n._def&&n._def.typeName==="ZodObject"}function Yi(n){return typeof n=="object"&&n!==null&&"input"in n&&typeof n.input=="string"}function En(n){if(n=n.replace(/\s/g,"_"),n=n.replace(/[^a-zA-Z0-9]/g,"_"),n.length===0)throw new Error("Tool name cannot be empty");return n}function or(n,e){const t=r=>JSON.parse(r);if(Ye(n)){const r=Wi({name:e,parameters:n,function:()=>{}});return{schema:r.parameters,parser:r.$parseRaw}}else if(typeof n=="object"&&n!==null)return{schema:n,parser:t};throw new X("Input type is not a ZodObject or a valid JSON schema")}function hs(n){if(n==="text")return"text";if(Ye(n)){const e=Vi(n,"output");return{type:e.type,name:e.name,strict:e.strict||!1,schema:e.schema}}return n}function Xi(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}var Nn={exports:{}},ur,ms;function Qi(){if(ms)return ur;ms=1;var n=1e3,e=n*60,t=e*60,r=t*24,s=r*7,a=r*365.25;ur=function(p,f){f=f||{};var h=typeof p;if(h==="string"&&p.length>0)return i(p);if(h==="number"&&isFinite(p))return f.long?l(p):o(p);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(p))};function i(p){if(p=String(p),!(p.length>100)){var f=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(p);if(f){var h=parseFloat(f[1]),S=(f[2]||"ms").toLowerCase();switch(S){case"years":case"year":case"yrs":case"yr":case"y":return h*a;case"weeks":case"week":case"w":return h*s;case"days":case"day":case"d":return h*r;case"hours":case"hour":case"hrs":case"hr":case"h":return h*t;case"minutes":case"minute":case"mins":case"min":case"m":return h*e;case"seconds":case"second":case"secs":case"sec":case"s":return h*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return h;default:return}}}}function o(p){var f=Math.abs(p);return f>=r?Math.round(p/r)+"d":f>=t?Math.round(p/t)+"h":f>=e?Math.round(p/e)+"m":f>=n?Math.round(p/n)+"s":p+"ms"}function l(p){var f=Math.abs(p);return f>=r?c(p,f,r,"day"):f>=t?c(p,f,t,"hour"):f>=e?c(p,f,e,"minute"):f>=n?c(p,f,n,"second"):p+" ms"}function c(p,f,h,S){var b=f>=h*1.5;return Math.round(p/h)+" "+S+(b?"s":"")}return ur}var cr,gs;function eo(){if(gs)return cr;gs=1;function n(e){r.debug=r,r.default=r,r.coerce=c,r.disable=o,r.enable=a,r.enabled=l,r.humanize=Qi(),r.destroy=p,Object.keys(e).forEach(f=>{r[f]=e[f]}),r.names=[],r.skips=[],r.formatters={};function t(f){let h=0;for(let S=0;S<f.length;S++)h=(h<<5)-h+f.charCodeAt(S),h|=0;return r.colors[Math.abs(h)%r.colors.length]}r.selectColor=t;function r(f){let h,S=null,b,v;function E(...R){if(!E.enabled)return;const H=E,ne=Number(new Date),he=ne-(h||ne);H.diff=he,H.prev=h,H.curr=ne,h=ne,R[0]=r.coerce(R[0]),typeof R[0]!="string"&&R.unshift("%O");let me=0;R[0]=R[0].replace(/%([a-zA-Z%])/g,(Nr,Sc)=>{if(Nr==="%%")return"%";me++;const xa=r.formatters[Sc];if(typeof xa=="function"){const Tc=R[me];Nr=xa.call(H,Tc),R.splice(me,1),me--}return Nr}),r.formatArgs.call(H,R),(H.log||r.log).apply(H,R)}return E.namespace=f,E.useColors=r.useColors(),E.color=r.selectColor(f),E.extend=s,E.destroy=r.destroy,Object.defineProperty(E,"enabled",{enumerable:!0,configurable:!1,get:()=>S!==null?S:(b!==r.namespaces&&(b=r.namespaces,v=r.enabled(f)),v),set:R=>{S=R}}),typeof r.init=="function"&&r.init(E),E}function s(f,h){const S=r(this.namespace+(typeof h>"u"?":":h)+f);return S.log=this.log,S}function a(f){r.save(f),r.namespaces=f,r.names=[],r.skips=[];const h=(typeof f=="string"?f:"").trim().replace(/\s+/g,",").split(",").filter(Boolean);for(const S of h)S[0]==="-"?r.skips.push(S.slice(1)):r.names.push(S)}function i(f,h){let S=0,b=0,v=-1,E=0;for(;S<f.length;)if(b<h.length&&(h[b]===f[S]||h[b]==="*"))h[b]==="*"?(v=b,E=S,b++):(S++,b++);else if(v!==-1)b=v+1,E++,S=E;else return!1;for(;b<h.length&&h[b]==="*";)b++;return b===h.length}function o(){const f=[...r.names,...r.skips.map(h=>"-"+h)].join(",");return r.enable(""),f}function l(f){for(const h of r.skips)if(i(f,h))return!1;for(const h of r.names)if(i(f,h))return!0;return!1}function c(f){return f instanceof Error?f.stack||f.message:f}function p(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return r.enable(r.load()),r}return cr=n,cr}var _s;function to(){return _s||(_s=1,function(n,e){e.formatArgs=r,e.save=s,e.load=a,e.useColors=t,e.storage=i(),e.destroy=(()=>{let l=!1;return()=>{l||(l=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function t(){if(typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs))return!0;if(typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let l;return typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&(l=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(l[1],10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function r(l){if(l[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+l[0]+(this.useColors?"%c ":" ")+"+"+n.exports.humanize(this.diff),!this.useColors)return;const c="color: "+this.color;l.splice(1,0,c,"color: inherit");let p=0,f=0;l[0].replace(/%[a-zA-Z%]/g,h=>{h!=="%%"&&(p++,h==="%c"&&(f=p))}),l.splice(f,0,c)}e.log=console.debug||console.log||(()=>{});function s(l){try{l?e.storage.setItem("debug",l):e.storage.removeItem("debug")}catch{}}function a(){let l;try{l=e.storage.getItem("debug")||e.storage.getItem("DEBUG")}catch{}return!l&&typeof process<"u"&&"env"in process&&(l=process.env.DEBUG),l}function i(){try{return localStorage}catch{}}n.exports=eo()(e);const{formatters:o}=n.exports;o.j=function(l){try{return JSON.stringify(l)}catch(c){return"[UnexpectedJSONParseError]: "+c.message}}}(Nn,Nn.exports)),Nn.exports}var no=to();const ro=Xi(no);function so(){return po()}function ys(n){const e=so();return typeof e<"u"&&(e[n]==="true"||e[n]==="1")}const vs={get disabled(){return!0}},ws={get dontLogModelData(){return ys("OPENAI_AGENTS_DONT_LOG_MODEL_DATA")},get dontLogToolData(){return ys("OPENAI_AGENTS_DONT_LOG_TOOL_DATA")}},ao=ws.dontLogModelData,io=ws.dontLogToolData;function xs(n="openai-agents"){return{namespace:n,debug:ro(n),error:console.error,warn:console.warn,dontLogModelData:ao,dontLogToolData:io}}const O=xs("openai-agents:core");function Xe(n){if(n==null)return String(n);if(typeof n=="string")return n;if(typeof n=="object")try{return JSON.stringify(n)}catch{return"[object with circular references]"}return String(n)}function oo(n,e){return`An error occurred while running the tool. Please try again. Error: ${e instanceof Error?e.toString():String(e)}`}function Rn(n){const e=n.name?En(n.name):En(n.execute.name),t=typeof n.errorFunction>"u"?oo:n.errorFunction;if(!e)throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");const r=n.strict??!0;if(!r&&Ye(n.parameters))throw new X("Strict mode is required for Zod parameters");const{parser:s,schema:a}=or(n.parameters,e);async function i(c,p){const[f,h]=await Wn(()=>s(p));if(f!==null)throw O.dontLogToolData?O.debug(`Invalid JSON input for tool ${e}`):O.debug(`Invalid JSON input for tool ${e}: ${p}`),new de("Invalid JSON input for tool");O.dontLogToolData?O.debug(`Invoking tool ${e}`):O.debug(`Invoking tool ${e} with input ${p}`);const S=await n.execute(h,c),b=Xe(S);return O.dontLogToolData?O.debug(`Tool ${e} completed`):O.debug(`Tool ${e} returned: ${b}`),S}async function o(c,p){return i(c,p).catch(f=>{if(t){const h=Zt();return h==null||h.setError({message:"Error running tool (non-fatal)",data:{tool_name:e,error:f.toString()}}),t(c,f)}throw f})}const l=typeof n.needsApproval=="function"?n.needsApproval:async()=>typeof n.needsApproval=="boolean"?n.needsApproval:!1;return{type:"function",name:e,description:n.description,parameters:a,strict:r,invoke:o,needsApproval:l}}g({name:d(),description:d().optional(),inputSchema:g({type:m("object"),properties:Q(d(),Z()),required:U(d()),additionalProperties:Ft()})});const dr={};async function uo({server:n,convertSchemasToStrict:e,runContext:t,agent:r}){return n.cacheToolsList&&dr[n.name]?dr[n.name].map(s=>bs(s,n,e)):Mo(async s=>{const a=await n.listTools();let i=a;if(t&&r){const l={runContext:t,agent:r,serverName:n.name},c=[];for(const p of a){const f=n.toolFilter;if(f)if(typeof f=="function"){if(!await f(l,p)){O.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the callable filter.`);continue}}else{const h=f.allowedToolNames??[],S=f.blockedToolNames??[];if(h.length>0||S.length>0){const b=h.length>0?h.includes(p.name):!0,v=S.length>0?S.includes(p.name):!1;if(!b||v){v?O.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the static filter.`):b||O.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is not allowed by the static filter.`);continue}}}c.push(p)}i=c}s.spanData.result=i.map(l=>l.name);const o=i.map(l=>bs(l,n,e));return n.cacheToolsList&&(dr[n.name]=i),o},{data:{server:n.name}})}async function co(n,e,t,r=!1){const s=Array.isArray(n)?{mcpServers:n,runContext:e,agent:t,convertSchemasToStrict:r}:n,{mcpServers:a,convertSchemasToStrict:i=!1,runContext:o,agent:l}=s,c=[],p=new Set;for(const f of a){const h=await uo({server:f,convertSchemasToStrict:i,runContext:o,agent:l}),b=[...new Set(h.map(v=>v.name))].filter(v=>p.has(v));if(b.length>0)throw new X(`Duplicate tool names found across MCP servers: ${b.join(", ")}`);for(const v of h)p.add(v.name),c.push(v)}return c}function bs(n,e,t){var i,o,l,c;async function r(p,f){let h={};typeof p=="string"&&p?h=JSON.parse(p):typeof p=="object"&&p!=null&&(h=p);const S=Zt();S&&(S.spanData.mcp_data={server:e.name});const b=await e.callTool(n.name,h);return b.length===1?b[0]:b}const s={...n.inputSchema,type:((i=n.inputSchema)==null?void 0:i.type)??"object",properties:((o=n.inputSchema)==null?void 0:o.properties)??{},required:((l=n.inputSchema)==null?void 0:l.required)??[],additionalProperties:((c=n.inputSchema)==null?void 0:c.additionalProperties)??!1};if(t||s.additionalProperties===!0)try{const p=lo(s);return Rn({name:n.name,description:n.description||"",parameters:p,strict:!0,execute:r})}catch(p){O.warn(`Error converting MCP schema to strict mode: ${p}`)}const a={...s,additionalProperties:!0};return Rn({name:n.name,description:n.description||"",parameters:a,strict:!1,execute:r})}function lo(n){const e={...n,additionalProperties:!1};return e.required||(e.required=[]),e}function po(){return{}}class Dn{constructor(){k(this,vt,new EventTarget)}on(e,t){return u(this,vt).addEventListener(e,r=>t(...r.detail??[])),this}off(e,t){return u(this,vt).removeEventListener(e,r=>t(...r.detail??[])),this}emit(e,...t){const r=new CustomEvent(e,{detail:t});return u(this,vt).dispatchEvent(r)}once(e,t){const r=(...s)=>{this.off(e,r),t(...s)};return this.on(e,r),this}}vt=new WeakMap;const Ss=crypto.randomUUID.bind(crypto),fo=class{constructor(){}pipeTo(e,t){}pipeThrough(e,t){}},ho=globalThis.ReadableStream,mo=globalThis.TransformStream;class go{constructor(){_(this,"context",null)}run(e,t){return this.context=e,t()}getStore(){return this.context}enterWith(e){this.context=e}}class _o{constructor(){}setTimeout(e,t){const r=setTimeout(e,t);return r.ref=typeof r.ref=="function"?r.ref:()=>r,r.unref=typeof r.unref=="function"?r.unref:()=>r,r.hasRef=typeof r.hasRef=="function"?r.hasRef:()=>!0,r.refresh=typeof r.refresh=="function"?r.refresh:()=>r,r}clearTimeout(e){window.clearTimeout(e)}}const yo=new _o;let Ts;function Te(){return Ts??(Ts=new go),Ts}function $t(){const n=Te().getStore();return n!=null&&n.trace?n.trace:null}function Zt(){const n=Te().getStore();return n!=null&&n.span?n.span:null}function ks(n){return async()=>{const e=$t();if(!e)throw new Error("No trace found");await e.start();const t=await n(e);return await e.end(),t}}async function vo(n,e,t={}){const r=typeof n=="string"?ke().createTrace({...t,name:n}):n;return Te().run({trace:r},ks(e))}async function wo(n,e={}){if($t())return await n();const r=ke().createTrace(e);return Te().run({trace:r},ks(n))}function Pn(n){const e=Te().getStore();if(!e)throw new Error("No existing trace found");e.span&&(e.span.previousSpan=e.previousSpan,e.previousSpan=e.span),e.span=n,Te().enterWith(e)}function Lt(){var e;const n=Te().getStore();n&&(n.span=n.previousSpan,n.previousSpan=(e=n.previousSpan)==null?void 0:e.previousSpan,Te().enterWith(n))}function gt(n){const e=Zt();e&&e.setError(n)}function xo(n){var e,t,r;return{trace:(e=n.trace)==null?void 0:e.clone(),span:(t=n.span)==null?void 0:t.clone(),previousSpan:(r=n.previousSpan)==null?void 0:r.clone()}}function lr(n){const e=Te().getStore();if(!e)throw new Error("No existing trace found");const t=xo(e);return Te().run(t,n)}class bo{async export(e){if(vs.disabled){O.debug("Tracing is disabled. Skipping export");return}for(const t of e)t.type==="trace"?console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}`):console.log(`[Exporter] Export span: ${JSON.stringify(t)}`)}}class So{constructor(e,{maxQueueSize:t=1e3,maxBatchSize:r=100,scheduleDelay:s=5e3,exportTriggerRatio:a=.8}={}){k(this,ue);k(this,Wt);k(this,wt);k(this,Ht);k(this,Kt);k(this,xt);k(this,se,[]);k(this,Pe);k(this,Ue,null);k(this,Je,!1);k(this,bt,null);y(this,Wt,t),y(this,wt,r),y(this,Ht,s),y(this,Kt,t*a),y(this,xt,e),y(this,Pe,yo),O.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.")}start(){y(this,bt,new AbortController),$(this,ue,Pr).call(this)}async onTraceStart(e){await $(this,ue,Dr).call(this,e)}async onTraceEnd(e){}async onSpanStart(e){}async onSpanEnd(e){await $(this,ue,Dr).call(this,e)}async shutdown(e){var t;for(e&&u(this,Pe).setTimeout(()=>{var r;(r=u(this,bt))==null||r.abort()},e),O.debug("Shutting down gracefully");u(this,se).length>0;){if(O.debug(`Waiting for buffer to empty. Items left: ${u(this,se).length}`),u(this,Je)||await $(this,ue,Rt).call(this,!0),(t=u(this,bt))!=null&&t.signal.aborted){O.debug("Timeout reached, force flushing"),await $(this,ue,Rt).call(this,!0);break}await new Promise(r=>u(this,Pe).setTimeout(r,500))}O.debug("Buffer empty. Exiting"),u(this,Pe)&&u(this,Ue)&&u(this,Pe).clearTimeout(u(this,Ue))}async forceFlush(){u(this,se).length>0&&await $(this,ue,Rt).call(this,!0)}}Wt=new WeakMap,wt=new WeakMap,Ht=new WeakMap,Kt=new WeakMap,xt=new WeakMap,se=new WeakMap,Pe=new WeakMap,Ue=new WeakMap,Je=new WeakMap,bt=new WeakMap,ue=new WeakSet,Dr=async function(e){if(u(this,se).length+1>u(this,Wt)){O.error("Dropping trace because buffer is full");return}u(this,se).push(e),u(this,se).length>u(this,Kt)&&await $(this,ue,Rt).call(this)},Pr=function(){y(this,Ue,u(this,Pe).setTimeout(async()=>{await $(this,ue,Rt).call(this),$(this,ue,Pr).call(this)},u(this,Ht))),typeof u(this,Ue).unref=="function"&&u(this,Ue).unref()},Rt=async function(e=!1){if(u(this,se).length!==0){if(O.debug(`Exporting batches. Force: ${e}. Buffer size: ${u(this,se).length}`),e||u(this,se).length<u(this,wt)){const t=[...u(this,se)];y(this,se,[]),y(this,Je,!0),await u(this,xt).export(t),y(this,Je,!1)}else if(u(this,se).length>0){const t=u(this,se).splice(0,u(this,wt));y(this,Je,!0),await u(this,xt).export(t),y(this,Je,!1)}}};class To{constructor(){k(this,le,[])}start(){for(const e of u(this,le))e.start&&e.start()}addTraceProcessor(e){u(this,le).push(e)}setProcessors(e){O.debug("Shutting down old processors");for(const t of u(this,le))t.shutdown();y(this,le,e)}async onTraceStart(e){for(const t of u(this,le))await t.onTraceStart(e)}async onTraceEnd(e){for(const t of u(this,le))await t.onTraceEnd(e)}async onSpanStart(e){for(const t of u(this,le))await t.onSpanStart(e)}async onSpanEnd(e){for(const t of u(this,le))await t.onSpanEnd(e)}async shutdown(e){for(const t of u(this,le))await t.shutdown(e)}async forceFlush(){for(const e of u(this,le))await e.forceFlush()}}le=new WeakMap;let pr=null,fr=null;function ko(){return pr||(pr=new bo),pr}function Is(){return fr||(fr=new So(ko())),fr}function As(){return new Date().toISOString()}function Cs(){return`trace_${Ss().replace(/-/g,"")}`}function Io(){return`span_${Ss().replace(/-/g,"").slice(0,24)}`}function Ao(n){return Object.fromEntries(Object.entries(n).filter(([e])=>!e.startsWith("_")))}const Cr=class Cr{constructor(e,t){_(this,"type","trace.span");k(this,Yt);k(this,Xt);k(this,Qt);k(this,en);k(this,st);k(this,qe);k(this,Be);k(this,at);k(this,tn);y(this,Xt,e.traceId),y(this,Qt,e.spanId??Io()),y(this,Yt,e.data),y(this,st,t),y(this,en,e.parentId??null),y(this,at,e.error??null),y(this,qe,e.startedAt??null),y(this,Be,e.endedAt??null)}get traceId(){return u(this,Xt)}get spanData(){return u(this,Yt)}get spanId(){return u(this,Qt)}get parentId(){return u(this,en)}get previousSpan(){return u(this,tn)}set previousSpan(e){y(this,tn,e)}start(){if(u(this,qe)){O.warn("Span already started");return}y(this,qe,As()),u(this,st).onSpanStart(this)}end(){if(u(this,Be)){O.debug("Span already finished",this.spanData);return}y(this,Be,As()),u(this,st).onSpanEnd(this)}setError(e){y(this,at,e)}get error(){return u(this,at)}get startedAt(){return u(this,qe)}get endedAt(){return u(this,Be)}clone(){var t;const e=new Cr({traceId:this.traceId,spanId:this.spanId,parentId:this.parentId??void 0,data:this.spanData,startedAt:u(this,qe)??void 0,endedAt:u(this,Be)??void 0,error:u(this,at)??void 0},u(this,st));return e.previousSpan=(t=this.previousSpan)==null?void 0:t.clone(),e}toJSON(){return{object:this.type,id:this.spanId,trace_id:this.traceId,parent_id:this.parentId,started_at:this.startedAt,ended_at:this.endedAt,span_data:Ao(this.spanData),error:this.error}}};Yt=new WeakMap,Xt=new WeakMap,Qt=new WeakMap,en=new WeakMap,st=new WeakMap,qe=new WeakMap,Be=new WeakMap,at=new WeakMap,tn=new WeakMap;let Ut=Cr;class Le extends Ut{constructor(e,t){super({traceId:"no-op",spanId:"no-op",data:e},t)}start(){}end(){}setError(){}toJSON(){return null}}const Or=class Or{constructor(e,t){_(this,"type","trace");_(this,"traceId");_(this,"name");_(this,"groupId",null);_(this,"metadata");k(this,St);k(this,Me);this.traceId=e.traceId??Cs(),this.name=e.name??"Agent workflow",this.groupId=e.groupId??null,this.metadata=e.metadata??{},y(this,St,t??Is()),y(this,Me,e.started??!1)}async start(){u(this,Me)||(y(this,Me,!0),await u(this,St).onTraceStart(this))}async end(){u(this,Me)&&(y(this,Me,!1),await u(this,St).onTraceEnd(this))}clone(){return new Or({traceId:this.traceId,name:this.name,groupId:this.groupId??void 0,metadata:this.metadata,started:u(this,Me)})}toJSON(){return{object:this.type,id:this.traceId,workflow_name:this.name,group_id:this.groupId,metadata:this.metadata}}};St=new WeakMap,Me=new WeakMap;let Jt=Or;class hr extends Jt{constructor(){super({})}async start(){}async end(){}toJSON(){return null}}class Co{constructor(){k(this,qn);k(this,re);k(this,it);y(this,re,new To),y(this,it,vs.disabled),$(this,qn,Sa).call(this)}registerProcessor(e){u(this,re).addTraceProcessor(e)}setProcessors(e){u(this,re).setProcessors(e)}getCurrentTrace(){return $t()}getCurrentSpan(){return Zt()}setDisabled(e){y(this,it,e)}startExportLoop(){u(this,re).start()}createTrace(e){if(u(this,it))return O.debug("Tracing is disabled, Not creating trace %o",e),new hr;const t=e.traceId??Cs(),r=e.name??"Agent workflow";return O.debug("Creating trace %s with name %s",t,r),new Jt({...e,name:r,traceId:t},u(this,re))}createSpan(e,t){if(u(this,it)||e.disabled)return O.debug("Tracing is disabled, Not creating span %o",e),new Le(e.data,u(this,re));let r,s;if(t){if(t instanceof Jt){if(t instanceof hr)return O.debug("Parent trace is no-op, returning NoopSpan"),new Le(e.data,u(this,re));s=t.traceId}else if(t instanceof Ut){if(t instanceof Le)return O.debug("Parent span is no-op, returning NoopSpan"),new Le(e.data,u(this,re));r=t.spanId,s=t.traceId}}else{const a=$t(),i=Zt();if(!a)return O.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Le(e.data,u(this,re));if(i instanceof Le||a instanceof hr)return O.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`),new Le(e.data,u(this,re));s=a.traceId,i?(O.debug("Using parent span %s",i.spanId),r=i.spanId):O.debug("No parent span, using current trace %s",a.traceId)}return s?(O.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId??s}`),new Ut({...e,traceId:s,parentId:r},u(this,re))):(O.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Le(e.data,u(this,re)))}async shutdown(e){try{O.debug("Shutting down tracing provider"),await u(this,re).shutdown(e)}catch(t){O.error("Error shutting down tracing provider %o",t)}}async forceFlush(){await u(this,re).forceFlush()}}re=new WeakMap,it=new WeakMap,qn=new WeakSet,Sa=function(){if(typeof process<"u"&&typeof process.on=="function"){const e=async()=>{const t=setTimeout(()=>{console.warn("Cleanup timeout, forcing exit"),process.exit(1)},5e3);try{await this.shutdown()}finally{clearTimeout(t)}};process.on("beforeExit",e),process.on("SIGINT",async()=>{await e(),Os("SIGINT")||process.exit(130)}),process.on("SIGTERM",async()=>{await e(),Os("SIGTERM")||process.exit(0)}),process.on("unhandledRejection",async(t,r)=>{O.error("Unhandled rejection",t,r),await e(),Oo("unhandledRejection")||process.exit(1)})}};function Os(n){return process.listeners(n).length>1}function Oo(n){return process.listeners(n).length>1}let mr;function ke(){return mr||(mr=new Co),mr}function Mn(n){return async(e,...t)=>lr(async()=>{const r=n(...t);Pn(r);try{return r.start(),await e(r)}catch(s){throw r.setError({message:s.message,data:s.data}),s}finally{r.end(),Lt()}})}function Es(n,e){var t;return ke().createSpan({...n,data:{type:"agent",name:((t=n==null?void 0:n.data)==null?void 0:t.name)??"Agent",...n==null?void 0:n.data}},e)}function Eo(n,e){var t,r;return ke().createSpan({...n,data:{type:"function",input:((t=n==null?void 0:n.data)==null?void 0:t.input)??"",output:((r=n==null?void 0:n.data)==null?void 0:r.output)??"",...n==null?void 0:n.data}},e)}const Ns=Mn(Eo);function No(n,e){return ke().createSpan({...n,data:{type:"handoff",...n==null?void 0:n.data}},e)}const Ro=Mn(No);function Do(n,e){return ke().createSpan({...n,data:{type:"guardrail",triggered:!1,...n==null?void 0:n.data}},e)}const Rs=Mn(Do);function Po(n,e){return ke().createSpan({...n,data:{type:"mcp_tools",...n==null?void 0:n.data}},e)}const Mo=Mn(Po);function jo(n){ke().registerProcessor(n)}class gr{on(e,t){return this.eventEmitter.on(e,t),this.eventEmitter}off(e,t){return this.eventEmitter.off(e,t),this.eventEmitter}emit(e,...t){return this.eventEmitter.emit(e,...t)}once(e,t){return this.eventEmitter.once(e,t),this.eventEmitter}}class Fo extends gr{constructor(){super(...arguments);_(this,"eventEmitter",new Dn)}}class $o extends gr{constructor(){super(...arguments);_(this,"eventEmitter",new Dn)}}function Ds({name:n,execute:e}){return{type:"input",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"input",name:n},output:await e(t)}}}}function _r({name:n,execute:e}){return{type:"output",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"output",name:n},agent:t.agent,agentOutput:t.agentOutput,output:await e(t)}}}}function Ps(n){return JSON.stringify({assistant:n.name})}function Zo(n){return`transfer_to_${En(n.name)}`}function Lo(n){return`Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription??""}`}class Ms{constructor(e,t){_(this,"toolName");_(this,"toolDescription");_(this,"inputJsonSchema",{type:"object",properties:{},required:[],additionalProperties:!1});_(this,"strictJsonSchema",!0);_(this,"onInvokeHandoff");_(this,"agentName");_(this,"inputFilter");_(this,"agent");this.agentName=e.name,this.onInvokeHandoff=t,this.toolName=Zo(e),this.toolDescription=Lo(e),this.agent=e}getHandoffAsFunctionTool(){return{type:"function",name:this.toolName,description:this.toolDescription,parameters:this.inputJsonSchema,strict:this.strictJsonSchema}}}function js(n,e={}){let t;const r=!!e.onHandoff,s=!!e.inputType;if(!(r===s))throw new X("You must provide either both `onHandoff` and `inputType` or neither.");async function i(l,c){var p;if(t){if(!c)throw gt({message:`Handoff function expected non empty input but got: ${c}`,data:{details:"input is empty"}}),new de("Handoff function expected non empty input");try{const f=await t(c);e.onHandoff&&await e.onHandoff(l,f)}catch(f){throw gt({message:"Invalid JSON provided",data:{}}),O.dontLogToolData||O.error(`Invalid JSON when parsing: ${c}. Error: ${f}`),new de("Invalid JSON provided")}}else await((p=e.onHandoff)==null?void 0:p.call(e,l));return n}const o=new Ms(n,i);if(e.inputType){const l=or(e.inputType,o.toolName);o.inputJsonSchema=l.schema,o.strictJsonSchema=!0,t=l.parser}return e.toolNameOverride&&(o.toolName=e.toolNameOverride),e.toolDescriptionOverride&&(o.toolDescription=e.toolDescriptionOverride),e.inputFilter&&(o.inputFilter=e.inputFilter),o}function jn(n){return n instanceof Ms?n:js(n)}function Uo(){throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.")}const ee=g({providerData:Q(d(),Z()).optional()}),Qe=ee.extend({id:d().optional()}),Jo=ee.extend({type:m("refusal"),refusal:d()}),qo=ee.extend({type:m("output_text"),text:d()}),Fs=ee.extend({type:m("input_text"),text:d()}),Bo=ee.extend({type:m("reasoning_text"),text:d()}),Go=ee.extend({type:m("input_image"),image:d().or(g({id:d()})).describe("Could be a URL, base64 or an object with a file ID.")}),zo=ee.extend({type:m("input_file"),file:d().describe("Either base64 encoded file data or a publicly accessible file URL").or(g({id:d().describe("OpenAI file ID")})).or(g({url:d().describe("Publicly accessible PDF file URL")})).describe("Contents of the file or an object with a file ID.")}),$s=ee.extend({type:m("audio"),audio:d().or(g({id:d()})).describe("Base64 encoded audio data or file id"),format:d().nullable().optional(),transcript:d().nullable().optional()}),Vo=ee.extend({type:m("image"),image:d().describe("Base64 encoded image data")}),Wo=ee.extend({type:m("text"),text:d()}),Ho=ee.extend({type:m("image"),data:d().describe("Base64 encoded image data"),mediaType:d().describe("IANA media type of the image")}),Ko=ee.extend({type:m("computer_screenshot"),data:d().describe("Base64 encoded image data or URL")}),Yo=ce("type",[g({type:m("screenshot")}),g({type:m("click"),x:C(),y:C(),button:oe(["left","right","wheel","back","forward"])}),g({type:m("double_click"),x:C(),y:C()}),g({type:m("scroll"),x:C(),y:C(),scroll_x:C(),scroll_y:C()}),g({type:m("type"),text:d()}),g({type:m("wait")}),g({type:m("move"),x:C(),y:C()}),g({type:m("keypress"),keys:U(d())}),g({type:m("drag"),path:U(g({x:C(),y:C()}))})]),Xo=ce("type",[qo,Jo,$s,Vo]),yr=Qe.extend({type:m("message").optional()}),Fn=yr.extend({role:m("assistant"),status:oe(["in_progress","completed","incomplete"]),content:U(Xo)}),Qo=ce("type",[Fs,Go,zo,$s]),Zs=yr.extend({role:m("user"),content:U(Qo).or(d())}),Ls=yr.extend({role:m("system"),content:d()});ce("role",[Ls,Fn,Zs]);const qt=Qe.extend({type:m("hosted_tool_call"),name:d().describe("The name of the hosted tool"),arguments:d().describe("The arguments of the hosted tool call").optional(),status:d().optional(),output:d().optional()}),Bt=Qe.extend({type:m("function_call"),callId:d().describe("The ID of the tool call"),name:d().describe("The name of the function"),status:oe(["in_progress","completed","incomplete"]).optional(),arguments:d()}),vr=Qe.extend({type:m("function_call_result"),name:d().describe("The name of the tool"),callId:d().describe("The ID of the tool call"),status:oe(["in_progress","completed","incomplete"]),output:ce("type",[Wo,Ho])}),wr=Qe.extend({type:m("computer_call"),callId:d().describe("The ID of the computer call"),status:oe(["in_progress","completed","incomplete"]),action:Yo}),eu=Qe.extend({type:m("computer_call_result"),callId:d().describe("The ID of the computer call"),output:Ko}),tu=ce("type",[wr,Bt,qt]),xr=ee.extend({id:d().optional(),type:m("reasoning"),content:U(Fs),rawContent:U(Bo).optional()}),Us=Qe.extend({type:m("unknown")}),br=ce("type",[Fn,qt,Bt,wr,xr,Us]),nu=ss([Zs,Fn,Ls,qt,Bt,wr,vr,eu,xr,Us]),ru=g({requests:C().optional(),inputTokens:C(),outputTokens:C(),totalTokens:C(),inputTokensDetails:Q(d(),C()).optional(),outputTokensDetails:Q(d(),C()).optional()}),Js=ee.extend({type:m("output_text_delta"),delta:d()}),su=ee.extend({type:m("response_started")}),qs=ee.extend({type:m("response_done"),response:ee.extend({id:d(),usage:ru,output:U(br)})}),au=ee.extend({type:m("model"),event:Z().describe("The event from the model")});ce("type",[Js,qs,su,au]);class $n{constructor(e){_(this,"requests");_(this,"inputTokens");_(this,"outputTokens");_(this,"totalTokens");_(this,"inputTokensDetails",[]);_(this,"outputTokensDetails",[]);if(typeof e>"u")this.requests=0,this.inputTokens=0,this.outputTokens=0,this.totalTokens=0,this.inputTokensDetails=[],this.outputTokensDetails=[];else{this.requests=(e==null?void 0:e.requests)??1,this.inputTokens=(e==null?void 0:e.inputTokens)??(e==null?void 0:e.input_tokens)??0,this.outputTokens=(e==null?void 0:e.outputTokens)??(e==null?void 0:e.output_tokens)??0,this.totalTokens=(e==null?void 0:e.totalTokens)??(e==null?void 0:e.total_tokens)??0;const t=(e==null?void 0:e.inputTokensDetails)??(e==null?void 0:e.input_tokens_details);this.inputTokensDetails=t?[t]:[];const r=(e==null?void 0:e.outputTokensDetails)??(e==null?void 0:e.output_tokens_details);this.outputTokensDetails=r?[r]:[]}}add(e){this.requests+=e.requests,this.inputTokens+=e.inputTokens,this.outputTokens+=e.outputTokens,this.totalTokens+=e.totalTokens,e.inputTokensDetails&&this.inputTokensDetails.push(...e.inputTokensDetails),e.outputTokensDetails&&this.outputTokensDetails.push(...e.outputTokensDetails)}}class _t{constructor(e={}){_(this,"context");_(this,"usage");k(this,pe);this.context=e,this.usage=new $n,y(this,pe,new Map)}_rebuildApprovals(e){y(this,pe,new Map(Object.entries(e)))}isToolApproved({toolName:e,callId:t}){const r=u(this,pe).get(e);if((r==null?void 0:r.approved)===!0&&r.rejected===!0)return O.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"),!0;if((r==null?void 0:r.approved)===!0)return!0;if((r==null?void 0:r.rejected)===!0)return!1;const s=Array.isArray(r==null?void 0:r.approved)?r.approved.includes(t):!1,a=Array.isArray(r==null?void 0:r.rejected)?r.rejected.includes(t):!1;if(s&&a)return O.warn(`Tool call ${t} is both approved and rejected at the same time. Approval takes precedence`),!0;if(s)return!0;if(a)return!1}approveTool(e,{alwaysApprove:t=!1}={}){const r=e.rawItem.name;if(t){u(this,pe).set(r,{approved:!0,rejected:[]});return}const s=u(this,pe).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.approved)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.approved.push(a)}u(this,pe).set(r,s)}rejectTool(e,{alwaysReject:t=!1}={}){const r=e.rawItem.name;if(t){u(this,pe).set(r,{approved:!1,rejected:!0});return}const s=u(this,pe).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.rejected)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.rejected.push(a)}u(this,pe).set(r,s)}toJSON(){return{context:this.context,usage:this.usage,approvals:Object.fromEntries(u(this,pe).entries())}}}pe=new WeakMap;class Bs{constructor(e){_(this,"state");this.state=e}get history(){return Gt(this.input,this.newItems)}get output(){return Gt([],this.newItems)}get input(){return this.state._originalInput}get newItems(){return this.state._generatedItems}get rawResponses(){return this.state._modelResponses}get lastResponseId(){const e=this.rawResponses;return e&&e.length>0?e[e.length-1].responseId:void 0}get lastAgent(){return this.state._currentAgent}get inputGuardrailResults(){return this.state._inputGuardrailResults}get outputGuardrailResults(){return this.state._outputGuardrailResults}get interruptions(){var e;return((e=this.state._currentStep)==null?void 0:e.type)==="next_step_interruption"?this.state._currentStep.data.interruptions:[]}get finalOutput(){var e;if(((e=this.state._currentStep)==null?void 0:e.type)==="next_step_final_output")return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);O.warn("Accessed finalOutput before agent run is completed.")}}class Sr extends Bs{constructor(e){super(e)}}class iu extends Bs{constructor(t={}){super(t.state);_(this,"currentTurn",0);_(this,"maxTurns");k(this,nn,null);k(this,Tt);k(this,xe);k(this,Ge);k(this,kt);k(this,rn);k(this,sn);k(this,an,!1);y(this,Tt,t.signal),u(this,Tt)&&u(this,Tt).addEventListener("abort",async()=>{await u(this,Ge).cancel()}),y(this,Ge,new ho({start:r=>{y(this,xe,r)},cancel:()=>{y(this,an,!0)}})),y(this,kt,new Promise((r,s)=>{y(this,rn,r),y(this,sn,s)}))}get currentAgent(){return this.lastAgent}_addItem(t){var r;this.cancelled||(r=u(this,xe))==null||r.enqueue(t)}_done(){var t;!this.cancelled&&u(this,xe)&&(u(this,xe).close(),y(this,xe,void 0),(t=u(this,rn))==null||t.call(this))}_raiseError(t){var r;!this.cancelled&&u(this,xe)&&(u(this,xe).error(t),y(this,xe,void 0)),y(this,nn,t),(r=u(this,sn))==null||r.call(this,t),u(this,kt).catch(s=>{O.debug(`Resulted in an error: ${s}`)})}get cancelled(){return u(this,an)}toStream(){return u(this,Ge)}get completed(){return u(this,kt)}get error(){return u(this,nn)}toTextStream(t={}){const r=u(this,Ge).pipeThrough(new mo({transform(s,a){if(s.type==="raw_model_stream_event"&&s.data.type==="output_text_delta"){const i=Js.parse(s.data);a.enqueue(i.delta)}}}));return t.compatibleWithNodeStreams?fo.fromWeb(r):r}[Symbol.asyncIterator](){return u(this,Ge)[Symbol.asyncIterator]()}}nn=new WeakMap,Tt=new WeakMap,xe=new WeakMap,Ge=new WeakMap,kt=new WeakMap,rn=new WeakMap,sn=new WeakMap,an=new WeakMap;function Gs(n){return n.type==="function"?{type:"function",name:n.name,description:n.description,parameters:n.parameters,strict:n.strict}:n.type==="computer"?{type:"computer",name:n.name,environment:n.computer.environment,dimensions:n.computer.dimensions}:{type:"hosted_tool",name:n.name,providerData:n.providerData}}function zs(n){return{toolName:n.toolName,toolDescription:n.toolDescription,inputJsonSchema:n.inputJsonSchema,strictJsonSchema:n.strictJsonSchema}}class et{constructor(){_(this,"type","base_item");_(this,"rawItem")}toJSON(){return{type:this.type,rawItem:this.rawItem}}}class Zn extends et{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","message_output_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}get content(){let t="";for(const r of this.rawItem.content)r.type==="output_text"&&(t+=r.text);return t}}class tt extends et{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class yt extends et{constructor(t,r,s){super();_(this,"rawItem");_(this,"agent");_(this,"output");_(this,"type","tool_call_output_item");this.rawItem=t,this.agent=r,this.output=s}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON(),output:Xe(this.output)}}}class Tr extends et{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","reasoning_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class kr extends et{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","handoff_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class Ir extends et{constructor(t,r,s){super();_(this,"rawItem");_(this,"sourceAgent");_(this,"targetAgent");_(this,"type","handoff_output_item");this.rawItem=t,this.sourceAgent=r,this.targetAgent=s}toJSON(){return{...super.toJSON(),sourceAgent:this.sourceAgent.toJSON(),targetAgent:this.targetAgent.toJSON()}}}class Ie extends et{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_approval_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}function Vs(n){if(n.type!=="message"||n.role!=="assistant")return;const e=n.content[n.content.length-1];if(e.type==="output_text")return e.text}function ou(n){return n.output.length===0?"":Vs(n.output[n.output.length-1])||""}class uu{constructor(e){_(this,"data");_(this,"type","raw_model_stream_event");this.data=e}}class cu{constructor(e,t){_(this,"name");_(this,"item");_(this,"type","run_item_stream_event");this.name=e,this.item=t}}class du{constructor(e){_(this,"agent");_(this,"type","agent_updated_stream_event");this.agent=e}}function Ws(n,e,t,r){var b;const s=[],a=[],i=[],o=[],l=[],c=[],p=new Map(r.map(v=>[v.toolName,v])),f=new Map(t.filter(v=>v.type==="function").map(v=>[v.name,v])),h=t.find(v=>v.type==="computer"),S=new Map(t.filter(v=>{var E;return v.type==="hosted_tool"&&((E=v.providerData)==null?void 0:E.type)==="mcp"}).map(v=>v).map(v=>[v.providerData.server_label,v]));for(const v of n.output){if(v.type==="message")v.role==="assistant"&&s.push(new Zn(v,e));else if(v.type==="hosted_tool_call"){s.push(new tt(v,e));const R=v.name;if(c.push(R),((b=v.providerData)==null?void 0:b.type)==="mcp_approval_request"||v.name==="mcp_approval_request"){const H=v.providerData,ne=H.server_label,he=S.get(ne);if(typeof he>"u"){const gn=`MCP server (${ne}) not found in Agent (${e.name})`;throw gt({message:gn,data:{mcp_server_label:ne}}),new de(gn)}const me=new Ie({type:"hosted_tool_call",name:H.name,id:H.id,status:"in_progress",providerData:H},e);l.push({requestItem:me,mcpTool:he}),he.providerData.on_approval||s.push(me)}}else if(v.type==="reasoning")s.push(new Tr(v,e));else if(v.type==="computer_call"){if(s.push(new tt(v,e)),c.push("computer_use"),!h)throw gt({message:"Model produced computer action without a computer tool.",data:{agent_name:e.name}}),new de("Model produced computer action without a computer tool.");o.push({toolCall:v,computer:h})}if(v.type!=="function_call")continue;c.push(v.name);const E=p.get(v.name);if(E)s.push(new kr(v,e)),a.push({toolCall:v,handoff:E});else{const R=f.get(v.name);if(!R)throw gt({message:`Tool ${v.name} not found in agent ${e.name}.`,data:{tool_name:v.name,agent_name:e.name}}),new de(`Tool ${v.name} not found in agent ${e.name}.`);s.push(new tt(v,e)),i.push({toolCall:v,tool:R})}}return{newItems:s,handoffs:a,functions:i,computerActions:o,mcpApprovalRequests:l,toolsUsed:c,hasToolsOrApprovalsToRun(){return a.length>0||i.length>0||l.length>0||o.length>0}}}const lu=ce("type",[g({type:m("next_step_handoff"),newAgent:Z()}),g({type:m("next_step_final_output"),output:d()}),g({type:m("next_step_run_again")}),g({type:m("next_step_interruption"),data:Q(d(),Z())})]);class ve{constructor(e,t,r,s,a){_(this,"originalInput");_(this,"modelResponse");_(this,"preStepItems");_(this,"newStepItems");_(this,"nextStep");this.originalInput=e,this.modelResponse=t,this.preStepItems=r,this.newStepItems=s,this.nextStep=a}get generatedItems(){return this.preStepItems.concat(this.newStepItems)}}function Hs(n,e,t){return n.resetToolChoice&&e.hasUsedTools(n)?{...t,toolChoice:void 0}:t}async function Ks(n,e,t,r,s,a,i){const o=t.filter(b=>b instanceof Ie&&"callId"in b.rawItem&&b.rawItem.type==="function_call").map(b=>b.rawItem.callId),l=s.functions.filter(b=>o.includes(b.toolCall.callId)),c=await Xs(n,l,a,i),p=c.map(b=>b.runItem),f=s.mcpApprovalRequests.filter(b=>{var v;return b.requestItem.type==="tool_approval_item"&&b.requestItem.rawItem.type==="hosted_tool_call"&&((v=b.requestItem.rawItem.providerData)==null?void 0:v.type)==="mcp_approval_request"});for(const b of f){const v=b.requestItem.rawItem.id,E=i._context.isToolApproved({toolName:b.requestItem.rawItem.name,callId:v});if(typeof E<"u"){const R={approve:E,approval_request_id:v,reason:void 0};p.push(new tt({type:"hosted_tool_call",name:"mcp_approval_response",providerData:R},n))}}const h=await Qs(n,c,i),S=t.filter(b=>!(b instanceof Ie));return h.isFinalOutput?(a.emit("agent_end",i._context,n,h.finalOutput),n.emit("agent_end",i._context,h.finalOutput),new ve(e,r,S,p,{type:"next_step_final_output",output:h.finalOutput})):h.isInterrupted?new ve(e,r,S,p,{type:"next_step_interruption",data:{interruptions:h.interruptions}}):new ve(e,r,S,p,{type:"next_step_run_again"})}async function Ys(n,e,t,r,s,a,i){const o=t;let l=s.newItems;const[c,p]=await Promise.all([Xs(n,s.functions,a,i),fu(n,s.computerActions,a,i._context)]);if(l=l.concat(c.map(b=>b.runItem)),l=l.concat(p),s.mcpApprovalRequests.length>0)for(const b of s.mcpApprovalRequests){const v=b.mcpTool.providerData,E=b.requestItem.rawItem.providerData;if(v.on_approval){const R=await v.on_approval(i._context,b.requestItem),H={approve:R.approve,approval_request_id:E.id,reason:R.reason};l.push(new tt({type:"hosted_tool_call",name:"mcp_approval_response",providerData:H},n))}else{l.push(b.requestItem);const R={type:"hosted_mcp_tool_approval",tool:b.mcpTool,runItem:new Ie({type:"hosted_tool_call",name:E.name,id:E.id,arguments:E.arguments,status:"in_progress",providerData:E},n)};c.push(R)}}if(s.handoffs.length>0)return await hu(n,e,o,l,r,s.handoffs,a,i._context);const f=await Qs(n,c,i);if(f.isFinalOutput)return a.emit("agent_end",i._context,n,f.finalOutput),n.emit("agent_end",i._context,f.finalOutput),new ve(e,r,o,l,{type:"next_step_final_output",output:f.finalOutput});if(f.isInterrupted)return new ve(e,r,o,l,{type:"next_step_interruption",data:{interruptions:f.interruptions}});const h=l.filter(b=>b instanceof Zn),S=h.length>0?Vs(h[h.length-1].rawItem):void 0;if(!S)return new ve(e,r,o,l,{type:"next_step_run_again"});if(n.outputType==="text"&&!s.hasToolsOrApprovalsToRun())return new ve(e,r,o,l,{type:"next_step_final_output",output:S});if(n.outputType!=="text"&&S){const{parser:b}=or(n.outputType,"final_output"),[v]=await Wn(()=>b(S));if(v)throw gt({message:"Invalid output type",data:{error:String(v)}}),new de("Invalid output type");return new ve(e,r,o,l,{type:"next_step_final_output",output:S})}return new ve(e,r,o,l,{type:"next_step_run_again"})}function Ln(n,e){return{type:"function_call_result",name:n.name,callId:n.callId,status:"completed",output:{type:"text",text:Xe(e)}}}async function Xs(n,e,t,r){async function s(a){let i=a.toolCall.arguments;if(a.tool.parameters&&(Ye(a.tool.parameters)?i=a.tool.parameters.parse(i):i=JSON.parse(i)),await a.tool.needsApproval(r._context,i,a.toolCall.callId)){const l=r._context.isToolApproved({toolName:a.tool.name,callId:a.toolCall.callId});if(l===!1)return Ns(async c=>{const p="Tool execution was not approved.";return c.setError({message:p,data:{tool_name:a.tool.name,error:`Tool execution for ${a.toolCall.callId} was manually rejected by user.`}}),c.spanData.output=p,{type:"function_output",tool:a.tool,output:p,runItem:new yt(Ln(a.toolCall,p),n,p)}},{data:{name:a.tool.name}});if(l!==!0)return{type:"function_approval",tool:a.tool,runItem:new Ie(a.toolCall,n)}}return Ns(async l=>{t.config.traceIncludeSensitiveData&&(l.spanData.input=a.toolCall.arguments);try{t.emit("agent_tool_start",r._context,n,a.tool,{toolCall:a.toolCall}),n.emit("agent_tool_start",r._context,a.tool,{toolCall:a.toolCall});const c=await a.tool.invoke(r._context,a.toolCall.arguments),p=Xe(c);return t.emit("agent_tool_end",r._context,n,a.tool,p,{toolCall:a.toolCall}),n.emit("agent_tool_end",r._context,a.tool,p,{toolCall:a.toolCall}),t.config.traceIncludeSensitiveData&&(l.spanData.output=p),{type:"function_output",tool:a.tool,output:c,runItem:new yt(Ln(a.toolCall,c),n,c)}}catch(c){throw l.setError({message:"Error running tool",data:{tool_name:a.tool.name,error:String(c)}}),c}},{data:{name:a.tool.name}})}try{return await Promise.all(e.map(s))}catch(a){throw new Ki(`Failed to run function tools: ${a}`,a,r)}}async function pu(n,e){const t=e.action;let r;switch(t.type){case"click":await n.click(t.x,t.y,t.button);break;case"double_click":await n.doubleClick(t.x,t.y);break;case"drag":await n.drag(t.path.map(s=>[s.x,s.y]));break;case"keypress":await n.keypress(t.keys);break;case"move":await n.move(t.x,t.y);break;case"screenshot":r=await n.screenshot();break;case"scroll":await n.scroll(t.x,t.y,t.scroll_x,t.scroll_y);break;case"type":await n.type(t.text);break;case"wait":await n.wait();break}if(typeof r<"u"||typeof n.screenshot=="function"&&(r=await n.screenshot(),typeof r<"u"))return r;throw new Error("Computer does not implement screenshot()")}async function fu(n,e,t,r,s=void 0){const a=s??O,i=[];for(const o of e){const l=o.computer.computer,c=o.toolCall;t.emit("agent_tool_start",r,n,o.computer,{toolCall:c}),typeof n.emit=="function"&&n.emit("agent_tool_start",r,o.computer,{toolCall:c});let p;try{p=await pu(l,c)}catch(S){a.error("Failed to execute computer action:",S),p=""}t.emit("agent_tool_end",r,n,o.computer,p,{toolCall:c}),typeof n.emit=="function"&&n.emit("agent_tool_end",r,o.computer,p,{toolCall:c});const f=p?`data:image/png;base64,${p}`:"",h={type:"computer_call_result",callId:c.callId,output:{type:"computer_screenshot",data:f}};i.push(new yt(h,n,f))}return i}async function hu(n,e,t,r,s,a,i,o){if(r=[...r],a.length===0)return O.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."),new ve(e,s,t,r,{type:"next_step_run_again"});if(a.length>1){const c="Multiple handoffs detected, ignoring this one.";for(let p=1;p<a.length;p++)r.push(new yt(Ln(a[p].toolCall,c),n,c))}const l=a[0];return Ro(async c=>{const p=l.handoff,f=await p.onInvokeHandoff(o,l.toolCall.arguments);if(c.spanData.to_agent=f.name,a.length>1){const S=a.map(b=>b.handoff.agentName);c.setError({message:"Multiple handoffs requested",data:{requested_agents:S}})}r.push(new Ir(Ln(l.toolCall,Ps(f)),n,f)),i.emit("agent_handoff",o,n,f),n.emit("agent_handoff",o,f);const h=p.inputFilter??i.config.handoffInputFilter;if(h){O.debug("Filtering inputs for handoff"),typeof h!="function"&&c.setError({message:"Invalid input filter",data:{details:"not callable"}});const S={inputHistory:Array.isArray(e)?[...e]:e,preHandoffItems:[...t],newItems:[...r],runContext:o},b=h(S);e=b.inputHistory,t=b.preHandoffItems,r=b.newItems}return new ve(e,s,t,r,{type:"next_step_handoff",newAgent:f})},{data:{from_agent:n.name}})}const Un={isFinalOutput:!1,isInterrupted:void 0};async function Qs(n,e,t){if(e.length===0)return Un;const r=e.filter(i=>i.runItem instanceof Ie).map(i=>i.runItem);if(r.length>0)return{isFinalOutput:!1,isInterrupted:!0,interruptions:r};if(n.toolUseBehavior==="run_llm_again")return Un;const s=e[0];if(n.toolUseBehavior==="stop_on_first_tool")return(s==null?void 0:s.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:Xe(s.output)}:Un;const a=n.toolUseBehavior;if(typeof a=="object"){const i=e.find(o=>a.stopAtToolNames.includes(o.tool.name));return(i==null?void 0:i.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:Xe(i.output)}:Un}if(typeof a=="function")return a(t._context,e);throw new X(`Invalid toolUseBehavior: ${a}`,t)}function ea(n,e){for(const t of e.newStepItems){let r;if(t instanceof Zn)r="message_output_created";else if(t instanceof kr)r="handoff_requested";else if(t instanceof Ir)r="handoff_occurred";else if(t instanceof tt)r="tool_called";else if(t instanceof yt)r="tool_output";else if(t instanceof Tr)r="reasoning_item_created";else if(t instanceof Ie)r="tool_approval_requested";else{O.warn("Unknown item type: ",t);continue}n._addItem(new cu(r,t))}}class ta{constructor(){k(this,It,new Map)}addToolUse(e,t){u(this,It).set(e,t)}hasUsedTools(e){return u(this,It).has(e)}toJSON(){return Object.fromEntries(Array.from(u(this,It).entries()).map(([e,t])=>[e.name,t]))}}It=new WeakMap;const Jn="1.0",mu=m(Jn),Ae=g({name:d()}),na=g({object:m("trace.span"),id:d(),trace_id:d(),parent_id:d().nullable(),started_at:d().nullable(),ended_at:d().nullable(),error:g({message:d(),data:Q(d(),Z()).optional()}).nullable(),span_data:Q(d(),Z())}).extend({previous_span:ci(()=>na).optional()}),ra=g({requests:C(),inputTokens:C(),outputTokens:C(),totalTokens:C()}),sa=g({usage:ra,output:U(br),responseId:d().optional(),providerData:Q(d(),Z()).optional()}),aa=ce("type",[g({type:m("message_output_item"),rawItem:Fn,agent:Ae}),g({type:m("tool_call_item"),rawItem:tu.or(qt),agent:Ae}),g({type:m("tool_call_output_item"),rawItem:vr,agent:Ae,output:d()}),g({type:m("reasoning_item"),rawItem:xr,agent:Ae}),g({type:m("handoff_call_item"),rawItem:Bt,agent:Ae}),g({type:m("handoff_output_item"),rawItem:vr,sourceAgent:Ae,targetAgent:Ae}),g({type:m("tool_approval_item"),rawItem:Bt.or(qt),agent:Ae})]),gu=g({object:m("trace"),id:d(),workflow_name:d(),group_id:d().nullable(),metadata:Q(d(),Z())}),_u=g({newItems:U(aa),toolsUsed:U(d()),handoffs:U(g({toolCall:Z(),handoff:Z()})),functions:U(g({toolCall:Z(),tool:Z()})),computerActions:U(g({toolCall:Z(),computer:Z()})),mcpApprovalRequests:U(g({requestItem:g({rawItem:g({type:m("hosted_tool_call"),name:d(),arguments:d().optional(),status:d().optional(),output:d().optional(),providerData:Q(d(),Z()).nullable().optional()})}),mcpTool:g({type:m("hosted_tool"),name:m("hosted_mcp"),providerData:Q(d(),Z())})})).optional()}),ia=g({tripwireTriggered:Ft(),outputInfo:Z()}),yu=g({guardrail:g({type:m("input"),name:d()}),output:ia}),vu=g({guardrail:g({type:m("output"),name:d()}),agentOutput:Z(),agent:Ae,output:ia}),oa=g({$schemaVersion:mu,currentTurn:C(),currentAgent:Ae,originalInput:d().or(U(nu)),modelResponses:U(sa),context:g({usage:ra,approvals:Q(d(),g({approved:U(d()).or(Ft()),rejected:U(d()).or(Ft())})),context:Q(d(),Z())}),toolUseTracker:Q(d(),U(d())),maxTurns:C(),currentAgentSpan:na.nullable().optional(),noActiveAgentRun:Ft(),inputGuardrailResults:U(yu),outputGuardrailResults:U(vu),currentStep:lu.optional(),lastModelResponse:sa.optional(),generatedItems:U(aa),lastProcessedResponse:_u.optional(),trace:gu.nullable()});class nt{constructor(e,t,r,s){_(this,"_currentTurn",0);_(this,"_currentAgent");_(this,"_originalInput");_(this,"_modelResponses");_(this,"_currentAgentSpan");_(this,"_context");_(this,"_toolUseTracker");_(this,"_generatedItems");_(this,"_maxTurns");_(this,"_noActiveAgentRun",!0);_(this,"_lastTurnResponse");_(this,"_inputGuardrailResults");_(this,"_outputGuardrailResults");_(this,"_currentStep");_(this,"_lastProcessedResponse");_(this,"_trace",null);this._context=e,this._originalInput=structuredClone(t),this._modelResponses=[],this._currentAgentSpan=void 0,this._currentAgent=r,this._toolUseTracker=new ta,this._generatedItems=[],this._maxTurns=s,this._inputGuardrailResults=[],this._outputGuardrailResults=[],this._trace=$t()}get history(){return Gt(this._originalInput,this._generatedItems)}getInterruptions(){var e;return((e=this._currentStep)==null?void 0:e.type)!=="next_step_interruption"?[]:this._currentStep.data.interruptions}approve(e,t={alwaysApprove:!1}){this._context.approveTool(e,t)}reject(e,t={alwaysReject:!1}){this._context.rejectTool(e,t)}toJSON(){var r;const e={$schemaVersion:Jn,currentTurn:this._currentTurn,currentAgent:{name:this._currentAgent.name},originalInput:this._originalInput,modelResponses:this._modelResponses.map(s=>({usage:{requests:s.usage.requests,inputTokens:s.usage.inputTokens,outputTokens:s.usage.outputTokens,totalTokens:s.usage.totalTokens},output:s.output,responseId:s.responseId,providerData:s.providerData})),context:this._context.toJSON(),toolUseTracker:this._toolUseTracker.toJSON(),maxTurns:this._maxTurns,currentAgentSpan:(r=this._currentAgentSpan)==null?void 0:r.toJSON(),noActiveAgentRun:this._noActiveAgentRun,inputGuardrailResults:this._inputGuardrailResults,outputGuardrailResults:this._outputGuardrailResults.map(s=>({...s,agent:s.agent.toJSON()})),currentStep:this._currentStep,lastModelResponse:this._lastTurnResponse,generatedItems:this._generatedItems.map(s=>s.toJSON()),lastProcessedResponse:this._lastProcessedResponse,trace:this._trace?this._trace.toJSON():null},t=oa.safeParse(e);if(!t.success)throw new Hi(`Failed to serialize run state. ${t.error.message}`);return t.data}toString(){return JSON.stringify(this.toJSON())}static async fromString(e,t){var f,h,S,b,v;const[r,s]=await Wn(()=>JSON.parse(t));if(r)throw new X(`Failed to parse run state. ${r instanceof Error?r.message:String(r)}`);const a=s.$schemaVersion;if(!a)throw new X("Run state is missing schema version");if(a!==Jn)throw new X(`Run state schema version ${a} is not supported. Please use version ${Jn}`);const i=oa.parse(JSON.parse(t)),o=wu(e),l=new _t(i.context.context);l._rebuildApprovals(i.context.approvals);const c=o.get(i.currentAgent.name);if(!c)throw new X(`Agent ${i.currentAgent.name} not found`);const p=new nt(l,"",c,i.maxTurns);p._currentTurn=i.currentTurn,p._toolUseTracker=new ta;for(const[E,R]of Object.entries(i.toolUseTracker))p._toolUseTracker.addToolUse(o.get(E),R);if(i.currentAgentSpan){i.trace||O.warn("Trace is not set, skipping tracing setup");const E=ke().createTrace({traceId:(f=i.trace)==null?void 0:f.id,name:(h=i.trace)==null?void 0:h.workflow_name,groupId:((S=i.trace)==null?void 0:S.group_id)??void 0,metadata:(b=i.trace)==null?void 0:b.metadata});p._currentAgentSpan=ua(E,i.currentAgentSpan),p._trace=E}return p._noActiveAgentRun=i.noActiveAgentRun,p._inputGuardrailResults=i.inputGuardrailResults,p._outputGuardrailResults=i.outputGuardrailResults.map(E=>({...E,agent:o.get(E.agent.name)})),p._currentStep=i.currentStep,p._originalInput=i.originalInput,p._modelResponses=i.modelResponses.map(ca),p._lastTurnResponse=i.lastModelResponse?ca(i.lastModelResponse):void 0,p._generatedItems=i.generatedItems.map(E=>da(E,o)),p._lastProcessedResponse=i.lastProcessedResponse?await xu(o,p._currentAgent,p._context,i.lastProcessedResponse):void 0,((v=i.currentStep)==null?void 0:v.type)==="next_step_handoff"&&(p._currentStep={type:"next_step_handoff",newAgent:o.get(i.currentStep.newAgent.name)}),p}}function wu(n){const e=new Map,t=[n];for(;t.length>0;){const r=t.shift();if(!e.has(r.name)){e.set(r.name,r);for(const s of r.handoffs)s instanceof rt?e.has(s.name)||t.push(s):s.agent&&(e.has(s.agent.name)||t.push(s.agent))}}return e}function ua(n,e){const t=e.span_data,r=e.previous_span?ua(n,e.previous_span):void 0,s=ke().createSpan({spanId:e.id,traceId:e.trace_id,parentId:e.parent_id??void 0,startedAt:e.started_at??void 0,endedAt:e.ended_at??void 0,data:t},n);return s.previousSpan=r,s}function ca(n){const e=new $n;return e.requests=n.usage.requests,e.inputTokens=n.usage.inputTokens,e.outputTokens=n.usage.outputTokens,e.totalTokens=n.usage.totalTokens,{usage:e,output:n.output.map(t=>br.parse(t)),responseId:n.responseId,providerData:n.providerData}}function da(n,e){switch(n.type){case"message_output_item":return new Zn(n.rawItem,e.get(n.agent.name));case"tool_call_item":return new tt(n.rawItem,e.get(n.agent.name));case"tool_call_output_item":return new yt(n.rawItem,e.get(n.agent.name),n.output);case"reasoning_item":return new Tr(n.rawItem,e.get(n.agent.name));case"handoff_call_item":return new kr(n.rawItem,e.get(n.agent.name));case"handoff_output_item":return new Ir(n.rawItem,e.get(n.sourceAgent.name),e.get(n.targetAgent.name));case"tool_approval_item":return new Ie(n.rawItem,e.get(n.agent.name))}}async function xu(n,e,t,r){const s=await e.getAllTools(t),a=new Map(s.filter(c=>c.type==="function").map(c=>[c.name,c])),i=new Map(s.filter(c=>c.type==="computer").map(c=>[c.name,c])),o=new Map(e.handoffs.map(c=>c instanceof rt?[c.name,js(c)]:[c.toolName,c])),l={newItems:r.newItems.map(c=>da(c,n)),toolsUsed:r.toolsUsed,handoffs:r.handoffs.map(c=>{if(!o.has(c.handoff.toolName))throw new X(`Handoff ${c.handoff.toolName} not found`);return{toolCall:c.toolCall,handoff:o.get(c.handoff.toolName)}}),functions:await Promise.all(r.functions.map(async c=>{if(!a.has(c.tool.name))throw new X(`Tool ${c.tool.name} not found`);return{toolCall:c.toolCall,tool:a.get(c.tool.name)}})),computerActions:r.computerActions.map(c=>{const p=c.computer.name;if(!i.has(p))throw new X(`Computer tool ${p} not found`);return{toolCall:c.toolCall,computer:i.get(p)}}),mcpApprovalRequests:(r.mcpApprovalRequests??[]).map(c=>({requestItem:new Ie(c.requestItem.rawItem,e),mcpTool:c.mcpTool}))};return{...l,hasToolsOrApprovalsToRun(){return l.handoffs.length>0||l.functions.length>0||l.mcpApprovalRequests.length>0||l.computerActions.length>0}}}const la=10;function pa(n,e){return n?!1:e?!0:"enabled_without_data"}function Gt(n,e){const t=e.filter(r=>r.type!=="tool_approval_item").map(r=>r.rawItem);return typeof n=="string"&&(n=[{type:"message",role:"user",content:n}]),[...n,...t]}class bu extends $o{constructor(t={}){super();k(this,ae);_(this,"config");_(this,"inputGuardrailDefs");_(this,"outputGuardrailDefs");this.config={modelProvider:t.modelProvider??Uo(),model:t.model,modelSettings:t.modelSettings,handoffInputFilter:t.handoffInputFilter,inputGuardrails:t.inputGuardrails,outputGuardrails:t.outputGuardrails,tracingDisabled:t.tracingDisabled??!1,traceIncludeSensitiveData:t.traceIncludeSensitiveData??!0,workflowName:t.workflowName??"Agent workflow",traceId:t.traceId,groupId:t.groupId,traceMetadata:t.traceMetadata},this.inputGuardrailDefs=(t.inputGuardrails??[]).map(Ds),this.outputGuardrailDefs=(t.outputGuardrails??[]).map(_r)}run(t,r,s={stream:!1,context:void 0}){return r instanceof nt&&r._trace?vo(r._trace,async()=>(r._currentAgentSpan&&Pn(r._currentAgentSpan),s!=null&&s.stream?$(this,ae,$r).call(this,t,r,s):$(this,ae,Mr).call(this,t,r,s))):wo(async()=>s!=null&&s.stream?$(this,ae,$r).call(this,t,r,s):$(this,ae,Mr).call(this,t,r,s),{traceId:this.config.traceId,name:this.config.workflowName,groupId:this.config.groupId,metadata:this.config.traceMetadata})}}ae=new WeakSet,Mr=async function(t,r,s){return lr(async()=>{var i,o;const a=r instanceof nt?r:new nt(s.context instanceof _t?s.context:new _t(s.context),r,t,s.maxTurns??la);try{for(;;){let l=fa(a._currentAgent.model,this.config.model);if(typeof l=="string"&&(l=await this.config.modelProvider.getModel(l)),a._currentStep=a._currentStep??{type:"next_step_run_again"},a._currentStep.type==="next_step_interruption"){if(O.debug("Continuing from interruption"),!a._lastTurnResponse||!a._lastProcessedResponse)throw new X("No model response found in previous state",a);const c=await Ks(a._currentAgent,a._originalInput,a._generatedItems,a._lastTurnResponse,a._lastProcessedResponse,this,a);if(a._toolUseTracker.addToolUse(a._currentAgent,a._lastProcessedResponse.toolsUsed),a._originalInput=c.originalInput,a._generatedItems=c.generatedItems,a._currentStep=c.nextStep,c.nextStep.type==="next_step_interruption")return new Sr(a);continue}if(a._currentStep.type==="next_step_run_again"){const c=[];if(a._currentAgent.handoffs&&c.push(...a._currentAgent.handoffs.map(jn)),!a._currentAgentSpan){const R=c.map(H=>H.agentName);a._currentAgentSpan=Es({data:{name:a._currentAgent.name,handoffs:R,output_type:a._currentAgent.outputSchemaName}}),a._currentAgentSpan.start(),Pn(a._currentAgentSpan)}const p=await a._currentAgent.getAllTools(a._context),f=p.map(R=>Gs(R)),h=c.map(R=>zs(R));if(a._currentAgentSpan&&(a._currentAgentSpan.spanData.tools=p.map(R=>R.name)),a._currentTurn++,a._currentTurn>a._maxTurns)throw(i=a._currentAgentSpan)==null||i.setError({message:"Max turns exceeded",data:{max_turns:a._maxTurns}}),new ls(`Max turns (${a._maxTurns}) exceeded`,a);O.debug(`Running agent ${a._currentAgent.name} (turn ${a._currentTurn})`),a._currentTurn===1&&await $(this,ae,jr).call(this,a);const S=Gt(a._originalInput,a._generatedItems);a._noActiveAgentRun&&(a._currentAgent.emit("agent_start",a._context,a._currentAgent),this.emit("agent_start",a._context,a._currentAgent));let b={...this.config.modelSettings,...a._currentAgent.modelSettings};b=Hs(a._currentAgent,a._toolUseTracker,b),a._lastTurnResponse=await l.getResponse({systemInstructions:await a._currentAgent.getSystemPrompt(a._context),prompt:await a._currentAgent.getPrompt(a._context),input:S,previousResponseId:s.previousResponseId,modelSettings:b,tools:f,outputType:hs(a._currentAgent.outputType),handoffs:h,tracing:pa(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:s.signal}),a._modelResponses.push(a._lastTurnResponse),a._context.usage.add(a._lastTurnResponse.usage),a._noActiveAgentRun=!1;const v=Ws(a._lastTurnResponse,a._currentAgent,p,c);a._lastProcessedResponse=v;const E=await Ys(a._currentAgent,a._originalInput,a._generatedItems,a._lastTurnResponse,a._lastProcessedResponse,this,a);a._toolUseTracker.addToolUse(a._currentAgent,a._lastProcessedResponse.toolsUsed),a._originalInput=E.originalInput,a._generatedItems=E.generatedItems,a._currentStep=E.nextStep}if(a._currentStep&&a._currentStep.type==="next_step_final_output")return await $(this,ae,Fr).call(this,a,a._currentStep.output),this.emit("agent_end",a._context,a._currentAgent,a._currentStep.output),a._currentAgent.emit("agent_end",a._context,a._currentStep.output),new Sr(a);if(a._currentStep&&a._currentStep.type==="next_step_handoff")a._currentAgent=a._currentStep.newAgent,a._currentAgentSpan&&(a._currentAgentSpan.end(),Lt(),a._currentAgentSpan=void 0),a._noActiveAgentRun=!0,a._currentStep={type:"next_step_run_again"};else{if(a._currentStep&&a._currentStep.type==="next_step_interruption")return new Sr(a);O.debug("Running next loop")}}}catch(l){throw a._currentAgentSpan&&a._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(l)}}),l}finally{a._currentAgentSpan&&(((o=a._currentStep)==null?void 0:o.type)!=="next_step_interruption"&&a._currentAgentSpan.end(),Lt())}})},jr=async function(t){const r=this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map(Ds));if(r.length>0){const s={agent:t._currentAgent,input:t._originalInput,context:t._context};try{const a=await Promise.all(r.map(async i=>Rs(async o=>{const l=await i.run(s);return o.spanData.triggered=l.output.tripwireTriggered,l},{data:{name:i.name}},t._currentAgentSpan)));for(const i of a)if(i.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:i.guardrail.name}}),new fs(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`,i,t)}catch(a){throw a instanceof fs?a:(t._currentTurn--,new ps(`Input guardrail failed to complete: ${a}`,a,t))}}},Fr=async function(t,r){const s=this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(_r));if(s.length>0){const a=t._currentAgent.processFinalOutput(r),i={agent:t._currentAgent,agentOutput:a,context:t._context,details:{modelResponse:t._lastTurnResponse}};try{const o=await Promise.all(s.map(async l=>Rs(async c=>{const p=await l.run(i);return c.spanData.triggered=p.output.tripwireTriggered,p},{data:{name:l.name}},t._currentAgentSpan)));for(const l of o)if(l.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:l.guardrail.name}}),new On(`Output guardrail triggered: ${JSON.stringify(l.output.outputInfo)}`,l,t)}catch(o){throw o instanceof On?o:new ps(`Output guardrail failed to complete: ${o}`,o,t)}}},Ta=async function(t,r){var s,a,i;try{for(;;){const o=t.state._currentAgent,l=o.handoffs.map(jn),c=await o.getAllTools(t.state._context),p=c.map(h=>Gs(h)),f=l.map(h=>zs(h));if(t.state._currentStep=t.state._currentStep??{type:"next_step_run_again"},t.state._currentStep.type==="next_step_interruption"){if(O.debug("Continuing from interruption"),!t.state._lastTurnResponse||!t.state._lastProcessedResponse)throw new X("No model response found in previous state",t.state);const h=await Ks(t.state._currentAgent,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);if(ea(t,h),t.state._toolUseTracker.addToolUse(t.state._currentAgent,t.state._lastProcessedResponse.toolsUsed),t.state._originalInput=h.originalInput,t.state._generatedItems=h.generatedItems,t.state._currentStep=h.nextStep,h.nextStep.type==="next_step_interruption")return;continue}if(t.state._currentStep.type==="next_step_run_again"){if(!t.state._currentAgentSpan){const H=l.map(ne=>ne.agentName);t.state._currentAgentSpan=Es({data:{name:o.name,handoffs:H,tools:c.map(ne=>ne.name),output_type:o.outputSchemaName}}),t.state._currentAgentSpan.start(),Pn(t.state._currentAgentSpan)}if(t.state._currentTurn++,t.state._currentTurn>t.state._maxTurns)throw(s=t.state._currentAgentSpan)==null||s.setError({message:"Max turns exceeded",data:{max_turns:t.state._maxTurns}}),new ls(`Max turns (${t.state._maxTurns}) exceeded`,t.state);O.debug(`Running agent ${o.name} (turn ${t.state._currentTurn})`);let h=fa(o.model,this.config.model);typeof h=="string"&&(h=await this.config.modelProvider.getModel(h)),t.state._currentTurn===1&&await $(this,ae,jr).call(this,t.state);let S={...this.config.modelSettings,...o.modelSettings};S=Hs(o,t.state._toolUseTracker,S);const b=Gt(t.input,t.newItems);t.state._noActiveAgentRun&&(o.emit("agent_start",t.state._context,o),this.emit("agent_start",t.state._context,o));let v;for await(const H of h.getStreamedResponse({systemInstructions:await o.getSystemPrompt(t.state._context),prompt:await o.getPrompt(t.state._context),input:b,previousResponseId:r.previousResponseId,modelSettings:S,tools:p,handoffs:f,outputType:hs(o.outputType),tracing:pa(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:r.signal})){if(H.type==="response_done"){const ne=qs.parse(H);v={usage:new $n(ne.response.usage),output:ne.response.output,responseId:ne.response.id}}if(t.cancelled)return;t._addItem(new uu(H))}if(t.state._noActiveAgentRun=!1,!v)throw new de("Model did not produce a final response!",t.state);t.state._lastTurnResponse=v,t.state._modelResponses.push(t.state._lastTurnResponse);const E=Ws(t.state._lastTurnResponse,o,c,l);t.state._lastProcessedResponse=E;const R=await Ys(o,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);ea(t,R),t.state._toolUseTracker.addToolUse(o,E.toolsUsed),t.state._originalInput=R.originalInput,t.state._generatedItems=R.generatedItems,t.state._currentStep=R.nextStep}if(t.state._currentStep.type==="next_step_final_output"){await $(this,ae,Fr).call(this,t.state,t.state._currentStep.output);return}else{if(t.state._currentStep.type==="next_step_interruption")return;t.state._currentStep.type==="next_step_handoff"?(t.state._currentAgent=(a=t.state._currentStep)==null?void 0:a.newAgent,t.state._currentAgentSpan&&(t.state._currentAgentSpan.end(),Lt()),t.state._currentAgentSpan=void 0,t._addItem(new du(t.state._currentAgent)),t.state._noActiveAgentRun=!0,t.state._currentStep={type:"next_step_run_again"}):O.debug("Running next loop")}}}catch(o){throw t.state._currentAgentSpan&&t.state._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(o)}}),o}finally{t.state._currentAgentSpan&&(((i=t.state._currentStep)==null?void 0:i.type)!=="next_step_interruption"&&t.state._currentAgentSpan.end(),Lt())}},$r=async function(t,r,s){return s=s??{},lr(async()=>{const a=r instanceof nt?r:new nt(s.context instanceof _t?s.context:new _t(s.context),r,t,s.maxTurns??la),i=new iu({signal:s.signal,state:a});return i.maxTurns=s.maxTurns??a._maxTurns,$(this,ae,Ta).call(this,i,s).then(()=>{i._done()},o=>{i._raiseError(o)}),i})};function fa(n,e){return typeof n=="string"&&n!==rt.DEFAULT_MODEL_PLACEHOLDER||n?n:e??n??rt.DEFAULT_MODEL_PLACEHOLDER}const At=class At extends Fo{constructor(t){super();_(this,"name");_(this,"instructions");_(this,"prompt");_(this,"handoffDescription");_(this,"handoffs");_(this,"model");_(this,"modelSettings");_(this,"tools");_(this,"mcpServers");_(this,"inputGuardrails");_(this,"outputGuardrails");_(this,"outputType","text");_(this,"toolUseBehavior");_(this,"resetToolChoice");if(typeof t.name!="string"||t.name.trim()==="")throw new X("Agent must have a name.");if(this.name=t.name,this.instructions=t.instructions??At.DEFAULT_MODEL_PLACEHOLDER,this.prompt=t.prompt,this.handoffDescription=t.handoffDescription??"",this.handoffs=t.handoffs??[],this.model=t.model??"",this.modelSettings=t.modelSettings??{},this.tools=t.tools??[],this.mcpServers=t.mcpServers??[],this.inputGuardrails=t.inputGuardrails??[],this.outputGuardrails=t.outputGuardrails??[],t.outputType&&(this.outputType=t.outputType),this.toolUseBehavior=t.toolUseBehavior??"run_llm_again",this.resetToolChoice=t.resetToolChoice??!0,(t.handoffOutputTypeWarningEnabled===void 0||t.handoffOutputTypeWarningEnabled)&&this.handoffs&&this.outputType){const r=new Set([JSON.stringify(this.outputType)]);for(const s of this.handoffs)"outputType"in s&&s.outputType?r.add(JSON.stringify(s.outputType)):"agent"in s&&s.agent.outputType&&r.add(JSON.stringify(s.agent.outputType));r.size>1&&O.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`)}}static create(t){return new At({...t,handoffs:t.handoffs,outputType:t.outputType,handoffOutputTypeWarningEnabled:!1})}get outputSchemaName(){if(this.outputType==="text")return"text";if(Ye(this.outputType))return"ZodOutput";if(typeof this.outputType=="object")return this.outputType.name;throw new Error(`Unknown output type: ${this.outputType}`)}clone(t){return new At({...this,...t})}asTool(t){const{toolName:r,toolDescription:s,customOutputExtractor:a}=t;return Rn({name:r??En(this.name),description:s??"",parameters:{type:"object",properties:{input:{type:"string"}},required:["input"],additionalProperties:!1},strict:!0,execute:async(i,o)=>{if(!Yi(i))throw new de("Agent tool called with invalid input");const c=await new bu().run(this,i.input,{context:o==null?void 0:o.context});return typeof a=="function"?a(c):ou(c.rawResponses[c.rawResponses.length-1])}})}async getSystemPrompt(t){return typeof this.instructions=="function"?await this.instructions(t,this):this.instructions}async getPrompt(t){return typeof this.prompt=="function"?await this.prompt(t,this):this.prompt}async getMcpTools(t){return this.mcpServers.length>0?co({mcpServers:this.mcpServers,runContext:t,agent:this,convertSchemasToStrict:!1}):[]}async getAllTools(t){return[...await this.getMcpTools(t),...this.tools]}processFinalOutput(t){if(this.outputType==="text")return t;if(typeof this.outputType=="object"){const r=JSON.parse(t);return Ye(this.outputType)?this.outputType.parse(r):r}throw new Error(`Unknown output type: ${this.outputType}`)}toJSON(){return{name:this.name}}};_(At,"DEFAULT_MODEL_PLACEHOLDER","");let rt=At;jo(Is());class Su extends rt{constructor(t){super(t);_(this,"voice");this.voice=t.voice??"ash"}}function Tu(n){return{debounceTextLength:n.debounceTextLength??100}}function ku({policyHint:n,...e}){const t=_r(e),r=n??t.name;return{...t,policyHint:r,run:async s=>{const a=await t.run(s);return{...a,guardrail:{...a.guardrail,policyHint:r}}}}}function Iu(n){return`
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo??{})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim()}const De=xs("openai-agents:realtime");g({itemId:d()});const ha=ce("role",[g({itemId:d(),previousItemId:d().nullable().optional(),type:m("message"),role:m("system"),content:U(g({type:m("input_text"),text:d()}))}),g({itemId:d(),previousItemId:d().nullable().optional(),type:m("message"),role:m("user"),status:oe(["in_progress","completed"]),content:U(g({type:m("input_text"),text:d()}).or(g({type:m("input_audio"),audio:d().nullable().optional(),transcript:d().nullable()})))}),g({itemId:d(),previousItemId:d().nullable().optional(),type:m("message"),role:m("assistant"),status:oe(["in_progress","completed","incomplete"]),content:U(g({type:m("text"),text:d()}).or(g({type:m("audio"),audio:d().nullable().optional(),transcript:d().nullable().optional()})))})]),ma=g({itemId:d(),previousItemId:d().nullable().optional(),type:m("function_call"),status:oe(["in_progress","completed"]),arguments:d(),name:d(),output:d().nullable()}),ga=g({id:d().optional().nullable(),conversation_id:d().optional().nullable(),max_output_tokens:C().or(m("inf")).optional().nullable(),metadata:Q(d(),Z()).optional().nullable(),modalities:U(d()).optional().nullable(),object:m("realtime.response").optional().nullable(),output:U(Z()).optional().nullable(),output_audio_format:d().optional().nullable(),status:oe(["completed","incomplete","failed","cancelled","in_progress"]).optional().nullable(),status_details:Q(d(),Z()).optional().nullable(),usage:g({input_tokens:C().optional(),input_tokens_details:Q(d(),Z()).optional().nullable(),output_tokens:C().optional(),output_tokens_details:Q(d(),Z()).optional().nullable()}).optional().nullable(),voice:d().optional().nullable()}),Au=g({id:d().optional(),audio:d().nullable().optional(),text:d().nullable().optional(),transcript:d().nullable().optional(),type:ss([m("input_text"),m("input_audio"),m("item_reference"),m("text"),m("audio")])}),zt=g({id:d().optional(),arguments:d().optional(),call_id:d().optional(),content:U(Au).optional(),name:d().optional(),object:m("realtime.item").optional(),output:d().optional(),role:oe(["user","assistant","system"]).optional(),status:oe(["completed","incomplete","in_progress"]).optional(),type:oe(["message","function_call","function_call_output"]).optional()}),Cu=g({type:m("conversation.created"),event_id:d(),conversation:g({id:d().optional(),object:m("realtime.conversation").optional()})}),Ou=g({type:m("conversation.item.created"),event_id:d(),item:zt,previous_item_id:d().nullable().optional()}),Eu=g({type:m("conversation.item.deleted"),event_id:d(),item_id:d()}),Nu=g({type:m("conversation.item.input_audio_transcription.completed"),event_id:d(),item_id:d(),content_index:C(),transcript:d(),logprobs:U(Z()).nullable().optional()}),Ru=g({type:m("conversation.item.input_audio_transcription.delta"),event_id:d(),item_id:d(),content_index:C().optional(),delta:d().optional(),logprobs:U(Z()).nullable().optional()}),Du=g({type:m("conversation.item.input_audio_transcription.failed"),event_id:d(),item_id:d(),content_index:C(),error:g({code:d().optional(),message:d().optional(),param:d().optional(),type:d().optional()})}),Pu=g({type:m("conversation.item.retrieved"),event_id:d(),item:zt}),Mu=g({type:m("conversation.item.truncated"),event_id:d(),item_id:d(),audio_end_ms:C(),content_index:C()}),ju=g({type:m("conversation.item.create"),item:zt,event_id:d().optional(),previous_item_id:d().nullable().optional()}),Fu=g({type:m("conversation.item.delete"),item_id:d(),event_id:d().optional()}),$u=g({type:m("conversation.item.retrieve"),item_id:d(),event_id:d().optional()}),Zu=g({type:m("conversation.item.truncate"),item_id:d(),audio_end_ms:C(),content_index:C(),event_id:d().optional()}),Lu=g({type:m("error"),event_id:d().optional(),error:Z().optional()}),Uu=g({type:m("input_audio_buffer.cleared"),event_id:d()}),Ju=g({type:m("input_audio_buffer.append"),audio:d(),event_id:d().optional()}),qu=g({type:m("input_audio_buffer.clear"),event_id:d().optional()}),Bu=g({type:m("input_audio_buffer.commit"),event_id:d().optional()}),Gu=g({type:m("input_audio_buffer.committed"),event_id:d(),item_id:d(),previous_item_id:d().nullable().optional()}),zu=g({type:m("input_audio_buffer.speech_started"),event_id:d(),item_id:d(),audio_start_ms:C()}),Vu=g({type:m("input_audio_buffer.speech_stopped"),event_id:d(),item_id:d(),audio_end_ms:C()}),Wu=g({type:m("output_audio_buffer.started"),event_id:d()}).passthrough(),Hu=g({type:m("output_audio_buffer.stopped"),event_id:d()}).passthrough(),Ku=g({type:m("output_audio_buffer.cleared"),event_id:d()}),Yu=g({type:m("rate_limits.updated"),event_id:d(),rate_limits:U(g({limit:C().optional(),name:oe(["requests","tokens"]).optional(),remaining:C().optional(),reset_seconds:C().optional()}))}),Xu=g({type:m("response.audio.delta"),event_id:d(),item_id:d(),content_index:C(),delta:d(),output_index:C(),response_id:d()}),Qu=g({type:m("response.audio.done"),event_id:d(),item_id:d(),content_index:C(),output_index:C(),response_id:d()}),ec=g({type:m("response.audio_transcript.delta"),event_id:d(),item_id:d(),content_index:C(),delta:d(),output_index:C(),response_id:d()}),tc=g({type:m("response.audio_transcript.done"),event_id:d(),item_id:d(),content_index:C(),transcript:d(),output_index:C(),response_id:d()}),nc=g({type:m("response.content_part.added"),event_id:d(),item_id:d(),content_index:C(),output_index:C(),response_id:d(),part:g({audio:d().optional(),text:d().optional(),transcript:d().optional(),type:oe(["text","audio"]).optional()})}),rc=g({type:m("response.content_part.done"),event_id:d(),item_id:d(),content_index:C(),output_index:C(),response_id:d(),part:g({audio:d().optional(),text:d().optional(),transcript:d().optional(),type:oe(["text","audio"]).optional()})}),sc=g({type:m("response.created"),event_id:d(),response:ga}),_a=g({type:m("response.done"),event_id:d(),response:ga}),ac=g({type:m("response.function_call_arguments.delta"),event_id:d(),item_id:d(),call_id:d(),delta:d(),output_index:C(),response_id:d()}),ic=g({type:m("response.function_call_arguments.done"),event_id:d(),item_id:d(),call_id:d(),arguments:d(),output_index:C(),response_id:d()}),oc=g({type:m("response.output_item.added"),event_id:d(),item:zt,output_index:C(),response_id:d()}),uc=g({type:m("response.output_item.done"),event_id:d(),item:zt,output_index:C(),response_id:d()}),cc=g({type:m("response.text.delta"),event_id:d(),item_id:d(),content_index:C(),delta:d(),output_index:C(),response_id:d()}),dc=g({type:m("response.text.done"),event_id:d(),item_id:d(),content_index:C(),text:d(),output_index:C(),response_id:d()}),lc=g({type:m("session.created"),event_id:d(),session:Z()}),pc=g({type:m("session.updated"),event_id:d(),session:Z()}),fc=g({type:m("response.cancel"),event_id:d().optional(),response_id:d().optional()}),hc=g({type:m("response.create"),event_id:d().optional(),response:Z().optional()}),mc=g({type:m("session.update"),event_id:d().optional(),session:Z()}),gc=g({type:m("transcription_session.update"),event_id:d().optional(),session:Z()}),_c=g({type:m("transcription_session.updated"),event_id:d(),session:Z()}),yc=g({type:d(),event_id:d().optional().nullable()}).passthrough(),vc=ce("type",[Cu,Ou,Eu,Nu,Ru,Du,Pu,Mu,Lu,Uu,Gu,zu,Vu,Wu,Hu,Ku,Yu,Xu,Qu,ec,tc,nc,rc,sc,_a,ac,ic,oc,uc,cc,dc,lc,pc,_c]);ce("type",[ju,Fu,$u,Zu,Ju,qu,Bu,fc,hc,mc,gc]);function Ar(n){const e=JSON.parse(n.data.toString()),t=vc.safeParse(e);if(!t.success){const r=yc.safeParse(e);return r.success?{data:r.data,isGeneric:!0}:{data:null,isGeneric:!0}}return{data:t.data,isGeneric:!1}}const ya="gpt-4o-realtime-preview",we={voice:"ash",modalities:["text","audio"],inputAudioFormat:"pcm16",outputAudioFormat:"pcm16",inputAudioTranscription:{model:"gpt-4o-mini-transcribe"},turnDetection:{type:"semantic_vad"},inputAudioNoiseReduction:null,speed:1},Er=class Er extends gr{constructor(t={}){super();k(this,ot);k(this,on);k(this,fe,null);k(this,un,null);_(this,"eventEmitter",new Dn);y(this,ot,t.model??ya),y(this,on,t.apiKey)}get currentModel(){return u(this,ot)}set currentModel(t){y(this,ot,t)}get _rawSessionConfig(){return u(this,un)??null}async _getApiKey(t){const r=t.apiKey??u(this,on);return typeof r=="function"?await r():r}_onMessage(t){var a,i,o,l,c,p;const{data:r,isGeneric:s}=Ar(t);if(r!==null&&(this.emit("*",r),!s)){if(r.type==="error"?this.emit("error",{type:"error",error:r}):this.emit(r.type,r),r.type==="response.created"){this.emit("turn_started",{type:"response_started",providerData:{...r}});return}if(r.type==="session.updated"&&y(this,un,r.session),r.type==="response.done"){const f=_a.safeParse(r);if(!f.success){De.error("Error parsing response done event",f.error);return}const h=((a=f.data.response.usage)==null?void 0:a.input_tokens)??0,S=((i=f.data.response.usage)==null?void 0:i.output_tokens)??0,b=h+S,v=new $n({inputTokens:h,inputTokensDetails:((o=f.data.response.usage)==null?void 0:o.input_tokens_details)??{},outputTokens:S,outputTokensDetails:((l=f.data.response.usage)==null?void 0:l.output_tokens_details)??{},totalTokens:b});this.emit("usage_update",v),this.emit("turn_done",{type:"response_done",response:{id:f.data.response.id??"",output:f.data.response.output??[],usage:{inputTokens:h,inputTokensDetails:((c=f.data.response.usage)==null?void 0:c.input_tokens_details)??{},outputTokens:S,outputTokensDetails:((p=f.data.response.usage)==null?void 0:p.output_tokens_details)??{},totalTokens:b}}});return}if(r.type==="response.audio.done"){this.emit("audio_done");return}if(r.type==="conversation.item.deleted"){this.emit("item_deleted",{itemId:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.completed"||r.type==="conversation.item.truncated"){this.sendEvent({type:"conversation.item.retrieve",item_id:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.delta"||r.type==="response.text.delta"||r.type==="response.audio_transcript.delta"||r.type==="response.function_call_arguments.delta"){r.type==="response.audio_transcript.delta"&&this.emit("audio_transcript_delta",{type:"transcript_delta",delta:r.delta,itemId:r.item_id,responseId:r.response_id});return}if((r.type==="conversation.item.created"||r.type==="conversation.item.retrieved")&&r.item.type==="message"){const f=r.type==="conversation.item.created"?r.previous_item_id:null,h=ha.parse({itemId:r.item.id,previousItemId:f,type:r.item.type,role:r.item.role,content:r.item.content,status:r.item.status});this.emit("item_update",h);return}if(r.type==="response.output_item.done"||r.type==="response.output_item.added"){const f=r.item;if(f.type==="function_call"&&f.status==="completed"){const h=ma.parse({itemId:f.id,type:f.type,status:"in_progress",arguments:f.arguments,name:f.name,output:null});this.emit("item_update",h),this.emit("function_call",{id:f.id,type:"function_call",callId:f.call_id??"",arguments:f.arguments??"",name:f.name??""});return}if(f.type==="message"){const h=ha.parse({itemId:r.item.id,type:r.item.type,role:r.item.role,content:r.item.content,status:"in_progress"});this.emit("item_update",h);return}}}}_onError(t){this.emit("error",{type:"error",error:t})}_onOpen(){this.emit("connected")}_onClose(){this.emit("disconnected")}sendMessage(t,r){this.sendEvent({type:"conversation.item.create",item:typeof t=="string"?{type:"message",role:"user",content:[{type:"input_text",text:t}]}:t,...r}),this.sendEvent({type:"response.create"})}_getMergedSessionConfig(t){var s;return{instructions:t.instructions,model:t.model??u(this,ot)??we.model,voice:t.voice??we.voice,speed:t.speed??we.speed,modalities:t.modalities??we.modalities,input_audio_format:t.inputAudioFormat??we.inputAudioFormat,output_audio_format:t.outputAudioFormat??we.outputAudioFormat,input_audio_transcription:t.inputAudioTranscription??we.inputAudioTranscription,input_audio_noise_reduction:t.inputAudioNoiseReduction??we.inputAudioNoiseReduction,turn_detection:Er.buildTurnDetectionConfig(t.turnDetection)??we.turnDetection,tool_choice:t.toolChoice??we.toolChoice,tools:(s=t.tools)==null?void 0:s.map(a=>({...a,strict:void 0})),...t.providerData??{}}}static buildTurnDetectionConfig(t){if(typeof t>"u")return;const{type:r,createResponse:s,create_response:a,eagerness:i,interruptResponse:o,interrupt_response:l,prefixPaddingMs:c,prefix_padding_ms:p,silenceDurationMs:f,silence_duration_ms:h,threshold:S,...b}=t,v={type:r,create_response:s||a,eagerness:i,interrupt_response:o||l,prefix_padding_ms:c||p,silence_duration_ms:f||h,threshold:S,...b};return Object.keys(v).forEach(E=>{v[E]===void 0&&delete v[E]}),Object.keys(v).length>0?v:void 0}set _tracingConfig(t){y(this,fe,t)}_updateTracingConfig(t){var r,s,a;if(typeof u(this,fe)>"u"&&y(this,fe,null),t==="auto"){this.sendEvent({type:"session.update",session:{tracing:"auto"}});return}if(typeof u(this,fe)!="string"&&typeof t!="string"){De.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");return}if(t===null){De.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."),this.sendEvent({type:"session.update",session:{tracing:null}});return}if(u(this,fe)===null||typeof u(this,fe)=="string"){this.sendEvent({type:"session.update",session:{tracing:t}});return}if((t==null?void 0:t.group_id)!==((r=u(this,fe))==null?void 0:r.group_id)||(t==null?void 0:t.metadata)!==((s=u(this,fe))==null?void 0:s.metadata)||(t==null?void 0:t.workflow_name)!==((a=u(this,fe))==null?void 0:a.workflow_name)){De.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s",JSON.stringify(u(this,fe)),JSON.stringify(t));return}this.sendEvent({type:"session.update",session:{tracing:t}})}updateSessionConfig(t){const r=this._getMergedSessionConfig(t);this.sendEvent({type:"session.update",session:r})}sendFunctionCallOutput(t,r,s=!0){this.sendEvent({type:"conversation.item.create",item:{type:"function_call_output",output:r,call_id:t.callId}});try{const a=ma.parse({itemId:t.id,previousItemId:t.previousItemId,type:"function_call",status:"completed",arguments:t.arguments,name:t.name,output:r});this.emit("item_update",a)}catch(a){De.error("Error parsing tool call item",a,t)}s&&this.sendEvent({type:"response.create"})}sendAudio(t,{commit:r=!1}={}){this.sendEvent({type:"input_audio_buffer.append",audio:Dt(t)}),r&&this.sendEvent({type:"input_audio_buffer.commit"})}resetHistory(t,r){const{removals:s,additions:a,updates:i}=Oa(t,r),o=new Set(s.map(c=>c.itemId));for(const c of i)o.add(c.itemId);if(o.size>0)for(const c of o)this.sendEvent({type:"conversation.item.delete",item_id:c});const l=[...a,...i];for(const c of l)if(c.type==="message"){const p={type:"message",role:c.role,content:c.content,id:c.itemId};c.role!=="system"&&c.status&&(p.status=c.status),this.sendEvent({type:"conversation.item.create",item:p})}else c.type==="function_call"&&De.warn("Function calls cannot be manually added or updated at the moment. Ignoring.")}};ot=new WeakMap,on=new WeakMap,fe=new WeakMap,un=new WeakMap;let Vt=Er;class va extends Vt{constructor(t={}){if(typeof RTCPeerConnection>"u")throw new Error("WebRTC is not supported in this environment");super(t);_(this,"options");k(this,cn);k(this,z,{status:"disconnected",peerConnection:void 0,dataChannel:void 0});k(this,dn);k(this,ut,!1);k(this,ln,!1);this.options=t,y(this,cn,t.baseUrl??"https://api.openai.com/v1/realtime"),y(this,dn,t.useInsecureApiKey??!1)}get status(){return u(this,z).status}get connectionState(){return u(this,z)}get muted(){return u(this,ln)}async connect(t){if(u(this,z).status==="connected")return;u(this,z).status==="connecting"&&De.warn("Realtime connection already in progress. Please await original promise");const r=t.model??this.currentModel;this.currentModel=r;const s=t.url??u(this,cn),a=await this._getApiKey(t),i=typeof a=="string"&&a.startsWith("ek_");if(!u(this,dn)&&!i)throw new X("Using the WebRTC connection in a browser environment requires an insecure API key. Please use a WebSocket connection instead or set the useInsecureApiKey option to true.");return new Promise(async(o,l)=>{try{const c={...t.initialSessionConfig||{},model:this.currentModel},p=new URL(s);let f=new RTCPeerConnection;const h=f.createDataChannel("oai-events");y(this,z,{status:"connecting",peerConnection:f,dataChannel:h}),this.emit("connection_change",u(this,z).status),h.addEventListener("open",()=>{y(this,z,{status:"connected",peerConnection:f,dataChannel:h}),this.updateSessionConfig(c),this.emit("connection_change",u(this,z).status),this._onOpen(),o()}),h.addEventListener("error",he=>{this.close(),this._onError(he),l(he)}),h.addEventListener("message",he=>{this._onMessage(he);const{data:me,isGeneric:gn}=Ar(he);!me||gn||(me.type==="response.created"?y(this,ut,!0):me.type==="response.done"&&y(this,ut,!1),me.type==="session.created"&&(this._tracingConfig=me.session.tracing,this._updateTracingConfig(c.tracing??"auto")))});const S=this.options.audioElement??document.createElement("audio");S.autoplay=!0,f.ontrack=he=>{S.srcObject=he.streams[0]};const b=this.options.mediaStream??await navigator.mediaDevices.getUserMedia({audio:!0});f.addTrack(b.getAudioTracks()[0]),this.options.changePeerConnection&&(f=await this.options.changePeerConnection(f),y(this,z,{...u(this,z),peerConnection:f}));const v=await f.createOffer();if(await f.setLocalDescription(v),!v.sdp)throw new Error("Failed to create offer");const E={...this._getMergedSessionConfig(c),model:this.currentModel},R=new FormData;R.append("sdp",v.sdp),R.append("session",JSON.stringify(E));const ne={type:"answer",sdp:await(await fetch(p,{method:"POST",body:R,headers:{Authorization:`Bearer ${a}`,"X-OpenAI-Agents-SDK":Na["X-OpenAI-Agents-SDK"]}})).text()};await f.setRemoteDescription(ne)}catch(c){this.close(),this._onError(c),l(c)}})}sendEvent(t){if(!u(this,z).dataChannel||u(this,z).dataChannel.readyState!=="open")throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");u(this,z).dataChannel.send(JSON.stringify(t))}mute(t){y(this,ln,t),u(this,z).peerConnection&&u(this,z).peerConnection.getSenders().forEach(s=>{s.track&&(s.track.enabled=!t)})}close(){if(u(this,z).dataChannel&&u(this,z).dataChannel.close(),u(this,z).peerConnection){const t=u(this,z).peerConnection;t.getSenders().forEach(r=>{var s;(s=r.track)==null||s.stop()}),t.close()}u(this,z).status!=="disconnected"&&(y(this,z,{status:"disconnected",peerConnection:void 0,dataChannel:void 0}),this.emit("connection_change",u(this,z).status),this._onClose())}interrupt(){u(this,ut)&&(this.sendEvent({type:"response.cancel"}),y(this,ut,!1)),this.sendEvent({type:"output_audio_buffer.clear"})}}cn=new WeakMap,z=new WeakMap,dn=new WeakMap,ut=new WeakMap,ln=new WeakMap;const wc=globalThis.WebSocket;class wa extends Vt{constructor(t={}){super(t);k(this,Bn);k(this,ct);k(this,dt);k(this,te,{status:"disconnected",websocket:void 0});k(this,pn);k(this,je);k(this,lt);_(this,"_firstAudioTimestamp");_(this,"_audioLengthMs",0);k(this,pt,!1);y(this,dt,t.url),y(this,pn,t.useInsecureApiKey??!1)}get status(){return u(this,te).status}get connectionState(){return u(this,te)}get muted(){return null}get currentItemId(){return u(this,je)}_onAudio(t){this.emit("audio",t)}async connect(t){const r=t.model??this.currentModel;this.currentModel=r,y(this,ct,await this._getApiKey(t));const s=t.url??u(this,dt)??`wss://api.openai.com/v1/realtime?model=${this.currentModel}`;y(this,dt,s);const a={...t.initialSessionConfig||{},model:this.currentModel};await new Promise((i,o)=>{try{$(this,Bn,ka).call(this,i,o,a)}catch(l){o(l)}}),await this.updateSessionConfig(a)}sendEvent(t){if(!u(this,te).websocket)throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");u(this,te).websocket.send(JSON.stringify(t))}close(){var t;(t=u(this,te).websocket)==null||t.close(),y(this,je,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,y(this,lt,void 0)}mute(t){throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.")}sendAudio(t,r={}){u(this,te).status==="connected"&&super.sendAudio(t,r)}_cancelResponse(){u(this,pt)&&(this.sendEvent({type:"response.cancel"}),y(this,pt,!1))}_interrupt(t,r=!0){if(t<0)return;r&&this._cancelResponse();const s=this._audioLengthMs??Number.POSITIVE_INFINITY,a=Math.max(0,Math.min(Math.floor(t),s));this.emit("audio_interrupted"),this.sendEvent({type:"conversation.item.truncate",item_id:u(this,je),content_index:u(this,lt),audio_end_ms:a})}interrupt(t=!0){if(!u(this,je)||typeof this._firstAudioTimestamp!="number")return;const r=Date.now()-this._firstAudioTimestamp;r>=0&&this._interrupt(r,t),y(this,je,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,y(this,lt,void 0)}}ct=new WeakMap,dt=new WeakMap,te=new WeakMap,pn=new WeakMap,je=new WeakMap,lt=new WeakMap,pt=new WeakMap,Bn=new WeakSet,ka=function(t,r,s){if(u(this,te).websocket){t();return}if(!u(this,ct))throw new X("API key is not set. Please call `connect()` with an API key first.");if(!u(this,ct).startsWith("ek_")&&!u(this,pn))throw new X("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");const a=["realtime","openai-insecure-api-key."+u(this,ct),"openai-beta.realtime-v1",Ra],i=new wc(u(this,dt),a);y(this,te,{status:"connecting",websocket:i}),this.emit("connection_change",u(this,te).status),i.addEventListener("open",()=>{y(this,te,{status:"connected",websocket:i}),this.emit("connection_change",u(this,te).status),this._onOpen(),t()}),i.addEventListener("error",o=>{this._onError(o),y(this,te,{status:"disconnected",websocket:void 0}),this.emit("connection_change",u(this,te).status),r(o)}),i.addEventListener("message",o=>{var p,f,h;this._onMessage(o);const{data:l,isGeneric:c}=Ar(o);if(!(!l||c))if(l.type==="response.audio.delta"){y(this,lt,l.content_index),y(this,je,l.item_id),this._firstAudioTimestamp===void 0&&(this._firstAudioTimestamp=Date.now(),this._audioLengthMs=0);const S=K(l.delta);(((p=this._rawSessionConfig)==null?void 0:p.output_audio_format)??"pcm16").startsWith("g711_")?this._audioLengthMs+=S.byteLength/8:this._audioLengthMs+=S.byteLength/24/2;const v={type:"audio",data:S,responseId:l.response_id};this._onAudio(v)}else if(l.type==="input_audio_buffer.speech_started"){const S=((h=(f=this._rawSessionConfig)==null?void 0:f.turn_detection)==null?void 0:h.interrupt_response)??!1;this.interrupt(!S)}else l.type==="response.created"?y(this,pt,!0):l.type==="response.done"?y(this,pt,!1):l.type==="session.created"&&(this._tracingConfig=l.session.tracing,this._updateTracingConfig(s.tracing??"auto"))}),i.addEventListener("close",()=>{y(this,te,{status:"disconnected",websocket:void 0}),this.emit("connection_change",u(this,te).status),this._onClose()})};class xc extends Dn{constructor(t,r={}){super();k(this,W);_(this,"initialAgent");_(this,"options");k(this,q);k(this,j);k(this,fn,[]);k(this,D);k(this,Ct,[]);k(this,Ot);k(this,hn,{});k(this,V,[]);k(this,Et);k(this,Nt,{});k(this,Ce,!1);k(this,mn,null);this.initialAgent=t,this.options=r,typeof r.transport>"u"&&Ea()||r.transport==="webrtc"?y(this,q,new va):r.transport==="websocket"||typeof r.transport>"u"?y(this,q,new wa):y(this,q,r.transport),y(this,j,t),y(this,D,new _t({...r.context??{},history:u(this,V)})),y(this,Ct,(r.outputGuardrails??[]).map(ku)),y(this,Ot,Tu(r.outputGuardrailSettings??{})),y(this,Et,r.historyStoreAudio??!1)}get transport(){return u(this,q)}get currentAgent(){return u(this,j)}get usage(){return u(this,D).usage}get context(){return u(this,D)}get muted(){return u(this,q).muted}get history(){return u(this,V)}async updateAgent(t){return u(this,j).emit("agent_handoff",u(this,D),t),this.emit("agent_handoff",u(this,D),u(this,j),t),await $(this,W,Gn).call(this,t),await u(this,q).updateSessionConfig(await $(this,W,zn).call(this)),t}async connect(t){await $(this,W,Gn).call(this,this.initialAgent),$(this,W,Ca).call(this),await u(this,q).connect({apiKey:t.apiKey??this.options.apiKey,model:this.options.model,url:t.url,initialSessionConfig:await $(this,W,zn).call(this,this.options.config)}),y(this,V,[]),this.emit("history_updated",u(this,V))}updateHistory(t){let r;typeof t=="function"?r=t(u(this,V)):r=t,u(this,q).resetHistory(u(this,V),r)}sendMessage(t,r={}){u(this,q).sendMessage(t,r)}mute(t){u(this,q).mute(t)}close(){y(this,Nt,{}),u(this,q).close()}sendAudio(t,r={}){u(this,q).sendAudio(t,r)}interrupt(){u(this,q).interrupt()}async approve(t,r={alwaysApprove:!1}){u(this,D).approveTool(t,r);const s=u(this,j).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await $(this,W,Vn).call(this,t.rawItem,s);else throw new de(`Tool ${t.rawItem.name} not found`)}async reject(t,r={alwaysReject:!1}){u(this,D).rejectTool(t,r);const s=u(this,j).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await $(this,W,Vn).call(this,t.rawItem,s);else throw new de(`Tool ${t.rawItem.name} not found`)}}q=new WeakMap,j=new WeakMap,fn=new WeakMap,D=new WeakMap,Ct=new WeakMap,Ot=new WeakMap,hn=new WeakMap,V=new WeakMap,Et=new WeakMap,Nt=new WeakMap,Ce=new WeakMap,mn=new WeakMap,W=new WeakSet,Gn=async function(t){y(this,j,t);const s=u(this,j).handoffs.map(jn).map(i=>i.getHandoffAsFunctionTool()),a=await u(this,j).getAllTools(u(this,D));y(this,fn,[...a.filter(i=>i.type==="function"),...s])},zn=async function(t={}){const r=await u(this,j).getSystemPrompt(u(this,D)),s=this.options.tracingDisabled?null:this.options.workflowName?{workflow_name:this.options.workflowName}:"auto";s!==null&&s!=="auto"?(this.options.groupId&&(s.group_id=this.options.groupId),this.options.traceMetadata&&(s.metadata=this.options.traceMetadata)):(this.options.groupId||this.options.traceMetadata)&&De.warn("In order to set traceMetadata or a groupId you need to specify a workflowName.");const i={...{...u(this,mn)??{},...this.options.config??{},...t??{}},instructions:r,voice:u(this,j).voice,model:this.options.model,tools:u(this,fn),tracing:s};return y(this,mn,i),i},Ia=async function(t,r){const s=await r.onInvokeHandoff(u(this,D),t.arguments);u(this,j).emit("agent_handoff",u(this,D),s),this.emit("agent_handoff",u(this,D),u(this,j),s),await $(this,W,Gn).call(this,s),await u(this,q).updateSessionConfig(await $(this,W,zn).call(this));const a=Ps(s);return u(this,q).sendFunctionCallOutput(t,a,!0),s},Vn=async function(t,r){u(this,D).context.history=JSON.parse(JSON.stringify(u(this,V)));let s=t.arguments;if(r.parameters&&(Ye(r.parameters)?s=r.parameters.parse(s):s=JSON.parse(s)),await r.needsApproval(u(this,D),s,t.callId)){const l=this.context.isToolApproved({toolName:r.name,callId:t.callId});if(l===!1){this.emit("agent_tool_start",u(this,D),u(this,j),r,{toolCall:t}),u(this,j).emit("agent_tool_start",u(this,D),r,{toolCall:t});const c="Tool execution was not approved.";u(this,q).sendFunctionCallOutput(t,c,!0),this.emit("agent_tool_end",u(this,D),u(this,j),r,c,{toolCall:t}),u(this,j).emit("agent_tool_end",u(this,D),r,c,{toolCall:t});return}else if(typeof l>"u"){this.emit("tool_approval_requested",u(this,D),u(this,j),{type:"function_approval",tool:r,approvalItem:new Ie(t,u(this,j))});return}}this.emit("agent_tool_start",u(this,D),u(this,j),r,{toolCall:t}),u(this,j).emit("agent_tool_start",u(this,D),r,{toolCall:t}),u(this,D).context.history=JSON.parse(JSON.stringify(u(this,V)));const i=await r.invoke(u(this,D),t.arguments),o=Xe(i);u(this,q).sendFunctionCallOutput(t,o,!0),this.emit("agent_tool_end",u(this,D),u(this,j),r,o,{toolCall:t}),u(this,j).emit("agent_tool_end",u(this,D),r,o,{toolCall:t})},Aa=async function(t){const r=new Map(u(this,j).handoffs.map(jn).map(o=>[o.toolName,o])),s=await u(this,j).getAllTools(u(this,D)),a=new Map(s.map(o=>[o.name,o])),i=r.get(t.name);if(i)await $(this,W,Ia).call(this,t,i);else{const o=a.get(t.name);if(o&&o.type==="function")await $(this,W,Vn).call(this,t,o);else throw new de(`Tool ${t.name} not found`)}},Zr=async function(t,r,s){if(u(this,Ct).length===0)return;const a={agent:u(this,j),agentOutput:t,context:u(this,D)},o=(await Promise.all(u(this,Ct).map(l=>l.run(a)))).find(l=>l.output.tripwireTriggered);if(o){if(u(this,Nt)[r])return;u(this,Nt)[r]=!0;const l=new On(`Output guardrail triggered: ${JSON.stringify(o.output.outputInfo)}`,o);this.emit("guardrail_tripped",u(this,D),u(this,j),l,{itemId:s}),this.interrupt();const c=Iu(o);this.sendMessage(c);return}},Ca=function(){u(this,q).on("*",s=>{if(this.emit("transport_event",s),s.type==="conversation.item.input_audio_transcription.completed")try{const a=s;y(this,V,Jr(u(this,V),a,u(this,Et))),u(this,D).context.history=u(this,V),this.emit("history_updated",u(this,V))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,q).on("audio",s=>{u(this,Ce)||(y(this,Ce,!0),this.emit("audio_start",u(this,D),u(this,j))),this.emit("audio",s)}),u(this,q).on("turn_started",()=>{y(this,Ce,!1),this.emit("agent_start",u(this,D),u(this,j)),u(this,j).emit("agent_start",u(this,D),u(this,j))}),u(this,q).on("turn_done",s=>{const a=s.response.output[s.response.output.length-1],i=Lr(a)??"",o=(a==null?void 0:a.id)??"";this.emit("agent_end",u(this,D),u(this,j),i),u(this,j).emit("agent_end",u(this,D),i),$(this,W,Zr).call(this,i,s.response.id,o)}),u(this,q).on("audio_done",()=>{u(this,Ce)&&y(this,Ce,!1),this.emit("audio_stopped",u(this,D),u(this,j))});let t=0,r;u(this,q).on("audio_transcript_delta",s=>{try{const a=s.delta,i=s.itemId,o=s.responseId;r!==i&&(r=i,t=0);const c=(u(this,hn)[i]??"")+a;if(u(this,hn)[i]=c,u(this,Ot).debounceTextLength<0)return;const p=Math.floor(c.length/u(this,Ot).debounceTextLength);p>t&&(t=p,$(this,W,Zr).call(this,c,o,i))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,q).on("item_update",s=>{try{const a=!u(this,V).some(i=>i.itemId===s.itemId);if(y(this,V,Jr(u(this,V),s,u(this,Et))),u(this,D).context.history=u(this,V),a){const i=u(this,V).find(o=>o.itemId===s.itemId);i&&this.emit("history_added",i)}this.emit("history_updated",u(this,V))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,q).on("item_deleted",s=>{try{y(this,V,u(this,V).filter(a=>a.itemId!==s.itemId)),u(this,D).context.history=u(this,V),this.emit("history_updated",u(this,V))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,q).on("function_call",async s=>{try{await $(this,W,Aa).call(this,s)}catch(a){De.error("Error handling function call",a),this.emit("error",{type:"error",error:a})}}),u(this,q).on("usage_update",s=>{u(this,D).usage.add(s)}),u(this,q).on("audio_interrupted",()=>{u(this,Ce)&&y(this,Ce,!1),this.emit("audio_interrupted",u(this,D),u(this,j))}),u(this,q).on("error",s=>{this.emit("error",s)})};const bc={base64ToArrayBuffer:K,arrayBufferToBase64:Dt,getLastTextFromAudioOutputMessage:Lr};P.DEFAULT_OPENAI_REALTIME_MODEL=ya,P.DEFAULT_OPENAI_REALTIME_SESSION_CONFIG=we,P.ModelBehaviorError=de,P.OpenAIRealtimeBase=Vt,P.OpenAIRealtimeWebRTC=va,P.OpenAIRealtimeWebSocket=wa,P.OutputGuardrailTripwireTriggered=On,P.RealtimeAgent=Su,P.RealtimeSession=xc,P.UserError=X,P.tool=Rn,P.utils=bc,Object.defineProperty(P,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
