var Aa = Object.defineProperty;
var Fr = (n) => {
  throw TypeError(n);
};
var Ca = (n, e, t) => e in n ? Aa(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var _ = (n, e, t) => Ca(n, typeof e != "symbol" ? e + "" : e, t), qn = (n, e, t) => e.has(n) || Fr("Cannot " + t);
var u = (n, e, t) => (qn(n, e, "read from private field"), t ? t.call(n) : e.get(n)), k = (n, e, t) => e.has(n) ? Fr("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(n) : e.set(n, t), y = (n, e, t, r) => (qn(n, e, "write to private field"), r ? r.call(n, t) : e.set(n, t), t), $ = (n, e, t) => (qn(n, e, "access private method"), t);
const er = {
  version: "0.0.17"
};
function Ns(n) {
  const e = atob(n), t = e.length, r = new Uint8Array(t);
  for (let s = 0; s < t; s++)
    r[s] = e.charCodeAt(s);
  return r.buffer;
}
function Rs(n) {
  const e = String.fromCharCode(...new Uint8Array(n));
  return btoa(e);
}
function Ds(n) {
  if (typeof n > "u" || n === null || typeof n != "object" || !("type" in n) || typeof n.type != "string" || !n.type || n.type !== "message" || !("content" in n) || !Array.isArray(n.content) || n.content.length < 1)
    return;
  const e = n.content[n.content.length - 1];
  if (!(!("type" in e) || typeof e.type != "string")) {
    if (e.type === "text")
      return typeof e.text == "string" ? e.text : void 0;
    if (e.type === "audio")
      return typeof e.transcript == "string" ? e.transcript : void 0;
  }
}
function Oa(n, e) {
  const t = n.filter((a) => !e.some((i) => i.itemId === a.itemId)), r = e.filter((a) => !n.some((i) => i.itemId === a.itemId)), s = e.filter((a) => n.some((i) => i.itemId === a.itemId && JSON.stringify(i) !== JSON.stringify(a)));
  return {
    removals: t,
    additions: r,
    updates: s
  };
}
function Ea() {
  return typeof window > "u" ? !1 : typeof window.RTCPeerConnection < "u";
}
function Zr(n) {
  return n.role === "system" ? n : n.role === "assistant" ? {
    ...n,
    content: n.content.map((e) => e.type === "audio" ? {
      ...e,
      audio: null
    } : e)
  } : n.role === "user" ? {
    ...n,
    content: n.content.map((e) => e.type === "input_audio" ? {
      ...e,
      audio: null
    } : e)
  } : n;
}
function Lr(n, e, t) {
  if (e.type === "conversation.item.input_audio_transcription.completed")
    return n.map((a) => {
      if (a.itemId === e.item_id && a.type === "message" && "role" in a && a.role === "user") {
        const i = a.content.map((o) => o.type === "input_audio" ? {
          ...o,
          transcript: e.transcript
        } : o);
        return {
          ...a,
          content: i,
          status: "completed"
        };
      }
      return a;
    });
  const r = !t && e.type === "message" ? Zr(e) : e, s = n.findIndex((a) => a.itemId === e.itemId);
  if (s !== -1)
    return n.map((a, i) => i === s ? r : !t && a.type === "message" ? Zr(a) : a);
  if (e.previousItemId) {
    const a = n.findIndex((i) => i.itemId === e.previousItemId);
    return a !== -1 ? [
      ...n.slice(0, a + 1),
      r,
      ...n.slice(a + 1)
    ] : [...n, r];
  } else
    return [...n, r];
}
const Na = {
  "User-Agent": `Agents/JavaScript ${er.version}`,
  "X-OpenAI-Agents-SDK": `openai-agents-sdk.${er.version}`
}, Ra = `openai-agents-sdk.${er.version}`;
async function xr(n) {
  try {
    return [null, await n()];
  } catch (e) {
    return [e, null];
  }
}
function Da(n, e) {
  const t = { ...n };
  return Object.defineProperties(t, {
    $brand: {
      value: "auto-parseable-response-format",
      enumerable: !1
    },
    $parseRaw: {
      value: e,
      enumerable: !1
    }
  }), t;
}
const Pa = Symbol("Let zodToJsonSchema decide on which parser to use"), Ur = {
  name: void 0,
  $refStrategy: "root",
  effectStrategy: "input",
  pipeStrategy: "all",
  dateStrategy: "format:date-time",
  mapStrategy: "entries",
  nullableStrategy: "from-target",
  removeAdditionalStrategy: "passthrough",
  definitionPath: "definitions",
  target: "jsonSchema7",
  strictUnions: !1,
  errorMessages: !1,
  markdownDescription: !1,
  patternStrategy: "escape",
  applyRegexFlags: !1,
  emailStrategy: "format:email",
  base64Strategy: "contentEncoding:base64",
  nameStrategy: "ref"
}, Ma = (n) => typeof n == "string" ? {
  ...Ur,
  basePath: ["#"],
  definitions: {},
  name: n
} : {
  ...Ur,
  basePath: ["#"],
  definitions: {},
  ...n
}, tr = (n) => "_def" in n ? n._def : n;
function ja(n) {
  if (!n)
    return !0;
  for (const e in n)
    return !1;
  return !0;
}
const $a = (n) => {
  const e = Ma(n), t = e.name !== void 0 ? [...e.basePath, e.definitionPath, e.name] : e.basePath;
  return {
    ...e,
    currentPath: t,
    propertyPath: void 0,
    seenRefs: /* @__PURE__ */ new Set(),
    seen: new Map(Object.entries(e.definitions).map(([r, s]) => [
      tr(s),
      {
        def: tr(s),
        path: [...e.basePath, e.definitionPath, r],
        // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.
        jsonSchema: void 0
      }
    ]))
  };
};
function Ps(n, e, t, r) {
  r != null && r.errorMessages && t && (n.errorMessage = {
    ...n.errorMessage,
    [e]: t
  });
}
function q(n, e, t, r, s) {
  n[e] = t, Ps(n, e, r, s);
}
var Z;
(function(n) {
  n.assertEqual = (s) => {
  };
  function e(s) {
  }
  n.assertIs = e;
  function t(s) {
    throw new Error();
  }
  n.assertNever = t, n.arrayToEnum = (s) => {
    const a = {};
    for (const i of s)
      a[i] = i;
    return a;
  }, n.getValidEnumValues = (s) => {
    const a = n.objectKeys(s).filter((o) => typeof s[s[o]] != "number"), i = {};
    for (const o of a)
      i[o] = s[o];
    return n.objectValues(i);
  }, n.objectValues = (s) => n.objectKeys(s).map(function(a) {
    return s[a];
  }), n.objectKeys = typeof Object.keys == "function" ? (s) => Object.keys(s) : (s) => {
    const a = [];
    for (const i in s)
      Object.prototype.hasOwnProperty.call(s, i) && a.push(i);
    return a;
  }, n.find = (s, a) => {
    for (const i of s)
      if (a(i))
        return i;
  }, n.isInteger = typeof Number.isInteger == "function" ? (s) => Number.isInteger(s) : (s) => typeof s == "number" && Number.isFinite(s) && Math.floor(s) === s;
  function r(s, a = " | ") {
    return s.map((i) => typeof i == "string" ? `'${i}'` : i).join(a);
  }
  n.joinValues = r, n.jsonStringifyReplacer = (s, a) => typeof a == "bigint" ? a.toString() : a;
})(Z || (Z = {}));
var Jr;
(function(n) {
  n.mergeShapes = (e, t) => ({
    ...e,
    ...t
    // second overwrites first
  });
})(Jr || (Jr = {}));
const I = Z.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]), Me = (n) => {
  switch (typeof n) {
    case "undefined":
      return I.undefined;
    case "string":
      return I.string;
    case "number":
      return Number.isNaN(n) ? I.nan : I.number;
    case "boolean":
      return I.boolean;
    case "function":
      return I.function;
    case "bigint":
      return I.bigint;
    case "symbol":
      return I.symbol;
    case "object":
      return Array.isArray(n) ? I.array : n === null ? I.null : n.then && typeof n.then == "function" && n.catch && typeof n.catch == "function" ? I.promise : typeof Map < "u" && n instanceof Map ? I.map : typeof Set < "u" && n instanceof Set ? I.set : typeof Date < "u" && n instanceof Date ? I.date : I.object;
    default:
      return I.unknown;
  }
}, w = Z.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
class De extends Error {
  get errors() {
    return this.issues;
  }
  constructor(e) {
    super(), this.issues = [], this.addIssue = (r) => {
      this.issues = [...this.issues, r];
    }, this.addIssues = (r = []) => {
      this.issues = [...this.issues, ...r];
    };
    const t = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, t) : this.__proto__ = t, this.name = "ZodError", this.issues = e;
  }
  format(e) {
    const t = e || function(a) {
      return a.message;
    }, r = { _errors: [] }, s = (a) => {
      for (const i of a.issues)
        if (i.code === "invalid_union")
          i.unionErrors.map(s);
        else if (i.code === "invalid_return_type")
          s(i.returnTypeError);
        else if (i.code === "invalid_arguments")
          s(i.argumentsError);
        else if (i.path.length === 0)
          r._errors.push(t(i));
        else {
          let o = r, l = 0;
          for (; l < i.path.length; ) {
            const c = i.path[l];
            l === i.path.length - 1 ? (o[c] = o[c] || { _errors: [] }, o[c]._errors.push(t(i))) : o[c] = o[c] || { _errors: [] }, o = o[c], l++;
          }
        }
    };
    return s(this), r;
  }
  static assert(e) {
    if (!(e instanceof De))
      throw new Error(`Not a ZodError: ${e}`);
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, Z.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(e = (t) => t.message) {
    const t = {}, r = [];
    for (const s of this.issues)
      s.path.length > 0 ? (t[s.path[0]] = t[s.path[0]] || [], t[s.path[0]].push(e(s))) : r.push(e(s));
    return { formErrors: r, fieldErrors: t };
  }
  get formErrors() {
    return this.flatten();
  }
}
De.create = (n) => new De(n);
const nr = (n, e) => {
  let t;
  switch (n.code) {
    case w.invalid_type:
      n.received === I.undefined ? t = "Required" : t = `Expected ${n.expected}, received ${n.received}`;
      break;
    case w.invalid_literal:
      t = `Invalid literal value, expected ${JSON.stringify(n.expected, Z.jsonStringifyReplacer)}`;
      break;
    case w.unrecognized_keys:
      t = `Unrecognized key(s) in object: ${Z.joinValues(n.keys, ", ")}`;
      break;
    case w.invalid_union:
      t = "Invalid input";
      break;
    case w.invalid_union_discriminator:
      t = `Invalid discriminator value. Expected ${Z.joinValues(n.options)}`;
      break;
    case w.invalid_enum_value:
      t = `Invalid enum value. Expected ${Z.joinValues(n.options)}, received '${n.received}'`;
      break;
    case w.invalid_arguments:
      t = "Invalid function arguments";
      break;
    case w.invalid_return_type:
      t = "Invalid function return type";
      break;
    case w.invalid_date:
      t = "Invalid date";
      break;
    case w.invalid_string:
      typeof n.validation == "object" ? "includes" in n.validation ? (t = `Invalid input: must include "${n.validation.includes}"`, typeof n.validation.position == "number" && (t = `${t} at one or more positions greater than or equal to ${n.validation.position}`)) : "startsWith" in n.validation ? t = `Invalid input: must start with "${n.validation.startsWith}"` : "endsWith" in n.validation ? t = `Invalid input: must end with "${n.validation.endsWith}"` : Z.assertNever(n.validation) : n.validation !== "regex" ? t = `Invalid ${n.validation}` : t = "Invalid";
      break;
    case w.too_small:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "more than"} ${n.minimum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "over"} ${n.minimum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${n.minimum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(n.minimum))}` : t = "Invalid input";
      break;
    case w.too_big:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "less than"} ${n.maximum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "under"} ${n.maximum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "bigint" ? t = `BigInt must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly" : n.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(n.maximum))}` : t = "Invalid input";
      break;
    case w.custom:
      t = "Invalid input";
      break;
    case w.invalid_intersection_types:
      t = "Intersection results could not be merged";
      break;
    case w.not_multiple_of:
      t = `Number must be a multiple of ${n.multipleOf}`;
      break;
    case w.not_finite:
      t = "Number must be finite";
      break;
    default:
      t = e.defaultError, Z.assertNever(n);
  }
  return { message: t };
};
let Fa = nr;
function Za() {
  return Fa;
}
const La = (n) => {
  const { data: e, path: t, errorMaps: r, issueData: s } = n, a = [...t, ...s.path || []], i = {
    ...s,
    path: a
  };
  if (s.message !== void 0)
    return {
      ...s,
      path: a,
      message: s.message
    };
  let o = "";
  const l = r.filter((c) => !!c).slice().reverse();
  for (const c of l)
    o = c(i, { data: e, defaultError: o }).message;
  return {
    ...s,
    path: a,
    message: o
  };
};
function T(n, e) {
  const t = Za(), r = La({
    issueData: e,
    data: n.data,
    path: n.path,
    errorMaps: [
      n.common.contextualErrorMap,
      // contextual error map is first priority
      n.schemaErrorMap,
      // then schema-bound map if available
      t,
      // then global override map
      t === nr ? void 0 : nr
      // then global default map
    ].filter((s) => !!s)
  });
  n.common.issues.push(r);
}
class se {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    this.value === "valid" && (this.value = "dirty");
  }
  abort() {
    this.value !== "aborted" && (this.value = "aborted");
  }
  static mergeArray(e, t) {
    const r = [];
    for (const s of t) {
      if (s.status === "aborted")
        return N;
      s.status === "dirty" && e.dirty(), r.push(s.value);
    }
    return { status: e.value, value: r };
  }
  static async mergeObjectAsync(e, t) {
    const r = [];
    for (const s of t) {
      const a = await s.key, i = await s.value;
      r.push({
        key: a,
        value: i
      });
    }
    return se.mergeObjectSync(e, r);
  }
  static mergeObjectSync(e, t) {
    const r = {};
    for (const s of t) {
      const { key: a, value: i } = s;
      if (a.status === "aborted" || i.status === "aborted")
        return N;
      a.status === "dirty" && e.dirty(), i.status === "dirty" && e.dirty(), a.value !== "__proto__" && (typeof i.value < "u" || s.alwaysSet) && (r[a.value] = i.value);
    }
    return { status: e.value, value: r };
  }
}
const N = Object.freeze({
  status: "aborted"
}), Nt = (n) => ({ status: "dirty", value: n }), fe = (n) => ({ status: "valid", value: n }), qr = (n) => n.status === "aborted", Br = (n) => n.status === "dirty", At = (n) => n.status === "valid", vn = (n) => typeof Promise < "u" && n instanceof Promise;
var A;
(function(n) {
  n.errToObj = (e) => typeof e == "string" ? { message: e } : e || {}, n.toString = (e) => typeof e == "string" ? e : e == null ? void 0 : e.message;
})(A || (A = {}));
class be {
  constructor(e, t, r, s) {
    this._cachedPath = [], this.parent = e, this.data = t, this._path = r, this._key = s;
  }
  get path() {
    return this._cachedPath.length || (Array.isArray(this._key) ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
  }
}
const Gr = (n, e) => {
  if (At(e))
    return { success: !0, data: e.value };
  if (!n.common.issues.length)
    throw new Error("Validation failed but no issues detected.");
  return {
    success: !1,
    get error() {
      if (this._error)
        return this._error;
      const t = new De(n.common.issues);
      return this._error = t, this._error;
    }
  };
};
function P(n) {
  if (!n)
    return {};
  const { errorMap: e, invalid_type_error: t, required_error: r, description: s } = n;
  if (e && (t || r))
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  return e ? { errorMap: e, description: s } : { errorMap: (i, o) => {
    const { message: l } = n;
    return i.code === "invalid_enum_value" ? { message: l ?? o.defaultError } : typeof o.data > "u" ? { message: l ?? r ?? o.defaultError } : i.code !== "invalid_type" ? { message: o.defaultError } : { message: l ?? t ?? o.defaultError };
  }, description: s };
}
class j {
  get description() {
    return this._def.description;
  }
  _getType(e) {
    return Me(e.data);
  }
  _getOrReturnCtx(e, t) {
    return t || {
      common: e.parent.common,
      data: e.data,
      parsedType: Me(e.data),
      schemaErrorMap: this._def.errorMap,
      path: e.path,
      parent: e.parent
    };
  }
  _processInputParams(e) {
    return {
      status: new se(),
      ctx: {
        common: e.parent.common,
        data: e.data,
        parsedType: Me(e.data),
        schemaErrorMap: this._def.errorMap,
        path: e.path,
        parent: e.parent
      }
    };
  }
  _parseSync(e) {
    const t = this._parse(e);
    if (vn(t))
      throw new Error("Synchronous parse encountered promise.");
    return t;
  }
  _parseAsync(e) {
    const t = this._parse(e);
    return Promise.resolve(t);
  }
  parse(e, t) {
    const r = this.safeParse(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  safeParse(e, t) {
    const r = {
      common: {
        issues: [],
        async: (t == null ? void 0 : t.async) ?? !1,
        contextualErrorMap: t == null ? void 0 : t.errorMap
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: Me(e)
    }, s = this._parseSync({ data: e, path: r.path, parent: r });
    return Gr(r, s);
  }
  "~validate"(e) {
    var r, s;
    const t = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: Me(e)
    };
    if (!this["~standard"].async)
      try {
        const a = this._parseSync({ data: e, path: [], parent: t });
        return At(a) ? {
          value: a.value
        } : {
          issues: t.common.issues
        };
      } catch (a) {
        (s = (r = a == null ? void 0 : a.message) == null ? void 0 : r.toLowerCase()) != null && s.includes("encountered") && (this["~standard"].async = !0), t.common = {
          issues: [],
          async: !0
        };
      }
    return this._parseAsync({ data: e, path: [], parent: t }).then((a) => At(a) ? {
      value: a.value
    } : {
      issues: t.common.issues
    });
  }
  async parseAsync(e, t) {
    const r = await this.safeParseAsync(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  async safeParseAsync(e, t) {
    const r = {
      common: {
        issues: [],
        contextualErrorMap: t == null ? void 0 : t.errorMap,
        async: !0
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: Me(e)
    }, s = this._parse({ data: e, path: r.path, parent: r }), a = await (vn(s) ? s : Promise.resolve(s));
    return Gr(r, a);
  }
  refine(e, t) {
    const r = (s) => typeof t == "string" || typeof t > "u" ? { message: t } : typeof t == "function" ? t(s) : t;
    return this._refinement((s, a) => {
      const i = e(s), o = () => a.addIssue({
        code: w.custom,
        ...r(s)
      });
      return typeof Promise < "u" && i instanceof Promise ? i.then((l) => l ? !0 : (o(), !1)) : i ? !0 : (o(), !1);
    });
  }
  refinement(e, t) {
    return this._refinement((r, s) => e(r) ? !0 : (s.addIssue(typeof t == "function" ? t(r, s) : t), !1));
  }
  _refinement(e) {
    return new rt({
      schema: this,
      typeName: x.ZodEffects,
      effect: { type: "refinement", refinement: e }
    });
  }
  superRefine(e) {
    return this._refinement(e);
  }
  constructor(e) {
    this.spa = this.safeParseAsync, this._def = e, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.readonly = this.readonly.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this), this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (t) => this["~validate"](t)
    };
  }
  optional() {
    return Re.create(this, this._def);
  }
  nullable() {
    return st.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return xe.create(this);
  }
  promise() {
    return In.create(this, this._def);
  }
  or(e) {
    return xn.create([this, e], this._def);
  }
  and(e) {
    return bn.create(this, e, this._def);
  }
  transform(e) {
    return new rt({
      ...P(this._def),
      schema: this,
      typeName: x.ZodEffects,
      effect: { type: "transform", transform: e }
    });
  }
  default(e) {
    const t = typeof e == "function" ? e : () => e;
    return new An({
      ...P(this._def),
      innerType: this,
      defaultValue: t,
      typeName: x.ZodDefault
    });
  }
  brand() {
    return new Fs({
      typeName: x.ZodBranded,
      type: this,
      ...P(this._def)
    });
  }
  catch(e) {
    const t = typeof e == "function" ? e : () => e;
    return new Cn({
      ...P(this._def),
      innerType: this,
      catchValue: t,
      typeName: x.ZodCatch
    });
  }
  describe(e) {
    const t = this.constructor;
    return new t({
      ...this._def,
      description: e
    });
  }
  pipe(e) {
    return Sr.create(this, e);
  }
  readonly() {
    return On.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
const Ua = /^c[^\s-]{8,}$/i, Ja = /^[0-9a-z]+$/, qa = /^[0-9A-HJKMNP-TV-Z]{26}$/i, Ba = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i, Ga = /^[a-z0-9_-]{21}$/i, za = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/, Va = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/, Ha = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i, Wa = "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";
let Bn;
const Ka = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/, Ya = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/, Xa = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/, Qa = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/, ei = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/, ti = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/, Ms = "((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))", ni = new RegExp(`^${Ms}$`);
function js(n) {
  let e = "[0-5]\\d";
  n.precision ? e = `${e}\\.\\d{${n.precision}}` : n.precision == null && (e = `${e}(\\.\\d+)?`);
  const t = n.precision ? "+" : "?";
  return `([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`;
}
function ri(n) {
  return new RegExp(`^${js(n)}$`);
}
function si(n) {
  let e = `${Ms}T${js(n)}`;
  const t = [];
  return t.push(n.local ? "Z?" : "Z"), n.offset && t.push("([+-]\\d{2}:?\\d{2})"), e = `${e}(${t.join("|")})`, new RegExp(`^${e}$`);
}
function ai(n, e) {
  return !!((e === "v4" || !e) && Ka.test(n) || (e === "v6" || !e) && Xa.test(n));
}
function ii(n, e) {
  if (!za.test(n))
    return !1;
  try {
    const [t] = n.split("."), r = t.replace(/-/g, "+").replace(/_/g, "/").padEnd(t.length + (4 - t.length % 4) % 4, "="), s = JSON.parse(atob(r));
    return !(typeof s != "object" || s === null || "typ" in s && (s == null ? void 0 : s.typ) !== "JWT" || !s.alg || e && s.alg !== e);
  } catch {
    return !1;
  }
}
function oi(n, e) {
  return !!((e === "v4" || !e) && Ya.test(n) || (e === "v6" || !e) && Qa.test(n));
}
class Ne extends j {
  _parse(e) {
    if (this._def.coerce && (e.data = String(e.data)), this._getType(e) !== I.string) {
      const a = this._getOrReturnCtx(e);
      return T(a, {
        code: w.invalid_type,
        expected: I.string,
        received: a.parsedType
      }), N;
    }
    const r = new se();
    let s;
    for (const a of this._def.checks)
      if (a.kind === "min")
        e.data.length < a.value && (s = this._getOrReturnCtx(e, s), T(s, {
          code: w.too_small,
          minimum: a.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: a.message
        }), r.dirty());
      else if (a.kind === "max")
        e.data.length > a.value && (s = this._getOrReturnCtx(e, s), T(s, {
          code: w.too_big,
          maximum: a.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: a.message
        }), r.dirty());
      else if (a.kind === "length") {
        const i = e.data.length > a.value, o = e.data.length < a.value;
        (i || o) && (s = this._getOrReturnCtx(e, s), i ? T(s, {
          code: w.too_big,
          maximum: a.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: a.message
        }) : o && T(s, {
          code: w.too_small,
          minimum: a.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: a.message
        }), r.dirty());
      } else if (a.kind === "email")
        Ha.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
          validation: "email",
          code: w.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "emoji")
        Bn || (Bn = new RegExp(Wa, "u")), Bn.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
          validation: "emoji",
          code: w.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "uuid")
        Ba.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
          validation: "uuid",
          code: w.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "nanoid")
        Ga.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
          validation: "nanoid",
          code: w.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "cuid")
        Ua.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
          validation: "cuid",
          code: w.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "cuid2")
        Ja.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
          validation: "cuid2",
          code: w.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "ulid")
        qa.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
          validation: "ulid",
          code: w.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "url")
        try {
          new URL(e.data);
        } catch {
          s = this._getOrReturnCtx(e, s), T(s, {
            validation: "url",
            code: w.invalid_string,
            message: a.message
          }), r.dirty();
        }
      else a.kind === "regex" ? (a.regex.lastIndex = 0, a.regex.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
        validation: "regex",
        code: w.invalid_string,
        message: a.message
      }), r.dirty())) : a.kind === "trim" ? e.data = e.data.trim() : a.kind === "includes" ? e.data.includes(a.value, a.position) || (s = this._getOrReturnCtx(e, s), T(s, {
        code: w.invalid_string,
        validation: { includes: a.value, position: a.position },
        message: a.message
      }), r.dirty()) : a.kind === "toLowerCase" ? e.data = e.data.toLowerCase() : a.kind === "toUpperCase" ? e.data = e.data.toUpperCase() : a.kind === "startsWith" ? e.data.startsWith(a.value) || (s = this._getOrReturnCtx(e, s), T(s, {
        code: w.invalid_string,
        validation: { startsWith: a.value },
        message: a.message
      }), r.dirty()) : a.kind === "endsWith" ? e.data.endsWith(a.value) || (s = this._getOrReturnCtx(e, s), T(s, {
        code: w.invalid_string,
        validation: { endsWith: a.value },
        message: a.message
      }), r.dirty()) : a.kind === "datetime" ? si(a).test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
        code: w.invalid_string,
        validation: "datetime",
        message: a.message
      }), r.dirty()) : a.kind === "date" ? ni.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
        code: w.invalid_string,
        validation: "date",
        message: a.message
      }), r.dirty()) : a.kind === "time" ? ri(a).test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
        code: w.invalid_string,
        validation: "time",
        message: a.message
      }), r.dirty()) : a.kind === "duration" ? Va.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
        validation: "duration",
        code: w.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "ip" ? ai(e.data, a.version) || (s = this._getOrReturnCtx(e, s), T(s, {
        validation: "ip",
        code: w.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "jwt" ? ii(e.data, a.alg) || (s = this._getOrReturnCtx(e, s), T(s, {
        validation: "jwt",
        code: w.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "cidr" ? oi(e.data, a.version) || (s = this._getOrReturnCtx(e, s), T(s, {
        validation: "cidr",
        code: w.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "base64" ? ei.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
        validation: "base64",
        code: w.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "base64url" ? ti.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
        validation: "base64url",
        code: w.invalid_string,
        message: a.message
      }), r.dirty()) : Z.assertNever(a);
    return { status: r.value, value: e.data };
  }
  _regex(e, t, r) {
    return this.refinement((s) => e.test(s), {
      validation: t,
      code: w.invalid_string,
      ...A.errToObj(r)
    });
  }
  _addCheck(e) {
    return new Ne({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  email(e) {
    return this._addCheck({ kind: "email", ...A.errToObj(e) });
  }
  url(e) {
    return this._addCheck({ kind: "url", ...A.errToObj(e) });
  }
  emoji(e) {
    return this._addCheck({ kind: "emoji", ...A.errToObj(e) });
  }
  uuid(e) {
    return this._addCheck({ kind: "uuid", ...A.errToObj(e) });
  }
  nanoid(e) {
    return this._addCheck({ kind: "nanoid", ...A.errToObj(e) });
  }
  cuid(e) {
    return this._addCheck({ kind: "cuid", ...A.errToObj(e) });
  }
  cuid2(e) {
    return this._addCheck({ kind: "cuid2", ...A.errToObj(e) });
  }
  ulid(e) {
    return this._addCheck({ kind: "ulid", ...A.errToObj(e) });
  }
  base64(e) {
    return this._addCheck({ kind: "base64", ...A.errToObj(e) });
  }
  base64url(e) {
    return this._addCheck({
      kind: "base64url",
      ...A.errToObj(e)
    });
  }
  jwt(e) {
    return this._addCheck({ kind: "jwt", ...A.errToObj(e) });
  }
  ip(e) {
    return this._addCheck({ kind: "ip", ...A.errToObj(e) });
  }
  cidr(e) {
    return this._addCheck({ kind: "cidr", ...A.errToObj(e) });
  }
  datetime(e) {
    return typeof e == "string" ? this._addCheck({
      kind: "datetime",
      precision: null,
      offset: !1,
      local: !1,
      message: e
    }) : this._addCheck({
      kind: "datetime",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      offset: (e == null ? void 0 : e.offset) ?? !1,
      local: (e == null ? void 0 : e.local) ?? !1,
      ...A.errToObj(e == null ? void 0 : e.message)
    });
  }
  date(e) {
    return this._addCheck({ kind: "date", message: e });
  }
  time(e) {
    return typeof e == "string" ? this._addCheck({
      kind: "time",
      precision: null,
      message: e
    }) : this._addCheck({
      kind: "time",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      ...A.errToObj(e == null ? void 0 : e.message)
    });
  }
  duration(e) {
    return this._addCheck({ kind: "duration", ...A.errToObj(e) });
  }
  regex(e, t) {
    return this._addCheck({
      kind: "regex",
      regex: e,
      ...A.errToObj(t)
    });
  }
  includes(e, t) {
    return this._addCheck({
      kind: "includes",
      value: e,
      position: t == null ? void 0 : t.position,
      ...A.errToObj(t == null ? void 0 : t.message)
    });
  }
  startsWith(e, t) {
    return this._addCheck({
      kind: "startsWith",
      value: e,
      ...A.errToObj(t)
    });
  }
  endsWith(e, t) {
    return this._addCheck({
      kind: "endsWith",
      value: e,
      ...A.errToObj(t)
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e,
      ...A.errToObj(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e,
      ...A.errToObj(t)
    });
  }
  length(e, t) {
    return this._addCheck({
      kind: "length",
      value: e,
      ...A.errToObj(t)
    });
  }
  /**
   * Equivalent to `.min(1)`
   */
  nonempty(e) {
    return this.min(1, A.errToObj(e));
  }
  trim() {
    return new Ne({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new Ne({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new Ne({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((e) => e.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((e) => e.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((e) => e.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((e) => e.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((e) => e.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((e) => e.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((e) => e.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((e) => e.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((e) => e.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((e) => e.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((e) => e.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((e) => e.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((e) => e.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((e) => e.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((e) => e.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((e) => e.kind === "base64url");
  }
  get minLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
Ne.create = (n) => new Ne({
  checks: [],
  typeName: x.ZodString,
  coerce: (n == null ? void 0 : n.coerce) ?? !1,
  ...P(n)
});
function ui(n, e) {
  const t = (n.toString().split(".")[1] || "").length, r = (e.toString().split(".")[1] || "").length, s = t > r ? t : r, a = Number.parseInt(n.toFixed(s).replace(".", "")), i = Number.parseInt(e.toFixed(s).replace(".", ""));
  return a % i / 10 ** s;
}
class Ct extends j {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
  }
  _parse(e) {
    if (this._def.coerce && (e.data = Number(e.data)), this._getType(e) !== I.number) {
      const a = this._getOrReturnCtx(e);
      return T(a, {
        code: w.invalid_type,
        expected: I.number,
        received: a.parsedType
      }), N;
    }
    let r;
    const s = new se();
    for (const a of this._def.checks)
      a.kind === "int" ? Z.isInteger(e.data) || (r = this._getOrReturnCtx(e, r), T(r, {
        code: w.invalid_type,
        expected: "integer",
        received: "float",
        message: a.message
      }), s.dirty()) : a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (r = this._getOrReturnCtx(e, r), T(r, {
        code: w.too_small,
        minimum: a.value,
        type: "number",
        inclusive: a.inclusive,
        exact: !1,
        message: a.message
      }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (r = this._getOrReturnCtx(e, r), T(r, {
        code: w.too_big,
        maximum: a.value,
        type: "number",
        inclusive: a.inclusive,
        exact: !1,
        message: a.message
      }), s.dirty()) : a.kind === "multipleOf" ? ui(e.data, a.value) !== 0 && (r = this._getOrReturnCtx(e, r), T(r, {
        code: w.not_multiple_of,
        multipleOf: a.value,
        message: a.message
      }), s.dirty()) : a.kind === "finite" ? Number.isFinite(e.data) || (r = this._getOrReturnCtx(e, r), T(r, {
        code: w.not_finite,
        message: a.message
      }), s.dirty()) : Z.assertNever(a);
    return { status: s.value, value: e.data };
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, A.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, A.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, A.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, A.toString(t));
  }
  setLimit(e, t, r, s) {
    return new Ct({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: A.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new Ct({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  int(e) {
    return this._addCheck({
      kind: "int",
      message: A.toString(e)
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !1,
      message: A.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !1,
      message: A.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !0,
      message: A.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !0,
      message: A.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: A.toString(t)
    });
  }
  finite(e) {
    return this._addCheck({
      kind: "finite",
      message: A.toString(e)
    });
  }
  safe(e) {
    return this._addCheck({
      kind: "min",
      inclusive: !0,
      value: Number.MIN_SAFE_INTEGER,
      message: A.toString(e)
    })._addCheck({
      kind: "max",
      inclusive: !0,
      value: Number.MAX_SAFE_INTEGER,
      message: A.toString(e)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
  get isInt() {
    return !!this._def.checks.find((e) => e.kind === "int" || e.kind === "multipleOf" && Z.isInteger(e.value));
  }
  get isFinite() {
    let e = null, t = null;
    for (const r of this._def.checks) {
      if (r.kind === "finite" || r.kind === "int" || r.kind === "multipleOf")
        return !0;
      r.kind === "min" ? (t === null || r.value > t) && (t = r.value) : r.kind === "max" && (e === null || r.value < e) && (e = r.value);
    }
    return Number.isFinite(t) && Number.isFinite(e);
  }
}
Ct.create = (n) => new Ct({
  checks: [],
  typeName: x.ZodNumber,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...P(n)
});
class Pt extends j {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte;
  }
  _parse(e) {
    if (this._def.coerce)
      try {
        e.data = BigInt(e.data);
      } catch {
        return this._getInvalidInput(e);
      }
    if (this._getType(e) !== I.bigint)
      return this._getInvalidInput(e);
    let r;
    const s = new se();
    for (const a of this._def.checks)
      a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (r = this._getOrReturnCtx(e, r), T(r, {
        code: w.too_small,
        type: "bigint",
        minimum: a.value,
        inclusive: a.inclusive,
        message: a.message
      }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (r = this._getOrReturnCtx(e, r), T(r, {
        code: w.too_big,
        type: "bigint",
        maximum: a.value,
        inclusive: a.inclusive,
        message: a.message
      }), s.dirty()) : a.kind === "multipleOf" ? e.data % a.value !== BigInt(0) && (r = this._getOrReturnCtx(e, r), T(r, {
        code: w.not_multiple_of,
        multipleOf: a.value,
        message: a.message
      }), s.dirty()) : Z.assertNever(a);
    return { status: s.value, value: e.data };
  }
  _getInvalidInput(e) {
    const t = this._getOrReturnCtx(e);
    return T(t, {
      code: w.invalid_type,
      expected: I.bigint,
      received: t.parsedType
    }), N;
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, A.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, A.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, A.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, A.toString(t));
  }
  setLimit(e, t, r, s) {
    return new Pt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: A.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new Pt({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !1,
      message: A.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !1,
      message: A.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !0,
      message: A.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !0,
      message: A.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: A.toString(t)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
Pt.create = (n) => new Pt({
  checks: [],
  typeName: x.ZodBigInt,
  coerce: (n == null ? void 0 : n.coerce) ?? !1,
  ...P(n)
});
class rr extends j {
  _parse(e) {
    if (this._def.coerce && (e.data = !!e.data), this._getType(e) !== I.boolean) {
      const r = this._getOrReturnCtx(e);
      return T(r, {
        code: w.invalid_type,
        expected: I.boolean,
        received: r.parsedType
      }), N;
    }
    return fe(e.data);
  }
}
rr.create = (n) => new rr({
  typeName: x.ZodBoolean,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...P(n)
});
class wn extends j {
  _parse(e) {
    if (this._def.coerce && (e.data = new Date(e.data)), this._getType(e) !== I.date) {
      const a = this._getOrReturnCtx(e);
      return T(a, {
        code: w.invalid_type,
        expected: I.date,
        received: a.parsedType
      }), N;
    }
    if (Number.isNaN(e.data.getTime())) {
      const a = this._getOrReturnCtx(e);
      return T(a, {
        code: w.invalid_date
      }), N;
    }
    const r = new se();
    let s;
    for (const a of this._def.checks)
      a.kind === "min" ? e.data.getTime() < a.value && (s = this._getOrReturnCtx(e, s), T(s, {
        code: w.too_small,
        message: a.message,
        inclusive: !0,
        exact: !1,
        minimum: a.value,
        type: "date"
      }), r.dirty()) : a.kind === "max" ? e.data.getTime() > a.value && (s = this._getOrReturnCtx(e, s), T(s, {
        code: w.too_big,
        message: a.message,
        inclusive: !0,
        exact: !1,
        maximum: a.value,
        type: "date"
      }), r.dirty()) : Z.assertNever(a);
    return {
      status: r.value,
      value: new Date(e.data.getTime())
    };
  }
  _addCheck(e) {
    return new wn({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e.getTime(),
      message: A.toString(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e.getTime(),
      message: A.toString(t)
    });
  }
  get minDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
  get maxDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
}
wn.create = (n) => new wn({
  checks: [],
  coerce: (n == null ? void 0 : n.coerce) || !1,
  typeName: x.ZodDate,
  ...P(n)
});
class zr extends j {
  _parse(e) {
    if (this._getType(e) !== I.symbol) {
      const r = this._getOrReturnCtx(e);
      return T(r, {
        code: w.invalid_type,
        expected: I.symbol,
        received: r.parsedType
      }), N;
    }
    return fe(e.data);
  }
}
zr.create = (n) => new zr({
  typeName: x.ZodSymbol,
  ...P(n)
});
class sr extends j {
  _parse(e) {
    if (this._getType(e) !== I.undefined) {
      const r = this._getOrReturnCtx(e);
      return T(r, {
        code: w.invalid_type,
        expected: I.undefined,
        received: r.parsedType
      }), N;
    }
    return fe(e.data);
  }
}
sr.create = (n) => new sr({
  typeName: x.ZodUndefined,
  ...P(n)
});
class ar extends j {
  _parse(e) {
    if (this._getType(e) !== I.null) {
      const r = this._getOrReturnCtx(e);
      return T(r, {
        code: w.invalid_type,
        expected: I.null,
        received: r.parsedType
      }), N;
    }
    return fe(e.data);
  }
}
ar.create = (n) => new ar({
  typeName: x.ZodNull,
  ...P(n)
});
class ir extends j {
  constructor() {
    super(...arguments), this._any = !0;
  }
  _parse(e) {
    return fe(e.data);
  }
}
ir.create = (n) => new ir({
  typeName: x.ZodAny,
  ...P(n)
});
class Vr extends j {
  constructor() {
    super(...arguments), this._unknown = !0;
  }
  _parse(e) {
    return fe(e.data);
  }
}
Vr.create = (n) => new Vr({
  typeName: x.ZodUnknown,
  ...P(n)
});
class Ue extends j {
  _parse(e) {
    const t = this._getOrReturnCtx(e);
    return T(t, {
      code: w.invalid_type,
      expected: I.never,
      received: t.parsedType
    }), N;
  }
}
Ue.create = (n) => new Ue({
  typeName: x.ZodNever,
  ...P(n)
});
class Hr extends j {
  _parse(e) {
    if (this._getType(e) !== I.undefined) {
      const r = this._getOrReturnCtx(e);
      return T(r, {
        code: w.invalid_type,
        expected: I.void,
        received: r.parsedType
      }), N;
    }
    return fe(e.data);
  }
}
Hr.create = (n) => new Hr({
  typeName: x.ZodVoid,
  ...P(n)
});
class xe extends j {
  _parse(e) {
    const { ctx: t, status: r } = this._processInputParams(e), s = this._def;
    if (t.parsedType !== I.array)
      return T(t, {
        code: w.invalid_type,
        expected: I.array,
        received: t.parsedType
      }), N;
    if (s.exactLength !== null) {
      const i = t.data.length > s.exactLength.value, o = t.data.length < s.exactLength.value;
      (i || o) && (T(t, {
        code: i ? w.too_big : w.too_small,
        minimum: o ? s.exactLength.value : void 0,
        maximum: i ? s.exactLength.value : void 0,
        type: "array",
        inclusive: !0,
        exact: !0,
        message: s.exactLength.message
      }), r.dirty());
    }
    if (s.minLength !== null && t.data.length < s.minLength.value && (T(t, {
      code: w.too_small,
      minimum: s.minLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.minLength.message
    }), r.dirty()), s.maxLength !== null && t.data.length > s.maxLength.value && (T(t, {
      code: w.too_big,
      maximum: s.maxLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.maxLength.message
    }), r.dirty()), t.common.async)
      return Promise.all([...t.data].map((i, o) => s.type._parseAsync(new be(t, i, t.path, o)))).then((i) => se.mergeArray(r, i));
    const a = [...t.data].map((i, o) => s.type._parseSync(new be(t, i, t.path, o)));
    return se.mergeArray(r, a);
  }
  get element() {
    return this._def.type;
  }
  min(e, t) {
    return new xe({
      ...this._def,
      minLength: { value: e, message: A.toString(t) }
    });
  }
  max(e, t) {
    return new xe({
      ...this._def,
      maxLength: { value: e, message: A.toString(t) }
    });
  }
  length(e, t) {
    return new xe({
      ...this._def,
      exactLength: { value: e, message: A.toString(t) }
    });
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
xe.create = (n, e) => new xe({
  type: n,
  minLength: null,
  maxLength: null,
  exactLength: null,
  typeName: x.ZodArray,
  ...P(e)
});
function dt(n) {
  if (n instanceof H) {
    const e = {};
    for (const t in n.shape) {
      const r = n.shape[t];
      e[t] = Re.create(dt(r));
    }
    return new H({
      ...n._def,
      shape: () => e
    });
  } else return n instanceof xe ? new xe({
    ...n._def,
    type: dt(n.element)
  }) : n instanceof Re ? Re.create(dt(n.unwrap())) : n instanceof st ? st.create(dt(n.unwrap())) : n instanceof tt ? tt.create(n.items.map((e) => dt(e))) : n;
}
class H extends j {
  constructor() {
    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const e = this._def.shape(), t = Z.objectKeys(e);
    return this._cached = { shape: e, keys: t }, this._cached;
  }
  _parse(e) {
    if (this._getType(e) !== I.object) {
      const c = this._getOrReturnCtx(e);
      return T(c, {
        code: w.invalid_type,
        expected: I.object,
        received: c.parsedType
      }), N;
    }
    const { status: r, ctx: s } = this._processInputParams(e), { shape: a, keys: i } = this._getCached(), o = [];
    if (!(this._def.catchall instanceof Ue && this._def.unknownKeys === "strip"))
      for (const c in s.data)
        i.includes(c) || o.push(c);
    const l = [];
    for (const c of i) {
      const p = a[c], f = s.data[c];
      l.push({
        key: { status: "valid", value: c },
        value: p._parse(new be(s, f, s.path, c)),
        alwaysSet: c in s.data
      });
    }
    if (this._def.catchall instanceof Ue) {
      const c = this._def.unknownKeys;
      if (c === "passthrough")
        for (const p of o)
          l.push({
            key: { status: "valid", value: p },
            value: { status: "valid", value: s.data[p] }
          });
      else if (c === "strict")
        o.length > 0 && (T(s, {
          code: w.unrecognized_keys,
          keys: o
        }), r.dirty());
      else if (c !== "strip") throw new Error("Internal ZodObject error: invalid unknownKeys value.");
    } else {
      const c = this._def.catchall;
      for (const p of o) {
        const f = s.data[p];
        l.push({
          key: { status: "valid", value: p },
          value: c._parse(
            new be(s, f, s.path, p)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: p in s.data
        });
      }
    }
    return s.common.async ? Promise.resolve().then(async () => {
      const c = [];
      for (const p of l) {
        const f = await p.key, h = await p.value;
        c.push({
          key: f,
          value: h,
          alwaysSet: p.alwaysSet
        });
      }
      return c;
    }).then((c) => se.mergeObjectSync(r, c)) : se.mergeObjectSync(r, l);
  }
  get shape() {
    return this._def.shape();
  }
  strict(e) {
    return A.errToObj, new H({
      ...this._def,
      unknownKeys: "strict",
      ...e !== void 0 ? {
        errorMap: (t, r) => {
          var a, i;
          const s = ((i = (a = this._def).errorMap) == null ? void 0 : i.call(a, t, r).message) ?? r.defaultError;
          return t.code === "unrecognized_keys" ? {
            message: A.errToObj(e).message ?? s
          } : {
            message: s
          };
        }
      } : {}
    });
  }
  strip() {
    return new H({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new H({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(e) {
    return new H({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...e
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(e) {
    return new H({
      unknownKeys: e._def.unknownKeys,
      catchall: e._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...e._def.shape()
      }),
      typeName: x.ZodObject
    });
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(e, t) {
    return this.augment({ [e]: t });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(e) {
    return new H({
      ...this._def,
      catchall: e
    });
  }
  pick(e) {
    const t = {};
    for (const r of Z.objectKeys(e))
      e[r] && this.shape[r] && (t[r] = this.shape[r]);
    return new H({
      ...this._def,
      shape: () => t
    });
  }
  omit(e) {
    const t = {};
    for (const r of Z.objectKeys(this.shape))
      e[r] || (t[r] = this.shape[r]);
    return new H({
      ...this._def,
      shape: () => t
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return dt(this);
  }
  partial(e) {
    const t = {};
    for (const r of Z.objectKeys(this.shape)) {
      const s = this.shape[r];
      e && !e[r] ? t[r] = s : t[r] = s.optional();
    }
    return new H({
      ...this._def,
      shape: () => t
    });
  }
  required(e) {
    const t = {};
    for (const r of Z.objectKeys(this.shape))
      if (e && !e[r])
        t[r] = this.shape[r];
      else {
        let a = this.shape[r];
        for (; a instanceof Re; )
          a = a._def.innerType;
        t[r] = a;
      }
    return new H({
      ...this._def,
      shape: () => t
    });
  }
  keyof() {
    return $s(Z.objectKeys(this.shape));
  }
}
H.create = (n, e) => new H({
  shape: () => n,
  unknownKeys: "strip",
  catchall: Ue.create(),
  typeName: x.ZodObject,
  ...P(e)
});
H.strictCreate = (n, e) => new H({
  shape: () => n,
  unknownKeys: "strict",
  catchall: Ue.create(),
  typeName: x.ZodObject,
  ...P(e)
});
H.lazycreate = (n, e) => new H({
  shape: n,
  unknownKeys: "strip",
  catchall: Ue.create(),
  typeName: x.ZodObject,
  ...P(e)
});
class xn extends j {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = this._def.options;
    function s(a) {
      for (const o of a)
        if (o.result.status === "valid")
          return o.result;
      for (const o of a)
        if (o.result.status === "dirty")
          return t.common.issues.push(...o.ctx.common.issues), o.result;
      const i = a.map((o) => new De(o.ctx.common.issues));
      return T(t, {
        code: w.invalid_union,
        unionErrors: i
      }), N;
    }
    if (t.common.async)
      return Promise.all(r.map(async (a) => {
        const i = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await a._parseAsync({
            data: t.data,
            path: t.path,
            parent: i
          }),
          ctx: i
        };
      })).then(s);
    {
      let a;
      const i = [];
      for (const l of r) {
        const c = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        }, p = l._parseSync({
          data: t.data,
          path: t.path,
          parent: c
        });
        if (p.status === "valid")
          return p;
        p.status === "dirty" && !a && (a = { result: p, ctx: c }), c.common.issues.length && i.push(c.common.issues);
      }
      if (a)
        return t.common.issues.push(...a.ctx.common.issues), a.result;
      const o = i.map((l) => new De(l));
      return T(t, {
        code: w.invalid_union,
        unionErrors: o
      }), N;
    }
  }
  get options() {
    return this._def.options;
  }
}
xn.create = (n, e) => new xn({
  options: n,
  typeName: x.ZodUnion,
  ...P(e)
});
const Ie = (n) => n instanceof Tn ? Ie(n.schema) : n instanceof rt ? Ie(n.innerType()) : n instanceof kn ? [n.value] : n instanceof nt ? n.options : n instanceof ur ? Z.objectValues(n.enum) : n instanceof An ? Ie(n._def.innerType) : n instanceof sr ? [void 0] : n instanceof ar ? [null] : n instanceof Re ? [void 0, ...Ie(n.unwrap())] : n instanceof st ? [null, ...Ie(n.unwrap())] : n instanceof Fs || n instanceof On ? Ie(n.unwrap()) : n instanceof Cn ? Ie(n._def.innerType) : [];
class br extends j {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== I.object)
      return T(t, {
        code: w.invalid_type,
        expected: I.object,
        received: t.parsedType
      }), N;
    const r = this.discriminator, s = t.data[r], a = this.optionsMap.get(s);
    return a ? t.common.async ? a._parseAsync({
      data: t.data,
      path: t.path,
      parent: t
    }) : a._parseSync({
      data: t.data,
      path: t.path,
      parent: t
    }) : (T(t, {
      code: w.invalid_union_discriminator,
      options: Array.from(this.optionsMap.keys()),
      path: [r]
    }), N);
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(e, t, r) {
    const s = /* @__PURE__ */ new Map();
    for (const a of t) {
      const i = Ie(a.shape[e]);
      if (!i.length)
        throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);
      for (const o of i) {
        if (s.has(o))
          throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(o)}`);
        s.set(o, a);
      }
    }
    return new br({
      typeName: x.ZodDiscriminatedUnion,
      discriminator: e,
      options: t,
      optionsMap: s,
      ...P(r)
    });
  }
}
function or(n, e) {
  const t = Me(n), r = Me(e);
  if (n === e)
    return { valid: !0, data: n };
  if (t === I.object && r === I.object) {
    const s = Z.objectKeys(e), a = Z.objectKeys(n).filter((o) => s.indexOf(o) !== -1), i = { ...n, ...e };
    for (const o of a) {
      const l = or(n[o], e[o]);
      if (!l.valid)
        return { valid: !1 };
      i[o] = l.data;
    }
    return { valid: !0, data: i };
  } else if (t === I.array && r === I.array) {
    if (n.length !== e.length)
      return { valid: !1 };
    const s = [];
    for (let a = 0; a < n.length; a++) {
      const i = n[a], o = e[a], l = or(i, o);
      if (!l.valid)
        return { valid: !1 };
      s.push(l.data);
    }
    return { valid: !0, data: s };
  } else return t === I.date && r === I.date && +n == +e ? { valid: !0, data: n } : { valid: !1 };
}
class bn extends j {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = (a, i) => {
      if (qr(a) || qr(i))
        return N;
      const o = or(a.value, i.value);
      return o.valid ? ((Br(a) || Br(i)) && t.dirty(), { status: t.value, value: o.data }) : (T(r, {
        code: w.invalid_intersection_types
      }), N);
    };
    return r.common.async ? Promise.all([
      this._def.left._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      }),
      this._def.right._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      })
    ]).then(([a, i]) => s(a, i)) : s(this._def.left._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }), this._def.right._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }));
  }
}
bn.create = (n, e, t) => new bn({
  left: n,
  right: e,
  typeName: x.ZodIntersection,
  ...P(t)
});
class tt extends j {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== I.array)
      return T(r, {
        code: w.invalid_type,
        expected: I.array,
        received: r.parsedType
      }), N;
    if (r.data.length < this._def.items.length)
      return T(r, {
        code: w.too_small,
        minimum: this._def.items.length,
        inclusive: !0,
        exact: !1,
        type: "array"
      }), N;
    !this._def.rest && r.data.length > this._def.items.length && (T(r, {
      code: w.too_big,
      maximum: this._def.items.length,
      inclusive: !0,
      exact: !1,
      type: "array"
    }), t.dirty());
    const a = [...r.data].map((i, o) => {
      const l = this._def.items[o] || this._def.rest;
      return l ? l._parse(new be(r, i, r.path, o)) : null;
    }).filter((i) => !!i);
    return r.common.async ? Promise.all(a).then((i) => se.mergeArray(t, i)) : se.mergeArray(t, a);
  }
  get items() {
    return this._def.items;
  }
  rest(e) {
    return new tt({
      ...this._def,
      rest: e
    });
  }
}
tt.create = (n, e) => {
  if (!Array.isArray(n))
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  return new tt({
    items: n,
    typeName: x.ZodTuple,
    rest: null,
    ...P(e)
  });
};
class Sn extends j {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== I.object)
      return T(r, {
        code: w.invalid_type,
        expected: I.object,
        received: r.parsedType
      }), N;
    const s = [], a = this._def.keyType, i = this._def.valueType;
    for (const o in r.data)
      s.push({
        key: a._parse(new be(r, o, r.path, o)),
        value: i._parse(new be(r, r.data[o], r.path, o)),
        alwaysSet: o in r.data
      });
    return r.common.async ? se.mergeObjectAsync(t, s) : se.mergeObjectSync(t, s);
  }
  get element() {
    return this._def.valueType;
  }
  static create(e, t, r) {
    return t instanceof j ? new Sn({
      keyType: e,
      valueType: t,
      typeName: x.ZodRecord,
      ...P(r)
    }) : new Sn({
      keyType: Ne.create(),
      valueType: e,
      typeName: x.ZodRecord,
      ...P(t)
    });
  }
}
class Wr extends j {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== I.map)
      return T(r, {
        code: w.invalid_type,
        expected: I.map,
        received: r.parsedType
      }), N;
    const s = this._def.keyType, a = this._def.valueType, i = [...r.data.entries()].map(([o, l], c) => ({
      key: s._parse(new be(r, o, r.path, [c, "key"])),
      value: a._parse(new be(r, l, r.path, [c, "value"]))
    }));
    if (r.common.async) {
      const o = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const l of i) {
          const c = await l.key, p = await l.value;
          if (c.status === "aborted" || p.status === "aborted")
            return N;
          (c.status === "dirty" || p.status === "dirty") && t.dirty(), o.set(c.value, p.value);
        }
        return { status: t.value, value: o };
      });
    } else {
      const o = /* @__PURE__ */ new Map();
      for (const l of i) {
        const c = l.key, p = l.value;
        if (c.status === "aborted" || p.status === "aborted")
          return N;
        (c.status === "dirty" || p.status === "dirty") && t.dirty(), o.set(c.value, p.value);
      }
      return { status: t.value, value: o };
    }
  }
}
Wr.create = (n, e, t) => new Wr({
  valueType: e,
  keyType: n,
  typeName: x.ZodMap,
  ...P(t)
});
class Mt extends j {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== I.set)
      return T(r, {
        code: w.invalid_type,
        expected: I.set,
        received: r.parsedType
      }), N;
    const s = this._def;
    s.minSize !== null && r.data.size < s.minSize.value && (T(r, {
      code: w.too_small,
      minimum: s.minSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.minSize.message
    }), t.dirty()), s.maxSize !== null && r.data.size > s.maxSize.value && (T(r, {
      code: w.too_big,
      maximum: s.maxSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.maxSize.message
    }), t.dirty());
    const a = this._def.valueType;
    function i(l) {
      const c = /* @__PURE__ */ new Set();
      for (const p of l) {
        if (p.status === "aborted")
          return N;
        p.status === "dirty" && t.dirty(), c.add(p.value);
      }
      return { status: t.value, value: c };
    }
    const o = [...r.data.values()].map((l, c) => a._parse(new be(r, l, r.path, c)));
    return r.common.async ? Promise.all(o).then((l) => i(l)) : i(o);
  }
  min(e, t) {
    return new Mt({
      ...this._def,
      minSize: { value: e, message: A.toString(t) }
    });
  }
  max(e, t) {
    return new Mt({
      ...this._def,
      maxSize: { value: e, message: A.toString(t) }
    });
  }
  size(e, t) {
    return this.min(e, t).max(e, t);
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
Mt.create = (n, e) => new Mt({
  valueType: n,
  minSize: null,
  maxSize: null,
  typeName: x.ZodSet,
  ...P(e)
});
class Tn extends j {
  get schema() {
    return this._def.getter();
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    return this._def.getter()._parse({ data: t.data, path: t.path, parent: t });
  }
}
Tn.create = (n, e) => new Tn({
  getter: n,
  typeName: x.ZodLazy,
  ...P(e)
});
class kn extends j {
  _parse(e) {
    if (e.data !== this._def.value) {
      const t = this._getOrReturnCtx(e);
      return T(t, {
        received: t.data,
        code: w.invalid_literal,
        expected: this._def.value
      }), N;
    }
    return { status: "valid", value: e.data };
  }
  get value() {
    return this._def.value;
  }
}
kn.create = (n, e) => new kn({
  value: n,
  typeName: x.ZodLiteral,
  ...P(e)
});
function $s(n, e) {
  return new nt({
    values: n,
    typeName: x.ZodEnum,
    ...P(e)
  });
}
class nt extends j {
  _parse(e) {
    if (typeof e.data != "string") {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return T(t, {
        expected: Z.joinValues(r),
        received: t.parsedType,
        code: w.invalid_type
      }), N;
    }
    if (this._cache || (this._cache = new Set(this._def.values)), !this._cache.has(e.data)) {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return T(t, {
        received: t.data,
        code: w.invalid_enum_value,
        options: r
      }), N;
    }
    return fe(e.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Values() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  extract(e, t = this._def) {
    return nt.create(e, {
      ...this._def,
      ...t
    });
  }
  exclude(e, t = this._def) {
    return nt.create(this.options.filter((r) => !e.includes(r)), {
      ...this._def,
      ...t
    });
  }
}
nt.create = $s;
class ur extends j {
  _parse(e) {
    const t = Z.getValidEnumValues(this._def.values), r = this._getOrReturnCtx(e);
    if (r.parsedType !== I.string && r.parsedType !== I.number) {
      const s = Z.objectValues(t);
      return T(r, {
        expected: Z.joinValues(s),
        received: r.parsedType,
        code: w.invalid_type
      }), N;
    }
    if (this._cache || (this._cache = new Set(Z.getValidEnumValues(this._def.values))), !this._cache.has(e.data)) {
      const s = Z.objectValues(t);
      return T(r, {
        received: r.data,
        code: w.invalid_enum_value,
        options: s
      }), N;
    }
    return fe(e.data);
  }
  get enum() {
    return this._def.values;
  }
}
ur.create = (n, e) => new ur({
  values: n,
  typeName: x.ZodNativeEnum,
  ...P(e)
});
class In extends j {
  unwrap() {
    return this._def.type;
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== I.promise && t.common.async === !1)
      return T(t, {
        code: w.invalid_type,
        expected: I.promise,
        received: t.parsedType
      }), N;
    const r = t.parsedType === I.promise ? t.data : Promise.resolve(t.data);
    return fe(r.then((s) => this._def.type.parseAsync(s, {
      path: t.path,
      errorMap: t.common.contextualErrorMap
    })));
  }
}
In.create = (n, e) => new In({
  type: n,
  typeName: x.ZodPromise,
  ...P(e)
});
class rt extends j {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === x.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = this._def.effect || null, a = {
      addIssue: (i) => {
        T(r, i), i.fatal ? t.abort() : t.dirty();
      },
      get path() {
        return r.path;
      }
    };
    if (a.addIssue = a.addIssue.bind(a), s.type === "preprocess") {
      const i = s.transform(r.data, a);
      if (r.common.async)
        return Promise.resolve(i).then(async (o) => {
          if (t.value === "aborted")
            return N;
          const l = await this._def.schema._parseAsync({
            data: o,
            path: r.path,
            parent: r
          });
          return l.status === "aborted" ? N : l.status === "dirty" || t.value === "dirty" ? Nt(l.value) : l;
        });
      {
        if (t.value === "aborted")
          return N;
        const o = this._def.schema._parseSync({
          data: i,
          path: r.path,
          parent: r
        });
        return o.status === "aborted" ? N : o.status === "dirty" || t.value === "dirty" ? Nt(o.value) : o;
      }
    }
    if (s.type === "refinement") {
      const i = (o) => {
        const l = s.refinement(o, a);
        if (r.common.async)
          return Promise.resolve(l);
        if (l instanceof Promise)
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        return o;
      };
      if (r.common.async === !1) {
        const o = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return o.status === "aborted" ? N : (o.status === "dirty" && t.dirty(), i(o.value), { status: t.value, value: o.value });
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((o) => o.status === "aborted" ? N : (o.status === "dirty" && t.dirty(), i(o.value).then(() => ({ status: t.value, value: o.value }))));
    }
    if (s.type === "transform")
      if (r.common.async === !1) {
        const i = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        if (!At(i))
          return N;
        const o = s.transform(i.value, a);
        if (o instanceof Promise)
          throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
        return { status: t.value, value: o };
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((i) => At(i) ? Promise.resolve(s.transform(i.value, a)).then((o) => ({
          status: t.value,
          value: o
        })) : N);
    Z.assertNever(s);
  }
}
rt.create = (n, e, t) => new rt({
  schema: n,
  typeName: x.ZodEffects,
  effect: e,
  ...P(t)
});
rt.createWithPreprocess = (n, e, t) => new rt({
  schema: e,
  effect: { type: "preprocess", transform: n },
  typeName: x.ZodEffects,
  ...P(t)
});
class Re extends j {
  _parse(e) {
    return this._getType(e) === I.undefined ? fe(void 0) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
Re.create = (n, e) => new Re({
  innerType: n,
  typeName: x.ZodOptional,
  ...P(e)
});
class st extends j {
  _parse(e) {
    return this._getType(e) === I.null ? fe(null) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
st.create = (n, e) => new st({
  innerType: n,
  typeName: x.ZodNullable,
  ...P(e)
});
class An extends j {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    let r = t.data;
    return t.parsedType === I.undefined && (r = this._def.defaultValue()), this._def.innerType._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
An.create = (n, e) => new An({
  innerType: n,
  typeName: x.ZodDefault,
  defaultValue: typeof e.default == "function" ? e.default : () => e.default,
  ...P(e)
});
class Cn extends j {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = {
      ...t,
      common: {
        ...t.common,
        issues: []
      }
    }, s = this._def.innerType._parse({
      data: r.data,
      path: r.path,
      parent: {
        ...r
      }
    });
    return vn(s) ? s.then((a) => ({
      status: "valid",
      value: a.status === "valid" ? a.value : this._def.catchValue({
        get error() {
          return new De(r.common.issues);
        },
        input: r.data
      })
    })) : {
      status: "valid",
      value: s.status === "valid" ? s.value : this._def.catchValue({
        get error() {
          return new De(r.common.issues);
        },
        input: r.data
      })
    };
  }
  removeCatch() {
    return this._def.innerType;
  }
}
Cn.create = (n, e) => new Cn({
  innerType: n,
  typeName: x.ZodCatch,
  catchValue: typeof e.catch == "function" ? e.catch : () => e.catch,
  ...P(e)
});
class Kr extends j {
  _parse(e) {
    if (this._getType(e) !== I.nan) {
      const r = this._getOrReturnCtx(e);
      return T(r, {
        code: w.invalid_type,
        expected: I.nan,
        received: r.parsedType
      }), N;
    }
    return { status: "valid", value: e.data };
  }
}
Kr.create = (n) => new Kr({
  typeName: x.ZodNaN,
  ...P(n)
});
class Fs extends j {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = t.data;
    return this._def.type._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  unwrap() {
    return this._def.type;
  }
}
class Sr extends j {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.common.async)
      return (async () => {
        const a = await this._def.in._parseAsync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return a.status === "aborted" ? N : a.status === "dirty" ? (t.dirty(), Nt(a.value)) : this._def.out._parseAsync({
          data: a.value,
          path: r.path,
          parent: r
        });
      })();
    {
      const s = this._def.in._parseSync({
        data: r.data,
        path: r.path,
        parent: r
      });
      return s.status === "aborted" ? N : s.status === "dirty" ? (t.dirty(), {
        status: "dirty",
        value: s.value
      }) : this._def.out._parseSync({
        data: s.value,
        path: r.path,
        parent: r
      });
    }
  }
  static create(e, t) {
    return new Sr({
      in: e,
      out: t,
      typeName: x.ZodPipeline
    });
  }
}
class On extends j {
  _parse(e) {
    const t = this._def.innerType._parse(e), r = (s) => (At(s) && (s.value = Object.freeze(s.value)), s);
    return vn(t) ? t.then((s) => r(s)) : r(t);
  }
  unwrap() {
    return this._def.innerType;
  }
}
On.create = (n, e) => new On({
  innerType: n,
  typeName: x.ZodReadonly,
  ...P(e)
});
var x;
(function(n) {
  n.ZodString = "ZodString", n.ZodNumber = "ZodNumber", n.ZodNaN = "ZodNaN", n.ZodBigInt = "ZodBigInt", n.ZodBoolean = "ZodBoolean", n.ZodDate = "ZodDate", n.ZodSymbol = "ZodSymbol", n.ZodUndefined = "ZodUndefined", n.ZodNull = "ZodNull", n.ZodAny = "ZodAny", n.ZodUnknown = "ZodUnknown", n.ZodNever = "ZodNever", n.ZodVoid = "ZodVoid", n.ZodArray = "ZodArray", n.ZodObject = "ZodObject", n.ZodUnion = "ZodUnion", n.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", n.ZodIntersection = "ZodIntersection", n.ZodTuple = "ZodTuple", n.ZodRecord = "ZodRecord", n.ZodMap = "ZodMap", n.ZodSet = "ZodSet", n.ZodFunction = "ZodFunction", n.ZodLazy = "ZodLazy", n.ZodLiteral = "ZodLiteral", n.ZodEnum = "ZodEnum", n.ZodEffects = "ZodEffects", n.ZodNativeEnum = "ZodNativeEnum", n.ZodOptional = "ZodOptional", n.ZodNullable = "ZodNullable", n.ZodDefault = "ZodDefault", n.ZodCatch = "ZodCatch", n.ZodPromise = "ZodPromise", n.ZodBranded = "ZodBranded", n.ZodPipeline = "ZodPipeline", n.ZodReadonly = "ZodReadonly";
})(x || (x = {}));
const d = Ne.create, C = Ct.create, Dt = rr.create, F = ir.create;
Ue.create;
const U = xe.create, g = H.create, Zs = xn.create, le = br.create;
bn.create;
tt.create;
const Y = Sn.create, ci = Tn.create, m = kn.create, re = nt.create;
In.create;
Re.create;
st.create;
function di() {
  return {};
}
function li(n, e) {
  var r, s;
  const t = {
    type: "array"
  };
  return ((s = (r = n.type) == null ? void 0 : r._def) == null ? void 0 : s.typeName) !== x.ZodAny && (t.items = J(n.type._def, {
    ...e,
    currentPath: [...e.currentPath, "items"]
  })), n.minLength && q(t, "minItems", n.minLength.value, n.minLength.message, e), n.maxLength && q(t, "maxItems", n.maxLength.value, n.maxLength.message, e), n.exactLength && (q(t, "minItems", n.exactLength.value, n.exactLength.message, e), q(t, "maxItems", n.exactLength.value, n.exactLength.message, e)), t;
}
function pi(n, e) {
  const t = {
    type: "integer",
    format: "int64"
  };
  if (!n.checks)
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "min":
        e.target === "jsonSchema7" ? r.inclusive ? q(t, "minimum", r.value, r.message, e) : q(t, "exclusiveMinimum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMinimum = !0), q(t, "minimum", r.value, r.message, e));
        break;
      case "max":
        e.target === "jsonSchema7" ? r.inclusive ? q(t, "maximum", r.value, r.message, e) : q(t, "exclusiveMaximum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMaximum = !0), q(t, "maximum", r.value, r.message, e));
        break;
      case "multipleOf":
        q(t, "multipleOf", r.value, r.message, e);
        break;
    }
  return t;
}
function fi() {
  return {
    type: "boolean"
  };
}
function hi(n, e) {
  return J(n.type._def, e);
}
const mi = (n, e) => J(n.innerType._def, e);
function Ls(n, e, t) {
  const r = t ?? e.dateStrategy;
  if (Array.isArray(r))
    return {
      anyOf: r.map((s, a) => Ls(n, e, s))
    };
  switch (r) {
    case "string":
    case "format:date-time":
      return {
        type: "string",
        format: "date-time"
      };
    case "format:date":
      return {
        type: "string",
        format: "date"
      };
    case "integer":
      return gi(n, e);
  }
}
const gi = (n, e) => {
  const t = {
    type: "integer",
    format: "unix-time"
  };
  if (e.target === "openApi3")
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "min":
        q(
          t,
          "minimum",
          r.value,
          // This is in milliseconds
          r.message,
          e
        );
        break;
      case "max":
        q(
          t,
          "maximum",
          r.value,
          // This is in milliseconds
          r.message,
          e
        );
        break;
    }
  return t;
};
function _i(n, e) {
  return {
    ...J(n.innerType._def, e),
    default: n.defaultValue()
  };
}
function yi(n, e, t) {
  return e.effectStrategy === "input" ? J(n.schema._def, e, t) : {};
}
function vi(n) {
  return {
    type: "string",
    enum: [...n.values]
  };
}
const wi = (n) => "type" in n && n.type === "string" ? !1 : "allOf" in n;
function xi(n, e) {
  const t = [
    J(n.left._def, {
      ...e,
      currentPath: [...e.currentPath, "allOf", "0"]
    }),
    J(n.right._def, {
      ...e,
      currentPath: [...e.currentPath, "allOf", "1"]
    })
  ].filter((a) => !!a);
  let r = e.target === "jsonSchema2019-09" ? { unevaluatedProperties: !1 } : void 0;
  const s = [];
  return t.forEach((a) => {
    if (wi(a))
      s.push(...a.allOf), a.unevaluatedProperties === void 0 && (r = void 0);
    else {
      let i = a;
      if ("additionalProperties" in a && a.additionalProperties === !1) {
        const { additionalProperties: o, ...l } = a;
        i = l;
      } else
        r = void 0;
      s.push(i);
    }
  }), s.length ? {
    allOf: s,
    ...r
  } : void 0;
}
function bi(n, e) {
  const t = typeof n.value;
  return t !== "bigint" && t !== "number" && t !== "boolean" && t !== "string" ? {
    type: Array.isArray(n.value) ? "array" : "object"
  } : e.target === "openApi3" ? {
    type: t === "bigint" ? "integer" : t,
    enum: [n.value]
  } : {
    type: t === "bigint" ? "integer" : t,
    const: n.value
  };
}
let Gn;
const qe = {
  /**
   * `c` was changed to `[cC]` to replicate /i flag
   */
  cuid: /^[cC][^\s-]{8,}$/,
  cuid2: /^[0-9a-z]+$/,
  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
  /**
   * `a-z` was added to replicate /i flag
   */
  email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
  /**
   * Constructed a valid Unicode RegExp
   *
   * Lazily instantiate since this type of regex isn't supported
   * in all envs (e.g. React Native).
   *
   * See:
   * https://github.com/colinhacks/zod/issues/2433
   * Fix in Zod:
   * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b
   */
  emoji: () => (Gn === void 0 && (Gn = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u")), Gn),
  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
  nanoid: /^[a-zA-Z0-9_-]{21}$/
};
function Us(n, e) {
  const t = {
    type: "string"
  };
  function r(s) {
    return e.patternStrategy === "escape" ? Si(s) : s;
  }
  if (n.checks)
    for (const s of n.checks)
      switch (s.kind) {
        case "min":
          q(t, "minLength", typeof t.minLength == "number" ? Math.max(t.minLength, s.value) : s.value, s.message, e);
          break;
        case "max":
          q(t, "maxLength", typeof t.maxLength == "number" ? Math.min(t.maxLength, s.value) : s.value, s.message, e);
          break;
        case "email":
          switch (e.emailStrategy) {
            case "format:email":
              he(t, "email", s.message, e);
              break;
            case "format:idn-email":
              he(t, "idn-email", s.message, e);
              break;
            case "pattern:zod":
              me(t, qe.email, s.message, e);
              break;
          }
          break;
        case "url":
          he(t, "uri", s.message, e);
          break;
        case "uuid":
          he(t, "uuid", s.message, e);
          break;
        case "regex":
          me(t, s.regex, s.message, e);
          break;
        case "cuid":
          me(t, qe.cuid, s.message, e);
          break;
        case "cuid2":
          me(t, qe.cuid2, s.message, e);
          break;
        case "startsWith":
          me(t, RegExp(`^${r(s.value)}`), s.message, e);
          break;
        case "endsWith":
          me(t, RegExp(`${r(s.value)}$`), s.message, e);
          break;
        case "datetime":
          he(t, "date-time", s.message, e);
          break;
        case "date":
          he(t, "date", s.message, e);
          break;
        case "time":
          he(t, "time", s.message, e);
          break;
        case "duration":
          he(t, "duration", s.message, e);
          break;
        case "length":
          q(t, "minLength", typeof t.minLength == "number" ? Math.max(t.minLength, s.value) : s.value, s.message, e), q(t, "maxLength", typeof t.maxLength == "number" ? Math.min(t.maxLength, s.value) : s.value, s.message, e);
          break;
        case "includes": {
          me(t, RegExp(r(s.value)), s.message, e);
          break;
        }
        case "ip": {
          s.version !== "v6" && he(t, "ipv4", s.message, e), s.version !== "v4" && he(t, "ipv6", s.message, e);
          break;
        }
        case "emoji":
          me(t, qe.emoji, s.message, e);
          break;
        case "ulid": {
          me(t, qe.ulid, s.message, e);
          break;
        }
        case "base64": {
          switch (e.base64Strategy) {
            case "format:binary": {
              he(t, "binary", s.message, e);
              break;
            }
            case "contentEncoding:base64": {
              q(t, "contentEncoding", "base64", s.message, e);
              break;
            }
            case "pattern:zod": {
              me(t, qe.base64, s.message, e);
              break;
            }
          }
          break;
        }
        case "nanoid":
          me(t, qe.nanoid, s.message, e);
      }
  return t;
}
const Si = (n) => Array.from(n).map((e) => /[a-zA-Z0-9]/.test(e) ? e : `\\${e}`).join(""), he = (n, e, t, r) => {
  var s;
  n.format || (s = n.anyOf) != null && s.some((a) => a.format) ? (n.anyOf || (n.anyOf = []), n.format && (n.anyOf.push({
    format: n.format,
    ...n.errorMessage && r.errorMessages && {
      errorMessage: { format: n.errorMessage.format }
    }
  }), delete n.format, n.errorMessage && (delete n.errorMessage.format, Object.keys(n.errorMessage).length === 0 && delete n.errorMessage)), n.anyOf.push({
    format: e,
    ...t && r.errorMessages && { errorMessage: { format: t } }
  })) : q(n, "format", e, t, r);
}, me = (n, e, t, r) => {
  var s;
  n.pattern || (s = n.allOf) != null && s.some((a) => a.pattern) ? (n.allOf || (n.allOf = []), n.pattern && (n.allOf.push({
    pattern: n.pattern,
    ...n.errorMessage && r.errorMessages && {
      errorMessage: { pattern: n.errorMessage.pattern }
    }
  }), delete n.pattern, n.errorMessage && (delete n.errorMessage.pattern, Object.keys(n.errorMessage).length === 0 && delete n.errorMessage)), n.allOf.push({
    pattern: Yr(e, r),
    ...t && r.errorMessages && { errorMessage: { pattern: t } }
  })) : q(n, "pattern", Yr(e, r), t, r);
}, Yr = (n, e) => {
  var c;
  const t = typeof n == "function" ? n() : n;
  if (!e.applyRegexFlags || !t.flags)
    return t.source;
  const r = {
    i: t.flags.includes("i"),
    // Case-insensitive
    m: t.flags.includes("m"),
    // `^` and `$` matches adjacent to newline characters
    s: t.flags.includes("s")
    // `.` matches newlines
  }, s = r.i ? t.source.toLowerCase() : t.source;
  let a = "", i = !1, o = !1, l = !1;
  for (let p = 0; p < s.length; p++) {
    if (i) {
      a += s[p], i = !1;
      continue;
    }
    if (r.i) {
      if (o) {
        if (s[p].match(/[a-z]/)) {
          l ? (a += s[p], a += `${s[p - 2]}-${s[p]}`.toUpperCase(), l = !1) : s[p + 1] === "-" && ((c = s[p + 2]) != null && c.match(/[a-z]/)) ? (a += s[p], l = !0) : a += `${s[p]}${s[p].toUpperCase()}`;
          continue;
        }
      } else if (s[p].match(/[a-z]/)) {
        a += `[${s[p]}${s[p].toUpperCase()}]`;
        continue;
      }
    }
    if (r.m) {
      if (s[p] === "^") {
        a += `(^|(?<=[\r
]))`;
        continue;
      } else if (s[p] === "$") {
        a += `($|(?=[\r
]))`;
        continue;
      }
    }
    if (r.s && s[p] === ".") {
      a += o ? `${s[p]}\r
` : `[${s[p]}\r
]`;
      continue;
    }
    a += s[p], s[p] === "\\" ? i = !0 : o && s[p] === "]" ? o = !1 : !o && s[p] === "[" && (o = !0);
  }
  try {
    const p = new RegExp(a);
  } catch {
    return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`), t.source;
  }
  return a;
};
function Js(n, e) {
  var r, s, a, i;
  if (e.target === "openApi3" && ((r = n.keyType) == null ? void 0 : r._def.typeName) === x.ZodEnum)
    return {
      type: "object",
      required: n.keyType._def.values,
      properties: n.keyType._def.values.reduce((o, l) => ({
        ...o,
        [l]: J(n.valueType._def, {
          ...e,
          currentPath: [...e.currentPath, "properties", l]
        }) ?? {}
      }), {}),
      additionalProperties: !1
    };
  const t = {
    type: "object",
    additionalProperties: J(n.valueType._def, {
      ...e,
      currentPath: [...e.currentPath, "additionalProperties"]
    }) ?? {}
  };
  if (e.target === "openApi3")
    return t;
  if (((s = n.keyType) == null ? void 0 : s._def.typeName) === x.ZodString && ((a = n.keyType._def.checks) != null && a.length)) {
    const o = Object.entries(Us(n.keyType._def, e)).reduce((l, [c, p]) => c === "type" ? l : { ...l, [c]: p }, {});
    return {
      ...t,
      propertyNames: o
    };
  } else if (((i = n.keyType) == null ? void 0 : i._def.typeName) === x.ZodEnum)
    return {
      ...t,
      propertyNames: {
        enum: n.keyType._def.values
      }
    };
  return t;
}
function Ti(n, e) {
  if (e.mapStrategy === "record")
    return Js(n, e);
  const t = J(n.keyType._def, {
    ...e,
    currentPath: [...e.currentPath, "items", "items", "0"]
  }) || {}, r = J(n.valueType._def, {
    ...e,
    currentPath: [...e.currentPath, "items", "items", "1"]
  }) || {};
  return {
    type: "array",
    maxItems: 125,
    items: {
      type: "array",
      items: [t, r],
      minItems: 2,
      maxItems: 2
    }
  };
}
function ki(n) {
  const e = n.values, r = Object.keys(n.values).filter((a) => typeof e[e[a]] != "number").map((a) => e[a]), s = Array.from(new Set(r.map((a) => typeof a)));
  return {
    type: s.length === 1 ? s[0] === "string" ? "string" : "number" : ["string", "number"],
    enum: r
  };
}
function Ii() {
  return {
    not: {}
  };
}
function Ai(n) {
  return n.target === "openApi3" ? {
    enum: ["null"],
    nullable: !0
  } : {
    type: "null"
  };
}
const En = {
  ZodString: "string",
  ZodNumber: "number",
  ZodBigInt: "integer",
  ZodBoolean: "boolean",
  ZodNull: "null"
};
function Ci(n, e) {
  if (e.target === "openApi3")
    return Xr(n, e);
  const t = n.options instanceof Map ? Array.from(n.options.values()) : n.options;
  if (t.every((r) => r._def.typeName in En && (!r._def.checks || !r._def.checks.length))) {
    const r = t.reduce((s, a) => {
      const i = En[a._def.typeName];
      return i && !s.includes(i) ? [...s, i] : s;
    }, []);
    return {
      type: r.length > 1 ? r : r[0]
    };
  } else if (t.every((r) => r._def.typeName === "ZodLiteral" && !r.description)) {
    const r = t.reduce((s, a) => {
      const i = typeof a._def.value;
      switch (i) {
        case "string":
        case "number":
        case "boolean":
          return [...s, i];
        case "bigint":
          return [...s, "integer"];
        case "object":
          if (a._def.value === null)
            return [...s, "null"];
        case "symbol":
        case "undefined":
        case "function":
        default:
          return s;
      }
    }, []);
    if (r.length === t.length) {
      const s = r.filter((a, i, o) => o.indexOf(a) === i);
      return {
        type: s.length > 1 ? s : s[0],
        enum: t.reduce((a, i) => a.includes(i._def.value) ? a : [...a, i._def.value], [])
      };
    }
  } else if (t.every((r) => r._def.typeName === "ZodEnum"))
    return {
      type: "string",
      enum: t.reduce((r, s) => [...r, ...s._def.values.filter((a) => !r.includes(a))], [])
    };
  return Xr(n, e);
}
const Xr = (n, e) => {
  const t = (n.options instanceof Map ? Array.from(n.options.values()) : n.options).map((r, s) => J(r._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", `${s}`]
  })).filter((r) => !!r && (!e.strictUnions || typeof r == "object" && Object.keys(r).length > 0));
  return t.length ? { anyOf: t } : void 0;
};
function Oi(n, e) {
  if (["ZodString", "ZodNumber", "ZodBigInt", "ZodBoolean", "ZodNull"].includes(n.innerType._def.typeName) && (!n.innerType._def.checks || !n.innerType._def.checks.length))
    return e.target === "openApi3" || e.nullableStrategy === "property" ? {
      type: En[n.innerType._def.typeName],
      nullable: !0
    } : {
      type: [En[n.innerType._def.typeName], "null"]
    };
  if (e.target === "openApi3") {
    const r = J(n.innerType._def, {
      ...e,
      currentPath: [...e.currentPath]
    });
    return r && "$ref" in r ? { allOf: [r], nullable: !0 } : r && { ...r, nullable: !0 };
  }
  const t = J(n.innerType._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", "0"]
  });
  return t && { anyOf: [t, { type: "null" }] };
}
function Ei(n, e) {
  const t = {
    type: "number"
  };
  if (!n.checks)
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "int":
        t.type = "integer", Ps(t, "type", r.message, e);
        break;
      case "min":
        e.target === "jsonSchema7" ? r.inclusive ? q(t, "minimum", r.value, r.message, e) : q(t, "exclusiveMinimum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMinimum = !0), q(t, "minimum", r.value, r.message, e));
        break;
      case "max":
        e.target === "jsonSchema7" ? r.inclusive ? q(t, "maximum", r.value, r.message, e) : q(t, "exclusiveMaximum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMaximum = !0), q(t, "maximum", r.value, r.message, e));
        break;
      case "multipleOf":
        q(t, "multipleOf", r.value, r.message, e);
        break;
    }
  return t;
}
function Ni(n, e) {
  return e.removeAdditionalStrategy === "strict" ? n.catchall._def.typeName === "ZodNever" ? n.unknownKeys !== "strict" : J(n.catchall._def, {
    ...e,
    currentPath: [...e.currentPath, "additionalProperties"]
  }) ?? !0 : n.catchall._def.typeName === "ZodNever" ? n.unknownKeys === "passthrough" : J(n.catchall._def, {
    ...e,
    currentPath: [...e.currentPath, "additionalProperties"]
  }) ?? !0;
}
function Ri(n, e) {
  const t = {
    type: "object",
    ...Object.entries(n.shape()).reduce((r, [s, a]) => {
      var l;
      if (a === void 0 || a._def === void 0)
        return r;
      const i = [...e.currentPath, "properties", s], o = J(a._def, {
        ...e,
        currentPath: i,
        propertyPath: i
      });
      if (o === void 0)
        return r;
      if (e.openaiStrictMode && a.isOptional() && !a.isNullable() && typeof ((l = a._def) == null ? void 0 : l.defaultValue) > "u")
        throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);
      return {
        properties: {
          ...r.properties,
          [s]: o
        },
        required: a.isOptional() && !e.openaiStrictMode ? r.required : [...r.required, s]
      };
    }, { properties: {}, required: [] }),
    additionalProperties: Ni(n, e)
  };
  return t.required.length || delete t.required, t;
}
const Di = (n, e) => {
  var r;
  if (e.currentPath.toString() === ((r = e.propertyPath) == null ? void 0 : r.toString()))
    return J(n.innerType._def, e);
  const t = J(n.innerType._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", "1"]
  });
  return t ? {
    anyOf: [
      {
        not: {}
      },
      t
    ]
  } : {};
}, Pi = (n, e) => {
  if (e.pipeStrategy === "input")
    return J(n.in._def, e);
  if (e.pipeStrategy === "output")
    return J(n.out._def, e);
  const t = J(n.in._def, {
    ...e,
    currentPath: [...e.currentPath, "allOf", "0"]
  }), r = J(n.out._def, {
    ...e,
    currentPath: [...e.currentPath, "allOf", t ? "1" : "0"]
  });
  return {
    allOf: [t, r].filter((s) => s !== void 0)
  };
};
function Mi(n, e) {
  return J(n.type._def, e);
}
function ji(n, e) {
  const r = {
    type: "array",
    uniqueItems: !0,
    items: J(n.valueType._def, {
      ...e,
      currentPath: [...e.currentPath, "items"]
    })
  };
  return n.minSize && q(r, "minItems", n.minSize.value, n.minSize.message, e), n.maxSize && q(r, "maxItems", n.maxSize.value, n.maxSize.message, e), r;
}
function $i(n, e) {
  return n.rest ? {
    type: "array",
    minItems: n.items.length,
    items: n.items.map((t, r) => J(t._def, {
      ...e,
      currentPath: [...e.currentPath, "items", `${r}`]
    })).reduce((t, r) => r === void 0 ? t : [...t, r], []),
    additionalItems: J(n.rest._def, {
      ...e,
      currentPath: [...e.currentPath, "additionalItems"]
    })
  } : {
    type: "array",
    minItems: n.items.length,
    maxItems: n.items.length,
    items: n.items.map((t, r) => J(t._def, {
      ...e,
      currentPath: [...e.currentPath, "items", `${r}`]
    })).reduce((t, r) => r === void 0 ? t : [...t, r], [])
  };
}
function Fi() {
  return {
    not: {}
  };
}
function Zi() {
  return {};
}
const Li = (n, e) => J(n.innerType._def, e);
function J(n, e, t = !1) {
  var i;
  const r = e.seen.get(n);
  if (e.override) {
    const o = (i = e.override) == null ? void 0 : i.call(e, n, e, r, t);
    if (o !== Pa)
      return o;
  }
  if (r && !t) {
    const o = Ui(r, e);
    if (o !== void 0)
      return "$ref" in o && e.seenRefs.add(o.$ref), o;
  }
  const s = { def: n, path: e.currentPath, jsonSchema: void 0 };
  e.seen.set(n, s);
  const a = qi(n, n.typeName, e, t);
  return a && Bi(n, e, a), s.jsonSchema = a, a;
}
const Ui = (n, e) => {
  switch (e.$refStrategy) {
    case "root":
      return { $ref: n.path.join("/") };
    // this case is needed as OpenAI strict mode doesn't support top-level `$ref`s, i.e.
    // the top-level schema *must* be `{"type": "object", "properties": {...}}` but if we ever
    // need to define a `$ref`, relative `$ref`s aren't supported, so we need to extract
    // the schema to `#/definitions/` and reference that.
    //
    // e.g. if we need to reference a schema at
    // `["#","definitions","contactPerson","properties","person1","properties","name"]`
    // then we'll extract it out to `contactPerson_properties_person1_properties_name`
    case "extract-to-root":
      const t = n.path.slice(e.basePath.length + 1).join("_");
      return t !== e.name && e.nameStrategy === "duplicate-ref" && (e.definitions[t] = n.def), { $ref: [...e.basePath, e.definitionPath, t].join("/") };
    case "relative":
      return { $ref: Ji(e.currentPath, n.path) };
    case "none":
    case "seen":
      return n.path.length < e.currentPath.length && n.path.every((r, s) => e.currentPath[s] === r) ? (console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`), {}) : e.$refStrategy === "seen" ? {} : void 0;
  }
}, Ji = (n, e) => {
  let t = 0;
  for (; t < n.length && t < e.length && n[t] === e[t]; t++)
    ;
  return [(n.length - t).toString(), ...e.slice(t)].join("/");
}, qi = (n, e, t, r) => {
  switch (e) {
    case x.ZodString:
      return Us(n, t);
    case x.ZodNumber:
      return Ei(n, t);
    case x.ZodObject:
      return Ri(n, t);
    case x.ZodBigInt:
      return pi(n, t);
    case x.ZodBoolean:
      return fi();
    case x.ZodDate:
      return Ls(n, t);
    case x.ZodUndefined:
      return Fi();
    case x.ZodNull:
      return Ai(t);
    case x.ZodArray:
      return li(n, t);
    case x.ZodUnion:
    case x.ZodDiscriminatedUnion:
      return Ci(n, t);
    case x.ZodIntersection:
      return xi(n, t);
    case x.ZodTuple:
      return $i(n, t);
    case x.ZodRecord:
      return Js(n, t);
    case x.ZodLiteral:
      return bi(n, t);
    case x.ZodEnum:
      return vi(n);
    case x.ZodNativeEnum:
      return ki(n);
    case x.ZodNullable:
      return Oi(n, t);
    case x.ZodOptional:
      return Di(n, t);
    case x.ZodMap:
      return Ti(n, t);
    case x.ZodSet:
      return ji(n, t);
    case x.ZodLazy:
      return J(n.getter()._def, t);
    case x.ZodPromise:
      return Mi(n, t);
    case x.ZodNaN:
    case x.ZodNever:
      return Ii();
    case x.ZodEffects:
      return yi(n, t, r);
    case x.ZodAny:
      return di();
    case x.ZodUnknown:
      return Zi();
    case x.ZodDefault:
      return _i(n, t);
    case x.ZodBranded:
      return hi(n, t);
    case x.ZodReadonly:
      return Li(n, t);
    case x.ZodCatch:
      return mi(n, t);
    case x.ZodPipeline:
      return Pi(n, t);
    case x.ZodFunction:
    case x.ZodVoid:
    case x.ZodSymbol:
      return;
    default:
      return /* @__PURE__ */ ((s) => {
      })();
  }
}, Bi = (n, e, t) => (n.description && (t.description = n.description, e.markdownDescription && (t.markdownDescription = n.description)), t), Gi = (n, e) => {
  const t = $a(e), r = typeof e == "string" ? e : (e == null ? void 0 : e.nameStrategy) === "title" || e == null ? void 0 : e.name, s = J(n._def, r === void 0 ? t : {
    ...t,
    currentPath: [...t.basePath, t.definitionPath, r]
  }, !1) ?? {}, a = typeof e == "object" && e.name !== void 0 && e.nameStrategy === "title" ? e.name : void 0;
  a !== void 0 && (s.title = a);
  const i = (() => {
    if (ja(t.definitions))
      return;
    const l = {}, c = /* @__PURE__ */ new Set();
    for (let p = 0; p < 500; p++) {
      const f = Object.entries(t.definitions).filter(([h]) => !c.has(h));
      if (f.length === 0)
        break;
      for (const [h, S] of f)
        l[h] = J(tr(S), { ...t, currentPath: [...t.basePath, t.definitionPath, h] }, !0) ?? {}, c.add(h);
    }
    return l;
  })(), o = r === void 0 ? i ? {
    ...s,
    [t.definitionPath]: i
  } : s : t.nameStrategy === "duplicate-ref" ? {
    ...s,
    ...i || t.seenRefs.size ? {
      [t.definitionPath]: {
        ...i,
        // only actually duplicate the schema definition if it was ever referenced
        // otherwise the duplication is completely pointless
        ...t.seenRefs.size ? { [r]: s } : void 0
      }
    } : void 0
  } : {
    $ref: [...t.$refStrategy === "relative" ? [] : t.basePath, t.definitionPath, r].join("/"),
    [t.definitionPath]: {
      ...i,
      [r]: s
    }
  };
  return t.target === "jsonSchema7" ? o.$schema = "http://json-schema.org/draft-07/schema#" : t.target === "jsonSchema2019-09" && (o.$schema = "https://json-schema.org/draft/2019-09/schema#"), o;
};
function zi(n, { parser: e, callback: t }) {
  const r = { ...n };
  return Object.defineProperties(r, {
    $brand: {
      value: "auto-parseable-tool",
      enumerable: !1
    },
    $parseRaw: {
      value: e,
      enumerable: !1
    },
    $callback: {
      value: t,
      enumerable: !1
    }
  }), r;
}
function qs(n, e) {
  return Gi(n, {
    openaiStrictMode: !0,
    name: e.name,
    nameStrategy: "duplicate-ref",
    $refStrategy: "extract-to-root",
    nullableStrategy: "property"
  });
}
function Vi(n, e, t) {
  return Da({
    type: "json_schema",
    ...t,
    name: e,
    strict: !0,
    schema: qs(n, { name: e })
  }, (r) => n.parse(JSON.parse(r)));
}
function Hi(n) {
  return zi({
    type: "function",
    name: n.name,
    parameters: qs(n.parameters, { name: n.name }),
    strict: !0
  }, {
    callback: n.function,
    parser: (e) => n.parameters.parse(JSON.parse(e))
  });
}
class Je extends Error {
  constructor(t, r) {
    super(t);
    _(this, "state");
    this.state = r;
  }
}
class Wi extends Je {
}
class Qr extends Je {
}
class pe extends Je {
}
class X extends Je {
}
class es extends Je {
  constructor(t, r, s) {
    super(t, s);
    _(this, "error");
    this.error = r;
  }
}
class Ki extends Je {
  constructor(t, r, s) {
    super(t, s);
    _(this, "error");
    this.error = r;
  }
}
class ts extends Je {
  constructor(t, r, s) {
    super(t, s);
    _(this, "result");
    this.result = r;
  }
}
class cr extends Je {
  constructor(t, r, s) {
    super(t, s);
    _(this, "result");
    this.result = r;
  }
}
function at(n) {
  return typeof n == "object" && n !== null && "_def" in n && typeof n._def == "object" && n._def !== null && "typeName" in n._def && n._def.typeName === "ZodObject";
}
function Yi(n) {
  return typeof n == "object" && n !== null && "input" in n && typeof n.input == "string";
}
function Nn(n) {
  if (n = n.replace(/\s/g, "_"), n = n.replace(/[^a-zA-Z0-9]/g, "_"), n.length === 0)
    throw new Error("Tool name cannot be empty");
  return n;
}
function Tr(n, e) {
  const t = (r) => JSON.parse(r);
  if (at(n)) {
    const r = Hi({
      name: e,
      parameters: n,
      function: () => {
      }
    });
    return {
      schema: r.parameters,
      parser: r.$parseRaw
    };
  } else if (typeof n == "object" && n !== null)
    return {
      schema: n,
      parser: t
    };
  throw new X("Input type is not a ZodObject or a valid JSON schema");
}
function ns(n) {
  if (n === "text")
    return "text";
  if (at(n)) {
    const e = Vi(n, "output");
    return {
      type: e.type,
      name: e.name,
      strict: e.strict || !1,
      schema: e.schema
    };
  }
  return n;
}
function Xi(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var pn = { exports: {} }, zn, rs;
function Qi() {
  if (rs) return zn;
  rs = 1;
  var n = 1e3, e = n * 60, t = e * 60, r = t * 24, s = r * 7, a = r * 365.25;
  zn = function(p, f) {
    f = f || {};
    var h = typeof p;
    if (h === "string" && p.length > 0)
      return i(p);
    if (h === "number" && isFinite(p))
      return f.long ? l(p) : o(p);
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(p)
    );
  };
  function i(p) {
    if (p = String(p), !(p.length > 100)) {
      var f = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        p
      );
      if (f) {
        var h = parseFloat(f[1]), S = (f[2] || "ms").toLowerCase();
        switch (S) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return h * a;
          case "weeks":
          case "week":
          case "w":
            return h * s;
          case "days":
          case "day":
          case "d":
            return h * r;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return h * t;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return h * e;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return h * n;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return h;
          default:
            return;
        }
      }
    }
  }
  function o(p) {
    var f = Math.abs(p);
    return f >= r ? Math.round(p / r) + "d" : f >= t ? Math.round(p / t) + "h" : f >= e ? Math.round(p / e) + "m" : f >= n ? Math.round(p / n) + "s" : p + "ms";
  }
  function l(p) {
    var f = Math.abs(p);
    return f >= r ? c(p, f, r, "day") : f >= t ? c(p, f, t, "hour") : f >= e ? c(p, f, e, "minute") : f >= n ? c(p, f, n, "second") : p + " ms";
  }
  function c(p, f, h, S) {
    var b = f >= h * 1.5;
    return Math.round(p / h) + " " + S + (b ? "s" : "");
  }
  return zn;
}
var Vn, ss;
function eo() {
  if (ss) return Vn;
  ss = 1;
  function n(e) {
    r.debug = r, r.default = r, r.coerce = c, r.disable = o, r.enable = a, r.enabled = l, r.humanize = Qi(), r.destroy = p, Object.keys(e).forEach((f) => {
      r[f] = e[f];
    }), r.names = [], r.skips = [], r.formatters = {};
    function t(f) {
      let h = 0;
      for (let S = 0; S < f.length; S++)
        h = (h << 5) - h + f.charCodeAt(S), h |= 0;
      return r.colors[Math.abs(h) % r.colors.length];
    }
    r.selectColor = t;
    function r(f) {
      let h, S = null, b, v;
      function E(...R) {
        if (!E.enabled)
          return;
        const z = E, W = Number(/* @__PURE__ */ new Date()), ie = W - (h || W);
        z.diff = ie, z.prev = h, z.curr = W, h = W, R[0] = r.coerce(R[0]), typeof R[0] != "string" && R.unshift("%O");
        let oe = 0;
        R[0] = R[0].replace(/%([a-zA-Z%])/g, (Jn, ka) => {
          if (Jn === "%%")
            return "%";
          oe++;
          const $r = r.formatters[ka];
          if (typeof $r == "function") {
            const Ia = R[oe];
            Jn = $r.call(z, Ia), R.splice(oe, 1), oe--;
          }
          return Jn;
        }), r.formatArgs.call(z, R), (z.log || r.log).apply(z, R);
      }
      return E.namespace = f, E.useColors = r.useColors(), E.color = r.selectColor(f), E.extend = s, E.destroy = r.destroy, Object.defineProperty(E, "enabled", {
        enumerable: !0,
        configurable: !1,
        get: () => S !== null ? S : (b !== r.namespaces && (b = r.namespaces, v = r.enabled(f)), v),
        set: (R) => {
          S = R;
        }
      }), typeof r.init == "function" && r.init(E), E;
    }
    function s(f, h) {
      const S = r(this.namespace + (typeof h > "u" ? ":" : h) + f);
      return S.log = this.log, S;
    }
    function a(f) {
      r.save(f), r.namespaces = f, r.names = [], r.skips = [];
      const h = (typeof f == "string" ? f : "").trim().replace(/\s+/g, ",").split(",").filter(Boolean);
      for (const S of h)
        S[0] === "-" ? r.skips.push(S.slice(1)) : r.names.push(S);
    }
    function i(f, h) {
      let S = 0, b = 0, v = -1, E = 0;
      for (; S < f.length; )
        if (b < h.length && (h[b] === f[S] || h[b] === "*"))
          h[b] === "*" ? (v = b, E = S, b++) : (S++, b++);
        else if (v !== -1)
          b = v + 1, E++, S = E;
        else
          return !1;
      for (; b < h.length && h[b] === "*"; )
        b++;
      return b === h.length;
    }
    function o() {
      const f = [
        ...r.names,
        ...r.skips.map((h) => "-" + h)
      ].join(",");
      return r.enable(""), f;
    }
    function l(f) {
      for (const h of r.skips)
        if (i(f, h))
          return !1;
      for (const h of r.names)
        if (i(f, h))
          return !0;
      return !1;
    }
    function c(f) {
      return f instanceof Error ? f.stack || f.message : f;
    }
    function p() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    return r.enable(r.load()), r;
  }
  return Vn = n, Vn;
}
var as;
function to() {
  return as || (as = 1, function(n, e) {
    e.formatArgs = r, e.save = s, e.load = a, e.useColors = t, e.storage = i(), e.destroy = /* @__PURE__ */ (() => {
      let l = !1;
      return () => {
        l || (l = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })(), e.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function t() {
      if (typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs))
        return !0;
      if (typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
        return !1;
      let l;
      return typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator < "u" && navigator.userAgent && (l = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(l[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function r(l) {
      if (l[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + l[0] + (this.useColors ? "%c " : " ") + "+" + n.exports.humanize(this.diff), !this.useColors)
        return;
      const c = "color: " + this.color;
      l.splice(1, 0, c, "color: inherit");
      let p = 0, f = 0;
      l[0].replace(/%[a-zA-Z%]/g, (h) => {
        h !== "%%" && (p++, h === "%c" && (f = p));
      }), l.splice(f, 0, c);
    }
    e.log = console.debug || console.log || (() => {
    });
    function s(l) {
      try {
        l ? e.storage.setItem("debug", l) : e.storage.removeItem("debug");
      } catch {
      }
    }
    function a() {
      let l;
      try {
        l = e.storage.getItem("debug") || e.storage.getItem("DEBUG");
      } catch {
      }
      return !l && typeof process < "u" && "env" in process && (l = process.env.DEBUG), l;
    }
    function i() {
      try {
        return localStorage;
      } catch {
      }
    }
    n.exports = eo()(e);
    const { formatters: o } = n.exports;
    o.j = function(l) {
      try {
        return JSON.stringify(l);
      } catch (c) {
        return "[UnexpectedJSONParseError]: " + c.message;
      }
    };
  }(pn, pn.exports)), pn.exports;
}
var no = to();
const ro = /* @__PURE__ */ Xi(no);
function so() {
  return po();
}
function is(n) {
  const e = so();
  return typeof e < "u" && (e[n] === "true" || e[n] === "1");
}
const Bs = {
  get disabled() {
    return !0;
  }
}, Gs = {
  get dontLogModelData() {
    return is("OPENAI_AGENTS_DONT_LOG_MODEL_DATA");
  },
  get dontLogToolData() {
    return is("OPENAI_AGENTS_DONT_LOG_TOOL_DATA");
  }
}, ao = Gs.dontLogModelData, io = Gs.dontLogToolData;
function zs(n = "openai-agents") {
  return {
    namespace: n,
    debug: ro(n),
    error: console.error,
    warn: console.warn,
    dontLogModelData: ao,
    dontLogToolData: io
  };
}
const O = zs("openai-agents:core");
function it(n) {
  if (n == null)
    return String(n);
  if (typeof n == "string")
    return n;
  if (typeof n == "object")
    try {
      return JSON.stringify(n);
    } catch {
      return "[object with circular references]";
    }
  return String(n);
}
function oo(n, e) {
  return `An error occurred while running the tool. Please try again. Error: ${e instanceof Error ? e.toString() : String(e)}`;
}
function dr(n) {
  const e = n.name ? Nn(n.name) : Nn(n.execute.name), t = typeof n.errorFunction > "u" ? oo : n.errorFunction;
  if (!e)
    throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");
  const r = n.strict ?? !0;
  if (!r && at(n.parameters))
    throw new X("Strict mode is required for Zod parameters");
  const { parser: s, schema: a } = Tr(n.parameters, e);
  async function i(c, p) {
    const [f, h] = await xr(() => s(p));
    if (f !== null)
      throw O.dontLogToolData ? O.debug(`Invalid JSON input for tool ${e}`) : O.debug(`Invalid JSON input for tool ${e}: ${p}`), new pe("Invalid JSON input for tool");
    O.dontLogToolData ? O.debug(`Invoking tool ${e}`) : O.debug(`Invoking tool ${e} with input ${p}`);
    const S = await n.execute(h, c), b = it(S);
    return O.dontLogToolData ? O.debug(`Tool ${e} completed`) : O.debug(`Tool ${e} returned: ${b}`), S;
  }
  async function o(c, p) {
    return i(c, p).catch((f) => {
      if (t) {
        const h = $t();
        return h == null || h.setError({
          message: "Error running tool (non-fatal)",
          data: {
            tool_name: e,
            error: f.toString()
          }
        }), t(c, f);
      }
      throw f;
    });
  }
  const l = typeof n.needsApproval == "function" ? n.needsApproval : async () => typeof n.needsApproval == "boolean" ? n.needsApproval : !1;
  return {
    type: "function",
    name: e,
    description: n.description,
    parameters: a,
    strict: r,
    invoke: o,
    needsApproval: l
  };
}
g({
  name: d(),
  description: d().optional(),
  inputSchema: g({
    type: m("object"),
    properties: Y(d(), F()),
    required: U(d()),
    additionalProperties: Dt()
  })
});
const Hn = {};
async function uo({ server: n, convertSchemasToStrict: e, runContext: t, agent: r }) {
  return n.cacheToolsList && Hn[n.name] ? Hn[n.name].map((s) => os(s, n, e)) : Mo(async (s) => {
    const a = await n.listTools();
    let i = a;
    if (t && r) {
      const l = { runContext: t, agent: r, serverName: n.name }, c = [];
      for (const p of a) {
        const f = n.toolFilter;
        if (f)
          if (typeof f == "function") {
            if (!await f(l, p)) {
              O.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the callable filter.`);
              continue;
            }
          } else {
            const h = f.allowedToolNames ?? [], S = f.blockedToolNames ?? [];
            if (h.length > 0 || S.length > 0) {
              const b = h.length > 0 ? h.includes(p.name) : !0, v = S.length > 0 ? S.includes(p.name) : !1;
              if (!b || v) {
                v ? O.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the static filter.`) : b || O.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is not allowed by the static filter.`);
                continue;
              }
            }
          }
        c.push(p);
      }
      i = c;
    }
    s.spanData.result = i.map((l) => l.name);
    const o = i.map((l) => os(l, n, e));
    return n.cacheToolsList && (Hn[n.name] = i), o;
  }, { data: { server: n.name } });
}
async function co(n, e, t, r = !1) {
  const s = Array.isArray(n) ? {
    mcpServers: n,
    runContext: e,
    agent: t,
    convertSchemasToStrict: r
  } : n, { mcpServers: a, convertSchemasToStrict: i = !1, runContext: o, agent: l } = s, c = [], p = /* @__PURE__ */ new Set();
  for (const f of a) {
    const h = await uo({
      server: f,
      convertSchemasToStrict: i,
      runContext: o,
      agent: l
    }), b = [...new Set(h.map((v) => v.name))].filter((v) => p.has(v));
    if (b.length > 0)
      throw new X(`Duplicate tool names found across MCP servers: ${b.join(", ")}`);
    for (const v of h)
      p.add(v.name), c.push(v);
  }
  return c;
}
function os(n, e, t) {
  var i, o, l, c;
  async function r(p, f) {
    let h = {};
    typeof p == "string" && p ? h = JSON.parse(p) : typeof p == "object" && p != null && (h = p);
    const S = $t();
    S && (S.spanData.mcp_data = { server: e.name });
    const b = await e.callTool(n.name, h);
    return b.length === 1 ? b[0] : b;
  }
  const s = {
    ...n.inputSchema,
    type: ((i = n.inputSchema) == null ? void 0 : i.type) ?? "object",
    properties: ((o = n.inputSchema) == null ? void 0 : o.properties) ?? {},
    required: ((l = n.inputSchema) == null ? void 0 : l.required) ?? [],
    additionalProperties: ((c = n.inputSchema) == null ? void 0 : c.additionalProperties) ?? !1
  };
  if (t || s.additionalProperties === !0)
    try {
      const p = lo(s);
      return dr({
        name: n.name,
        description: n.description || "",
        parameters: p,
        strict: !0,
        execute: r
      });
    } catch (p) {
      O.warn(`Error converting MCP schema to strict mode: ${p}`);
    }
  const a = {
    ...s,
    additionalProperties: !0
  };
  return dr({
    name: n.name,
    description: n.description || "",
    parameters: a,
    strict: !1,
    execute: r
  });
}
function lo(n) {
  const e = {
    ...n,
    additionalProperties: !1
  };
  return e.required || (e.required = []), e;
}
function po() {
  return {};
}
var mt;
class $n {
  constructor() {
    k(this, mt, new EventTarget());
  }
  on(e, t) {
    return u(this, mt).addEventListener(e, (r) => t(...r.detail ?? [])), this;
  }
  off(e, t) {
    return u(this, mt).removeEventListener(e, (r) => t(...r.detail ?? [])), this;
  }
  emit(e, ...t) {
    const r = new CustomEvent(e, { detail: t });
    return u(this, mt).dispatchEvent(r);
  }
  once(e, t) {
    const r = (...s) => {
      this.off(e, r), t(...s);
    };
    return this.on(e, r), this;
  }
}
mt = new WeakMap();
const Vs = crypto.randomUUID.bind(crypto), fo = class {
  constructor() {
  }
  pipeTo(e, t) {
  }
  pipeThrough(e, t) {
  }
}, ho = globalThis.ReadableStream, mo = globalThis.TransformStream;
class go {
  constructor() {
    _(this, "context", null);
  }
  run(e, t) {
    return this.context = e, t();
  }
  getStore() {
    return this.context;
  }
  enterWith(e) {
    this.context = e;
  }
}
class _o {
  constructor() {
  }
  setTimeout(e, t) {
    const r = setTimeout(e, t);
    return r.ref = typeof r.ref == "function" ? r.ref : () => r, r.unref = typeof r.unref == "function" ? r.unref : () => r, r.hasRef = typeof r.hasRef == "function" ? r.hasRef : () => !0, r.refresh = typeof r.refresh == "function" ? r.refresh : () => r, r;
  }
  clearTimeout(e) {
    window.clearTimeout(e);
  }
}
const yo = new _o();
let us;
function Se() {
  return us ?? (us = new go()), us;
}
function jt() {
  const n = Se().getStore();
  return n != null && n.trace ? n.trace : null;
}
function $t() {
  const n = Se().getStore();
  return n != null && n.span ? n.span : null;
}
function Hs(n) {
  return async () => {
    const e = jt();
    if (!e)
      throw new Error("No trace found");
    await e.start();
    const t = await n(e);
    return await e.end(), t;
  };
}
async function vo(n, e, t = {}) {
  const r = typeof n == "string" ? ke().createTrace({
    ...t,
    name: n
  }) : n;
  return Se().run({ trace: r }, Hs(e));
}
async function wo(n, e = {}) {
  if (jt())
    return await n();
  const r = ke().createTrace(e);
  return Se().run({ trace: r }, Hs(n));
}
function hn(n) {
  const e = Se().getStore();
  if (!e)
    throw new Error("No existing trace found");
  e.span && (e.span.previousSpan = e.previousSpan, e.previousSpan = e.span), e.span = n, Se().enterWith(e);
}
function Rt() {
  var e;
  const n = Se().getStore();
  n && (n.span = n.previousSpan, n.previousSpan = (e = n.previousSpan) == null ? void 0 : e.previousSpan, Se().enterWith(n));
}
function ht(n) {
  const e = $t();
  e && e.setError(n);
}
function xo(n) {
  var e, t, r;
  return {
    trace: (e = n.trace) == null ? void 0 : e.clone(),
    span: (t = n.span) == null ? void 0 : t.clone(),
    previousSpan: (r = n.previousSpan) == null ? void 0 : r.clone()
  };
}
function lr(n) {
  const e = Se().getStore();
  if (!e)
    throw new Error("No existing trace found");
  const t = xo(e);
  return Se().run(t, n);
}
class bo {
  async export(e) {
    if (Bs.disabled) {
      O.debug("Tracing is disabled. Skipping export");
      return;
    }
    for (const t of e)
      t.type === "trace" ? console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}`) : console.log(`[Exporter] Export span: ${JSON.stringify(t)}`);
  }
}
var qt, gt, Bt, Gt, _t, te, Ce, je, $e, yt, ae, pr, fr, lt;
class So {
  constructor(e, {
    maxQueueSize: t = 1e3,
    maxBatchSize: r = 100,
    scheduleDelay: s = 5e3,
    // 5 seconds
    exportTriggerRatio: a = 0.8
  } = {}) {
    k(this, ae);
    k(this, qt);
    k(this, gt);
    k(this, Bt);
    k(this, Gt);
    k(this, _t);
    k(this, te, []);
    k(this, Ce);
    k(this, je, null);
    k(this, $e, !1);
    k(this, yt, null);
    y(this, qt, t), y(this, gt, r), y(this, Bt, s), y(this, Gt, t * a), y(this, _t, e), y(this, Ce, yo), O.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.");
  }
  start() {
    y(this, yt, new AbortController()), $(this, ae, fr).call(this);
  }
  async onTraceStart(e) {
    await $(this, ae, pr).call(this, e);
  }
  async onTraceEnd(e) {
  }
  async onSpanStart(e) {
  }
  async onSpanEnd(e) {
    await $(this, ae, pr).call(this, e);
  }
  async shutdown(e) {
    var t;
    for (e && u(this, Ce).setTimeout(() => {
      var r;
      (r = u(this, yt)) == null || r.abort();
    }, e), O.debug("Shutting down gracefully"); u(this, te).length > 0; ) {
      if (O.debug(`Waiting for buffer to empty. Items left: ${u(this, te).length}`), u(this, $e) || await $(this, ae, lt).call(this, !0), (t = u(this, yt)) != null && t.signal.aborted) {
        O.debug("Timeout reached, force flushing"), await $(this, ae, lt).call(this, !0);
        break;
      }
      await new Promise((r) => u(this, Ce).setTimeout(r, 500));
    }
    O.debug("Buffer empty. Exiting"), u(this, Ce) && u(this, je) && u(this, Ce).clearTimeout(u(this, je));
  }
  async forceFlush() {
    u(this, te).length > 0 && await $(this, ae, lt).call(this, !0);
  }
}
qt = new WeakMap(), gt = new WeakMap(), Bt = new WeakMap(), Gt = new WeakMap(), _t = new WeakMap(), te = new WeakMap(), Ce = new WeakMap(), je = new WeakMap(), $e = new WeakMap(), yt = new WeakMap(), ae = new WeakSet(), pr = async function(e) {
  if (u(this, te).length + 1 > u(this, qt)) {
    O.error("Dropping trace because buffer is full");
    return;
  }
  u(this, te).push(e), u(this, te).length > u(this, Gt) && await $(this, ae, lt).call(this);
}, fr = function() {
  y(this, je, u(this, Ce).setTimeout(async () => {
    await $(this, ae, lt).call(this), $(this, ae, fr).call(this);
  }, u(this, Bt))), typeof u(this, je).unref == "function" && u(this, je).unref();
}, lt = async function(e = !1) {
  if (u(this, te).length !== 0) {
    if (O.debug(`Exporting batches. Force: ${e}. Buffer size: ${u(this, te).length}`), e || u(this, te).length < u(this, gt)) {
      const t = [...u(this, te)];
      y(this, te, []), y(this, $e, !0), await u(this, _t).export(t), y(this, $e, !1);
    } else if (u(this, te).length > 0) {
      const t = u(this, te).splice(0, u(this, gt));
      y(this, $e, !0), await u(this, _t).export(t), y(this, $e, !1);
    }
  }
};
var ue;
class To {
  constructor() {
    k(this, ue, []);
  }
  start() {
    for (const e of u(this, ue))
      e.start && e.start();
  }
  addTraceProcessor(e) {
    u(this, ue).push(e);
  }
  setProcessors(e) {
    O.debug("Shutting down old processors");
    for (const t of u(this, ue))
      t.shutdown();
    y(this, ue, e);
  }
  async onTraceStart(e) {
    for (const t of u(this, ue))
      await t.onTraceStart(e);
  }
  async onTraceEnd(e) {
    for (const t of u(this, ue))
      await t.onTraceEnd(e);
  }
  async onSpanStart(e) {
    for (const t of u(this, ue))
      await t.onSpanStart(e);
  }
  async onSpanEnd(e) {
    for (const t of u(this, ue))
      await t.onSpanEnd(e);
  }
  async shutdown(e) {
    for (const t of u(this, ue))
      await t.shutdown(e);
  }
  async forceFlush() {
    for (const e of u(this, ue))
      await e.forceFlush();
  }
}
ue = new WeakMap();
let Wn = null, Kn = null;
function ko() {
  return Wn || (Wn = new bo()), Wn;
}
function Ws() {
  return Kn || (Kn = new So(ko())), Kn;
}
function cs() {
  return (/* @__PURE__ */ new Date()).toISOString();
}
function Ks() {
  return `trace_${Vs().replace(/-/g, "")}`;
}
function Io() {
  return `span_${Vs().replace(/-/g, "").slice(0, 24)}`;
}
function Ao(n) {
  return Object.fromEntries(Object.entries(n).filter(([e]) => !e.startsWith("_")));
}
var zt, Vt, Ht, Wt, Ge, Fe, Ze, ze, Kt;
const Pr = class Pr {
  constructor(e, t) {
    _(this, "type", "trace.span");
    k(this, zt);
    k(this, Vt);
    k(this, Ht);
    k(this, Wt);
    k(this, Ge);
    k(this, Fe);
    k(this, Ze);
    k(this, ze);
    k(this, Kt);
    y(this, Vt, e.traceId), y(this, Ht, e.spanId ?? Io()), y(this, zt, e.data), y(this, Ge, t), y(this, Wt, e.parentId ?? null), y(this, ze, e.error ?? null), y(this, Fe, e.startedAt ?? null), y(this, Ze, e.endedAt ?? null);
  }
  get traceId() {
    return u(this, Vt);
  }
  get spanData() {
    return u(this, zt);
  }
  get spanId() {
    return u(this, Ht);
  }
  get parentId() {
    return u(this, Wt);
  }
  get previousSpan() {
    return u(this, Kt);
  }
  set previousSpan(e) {
    y(this, Kt, e);
  }
  start() {
    if (u(this, Fe)) {
      O.warn("Span already started");
      return;
    }
    y(this, Fe, cs()), u(this, Ge).onSpanStart(this);
  }
  end() {
    if (u(this, Ze)) {
      O.debug("Span already finished", this.spanData);
      return;
    }
    y(this, Ze, cs()), u(this, Ge).onSpanEnd(this);
  }
  setError(e) {
    y(this, ze, e);
  }
  get error() {
    return u(this, ze);
  }
  get startedAt() {
    return u(this, Fe);
  }
  get endedAt() {
    return u(this, Ze);
  }
  clone() {
    var t;
    const e = new Pr({
      traceId: this.traceId,
      spanId: this.spanId,
      parentId: this.parentId ?? void 0,
      data: this.spanData,
      startedAt: u(this, Fe) ?? void 0,
      endedAt: u(this, Ze) ?? void 0,
      error: u(this, ze) ?? void 0
    }, u(this, Ge));
    return e.previousSpan = (t = this.previousSpan) == null ? void 0 : t.clone(), e;
  }
  toJSON() {
    return {
      object: this.type,
      id: this.spanId,
      trace_id: this.traceId,
      parent_id: this.parentId,
      started_at: this.startedAt,
      ended_at: this.endedAt,
      span_data: Ao(this.spanData),
      error: this.error
    };
  }
};
zt = new WeakMap(), Vt = new WeakMap(), Ht = new WeakMap(), Wt = new WeakMap(), Ge = new WeakMap(), Fe = new WeakMap(), Ze = new WeakMap(), ze = new WeakMap(), Kt = new WeakMap();
let Ft = Pr;
class Pe extends Ft {
  constructor(e, t) {
    super({ traceId: "no-op", spanId: "no-op", data: e }, t);
  }
  start() {
  }
  end() {
  }
  setError() {
  }
  toJSON() {
    return null;
  }
}
var vt, Oe;
const Mr = class Mr {
  constructor(e, t) {
    _(this, "type", "trace");
    _(this, "traceId");
    _(this, "name");
    _(this, "groupId", null);
    _(this, "metadata");
    k(this, vt);
    k(this, Oe);
    this.traceId = e.traceId ?? Ks(), this.name = e.name ?? "Agent workflow", this.groupId = e.groupId ?? null, this.metadata = e.metadata ?? {}, y(this, vt, t ?? Ws()), y(this, Oe, e.started ?? !1);
  }
  async start() {
    u(this, Oe) || (y(this, Oe, !0), await u(this, vt).onTraceStart(this));
  }
  async end() {
    u(this, Oe) && (y(this, Oe, !1), await u(this, vt).onTraceEnd(this));
  }
  clone() {
    return new Mr({
      traceId: this.traceId,
      name: this.name,
      groupId: this.groupId ?? void 0,
      metadata: this.metadata,
      started: u(this, Oe)
    });
  }
  toJSON() {
    return {
      object: this.type,
      id: this.traceId,
      workflow_name: this.name,
      group_id: this.groupId,
      metadata: this.metadata
    };
  }
};
vt = new WeakMap(), Oe = new WeakMap();
let Zt = Mr;
class Yn extends Zt {
  constructor() {
    super({});
  }
  async start() {
  }
  async end() {
  }
  toJSON() {
    return null;
  }
}
var ee, Ve, Mn, Ys;
class Co {
  constructor() {
    k(this, Mn);
    k(this, ee);
    k(this, Ve);
    y(this, ee, new To()), y(this, Ve, Bs.disabled), $(this, Mn, Ys).call(this);
  }
  /**
   * Add a processor to the list of processors. Each processor will receive all traces/spans.
   *
   * @param processor - The processor to add.
   */
  registerProcessor(e) {
    u(this, ee).addTraceProcessor(e);
  }
  /**
   * Set the list of processors. This will replace any existing processors.
   *
   * @param processors - The list of processors to set.
   */
  setProcessors(e) {
    u(this, ee).setProcessors(e);
  }
  /**
   * Get the current trace.
   *
   * @returns The current trace.
   */
  getCurrentTrace() {
    return jt();
  }
  getCurrentSpan() {
    return $t();
  }
  setDisabled(e) {
    y(this, Ve, e);
  }
  startExportLoop() {
    u(this, ee).start();
  }
  createTrace(e) {
    if (u(this, Ve))
      return O.debug("Tracing is disabled, Not creating trace %o", e), new Yn();
    const t = e.traceId ?? Ks(), r = e.name ?? "Agent workflow";
    return O.debug("Creating trace %s with name %s", t, r), new Zt({ ...e, name: r, traceId: t }, u(this, ee));
  }
  createSpan(e, t) {
    if (u(this, Ve) || e.disabled)
      return O.debug("Tracing is disabled, Not creating span %o", e), new Pe(e.data, u(this, ee));
    let r, s;
    if (t) {
      if (t instanceof Zt) {
        if (t instanceof Yn)
          return O.debug("Parent trace is no-op, returning NoopSpan"), new Pe(e.data, u(this, ee));
        s = t.traceId;
      } else if (t instanceof Ft) {
        if (t instanceof Pe)
          return O.debug("Parent span is no-op, returning NoopSpan"), new Pe(e.data, u(this, ee));
        r = t.spanId, s = t.traceId;
      }
    } else {
      const a = jt(), i = $t();
      if (!a)
        return O.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."), new Pe(e.data, u(this, ee));
      if (i instanceof Pe || a instanceof Yn)
        return O.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`), new Pe(e.data, u(this, ee));
      s = a.traceId, i ? (O.debug("Using parent span %s", i.spanId), r = i.spanId) : O.debug("No parent span, using current trace %s", a.traceId);
    }
    return s ? (O.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId ?? s}`), new Ft({
      ...e,
      traceId: s,
      parentId: r
    }, u(this, ee))) : (O.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."), new Pe(e.data, u(this, ee)));
  }
  async shutdown(e) {
    try {
      O.debug("Shutting down tracing provider"), await u(this, ee).shutdown(e);
    } catch (t) {
      O.error("Error shutting down tracing provider %o", t);
    }
  }
  async forceFlush() {
    await u(this, ee).forceFlush();
  }
}
ee = new WeakMap(), Ve = new WeakMap(), Mn = new WeakSet(), /** Adds listeners to `process` to ensure `shutdown` occurs before exit. */
Ys = function() {
  if (typeof process < "u" && typeof process.on == "function") {
    const e = async () => {
      const t = setTimeout(() => {
        console.warn("Cleanup timeout, forcing exit"), process.exit(1);
      }, 5e3);
      try {
        await this.shutdown();
      } finally {
        clearTimeout(t);
      }
    };
    process.on("beforeExit", e), process.on("SIGINT", async () => {
      await e(), ds("SIGINT") || process.exit(130);
    }), process.on("SIGTERM", async () => {
      await e(), ds("SIGTERM") || process.exit(0);
    }), process.on("unhandledRejection", async (t, r) => {
      O.error("Unhandled rejection", t, r), await e(), Oo("unhandledRejection") || process.exit(1);
    });
  }
};
function ds(n) {
  return process.listeners(n).length > 1;
}
function Oo(n) {
  return process.listeners(n).length > 1;
}
let Xn;
function ke() {
  return Xn || (Xn = new Co()), Xn;
}
function Fn(n) {
  return async (e, ...t) => lr(async () => {
    const r = n(...t);
    hn(r);
    try {
      return r.start(), await e(r);
    } catch (s) {
      throw r.setError({
        message: s.message,
        data: s.data
      }), s;
    } finally {
      r.end(), Rt();
    }
  });
}
function ls(n, e) {
  var t;
  return ke().createSpan({
    ...n,
    data: {
      type: "agent",
      name: ((t = n == null ? void 0 : n.data) == null ? void 0 : t.name) ?? "Agent",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
function Eo(n, e) {
  var t, r;
  return ke().createSpan({
    ...n,
    data: {
      type: "function",
      input: ((t = n == null ? void 0 : n.data) == null ? void 0 : t.input) ?? "",
      output: ((r = n == null ? void 0 : n.data) == null ? void 0 : r.output) ?? "",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const ps = Fn(Eo);
function No(n, e) {
  return ke().createSpan({
    ...n,
    data: { type: "handoff", ...n == null ? void 0 : n.data }
  }, e);
}
const Ro = Fn(No);
function Do(n, e) {
  return ke().createSpan({
    ...n,
    data: {
      type: "guardrail",
      triggered: !1,
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const fs = Fn(Do);
function Po(n, e) {
  return ke().createSpan({
    ...n,
    data: {
      type: "mcp_tools",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const Mo = Fn(Po);
function jo(n) {
  ke().registerProcessor(n);
}
class kr {
  on(e, t) {
    return this.eventEmitter.on(e, t), this.eventEmitter;
  }
  off(e, t) {
    return this.eventEmitter.off(e, t), this.eventEmitter;
  }
  emit(e, ...t) {
    return this.eventEmitter.emit(e, ...t);
  }
  once(e, t) {
    return this.eventEmitter.once(e, t), this.eventEmitter;
  }
}
class $o extends kr {
  constructor() {
    super(...arguments);
    _(this, "eventEmitter", new $n());
  }
}
class Fo extends kr {
  constructor() {
    super(...arguments);
    _(this, "eventEmitter", new $n());
  }
}
function hs({ name: n, execute: e }) {
  return {
    type: "input",
    name: n,
    guardrailFunction: e,
    async run(t) {
      return {
        guardrail: { type: "input", name: n },
        output: await e(t)
      };
    }
  };
}
function hr({ name: n, execute: e }) {
  return {
    type: "output",
    name: n,
    guardrailFunction: e,
    async run(t) {
      return {
        guardrail: { type: "output", name: n },
        agent: t.agent,
        agentOutput: t.agentOutput,
        output: await e(t)
      };
    }
  };
}
function Xs(n) {
  return JSON.stringify({ assistant: n.name });
}
function Zo(n) {
  return `transfer_to_${Nn(n.name)}`;
}
function Lo(n) {
  return `Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription ?? ""}`;
}
class Qs {
  constructor(e, t) {
    /**
     * The name of the tool that represents the handoff.
     */
    _(this, "toolName");
    /**
     * The description of the tool that represents the handoff.
     */
    _(this, "toolDescription");
    /**
     * The JSON schema for the handoff input. Can be empty if the handoff does not take an input
     */
    _(this, "inputJsonSchema", {
      type: "object",
      properties: {},
      required: [],
      additionalProperties: !1
    });
    /**
     * Whether the input JSON schema is in strict mode. We **strongly** recommend setting this to
     * true, as it increases the likelihood of correct JSON input.
     */
    _(this, "strictJsonSchema", !0);
    /**
     * The function that invokes the handoff. The parameters passed are:
     * 1. The handoff run context
     * 2. The arguments from the LLM, as a JSON string. Empty string if inputJsonSchema is empty.
     *
     * Must return an agent
     */
    _(this, "onInvokeHandoff");
    /**
     * The name of the agent that is being handed off to.
     */
    _(this, "agentName");
    /**
     * A function that filters the inputs that are passed to the next agent. By default, the new agent
     * sees the entire conversation history. In some cases, you may want to filter inputs e.g. to
     * remove older inputs, or remove tools from existing inputs.
     *
     * The function will receive the entire conversation hisstory so far, including the input item
     * that triggered the handoff and a tool call output item representing the handoff tool's output.
     *
     * You are free to modify the input history or new items as you see fit. The next agent that runs
     * will receive `handoffInputData.allItems
     */
    _(this, "inputFilter");
    /**
     * The agent that is being handed off to.
     */
    _(this, "agent");
    this.agentName = e.name, this.onInvokeHandoff = t, this.toolName = Zo(e), this.toolDescription = Lo(e), this.agent = e;
  }
  /**
   * Returns a function tool definition that can be used to invoke the handoff.
   */
  getHandoffAsFunctionTool() {
    return {
      type: "function",
      name: this.toolName,
      description: this.toolDescription,
      parameters: this.inputJsonSchema,
      strict: this.strictJsonSchema
    };
  }
}
function ea(n, e = {}) {
  let t;
  const r = !!e.onHandoff, s = !!e.inputType;
  if (!(r === s))
    throw new X("You must provide either both `onHandoff` and `inputType` or neither.");
  async function i(l, c) {
    var p;
    if (t) {
      if (!c)
        throw ht({
          message: `Handoff function expected non empty input but got: ${c}`,
          data: {
            details: "input is empty"
          }
        }), new pe("Handoff function expected non empty input");
      try {
        const f = await t(c);
        e.onHandoff && await e.onHandoff(l, f);
      } catch (f) {
        throw ht({
          message: "Invalid JSON provided",
          data: {}
        }), O.dontLogToolData || O.error(`Invalid JSON when parsing: ${c}. Error: ${f}`), new pe("Invalid JSON provided");
      }
    } else
      await ((p = e.onHandoff) == null ? void 0 : p.call(e, l));
    return n;
  }
  const o = new Qs(n, i);
  if (e.inputType) {
    const l = Tr(e.inputType, o.toolName);
    o.inputJsonSchema = l.schema, o.strictJsonSchema = !0, t = l.parser;
  }
  return e.toolNameOverride && (o.toolName = e.toolNameOverride), e.toolDescriptionOverride && (o.toolDescription = e.toolDescriptionOverride), e.inputFilter && (o.inputFilter = e.inputFilter), o;
}
function Rn(n) {
  return n instanceof Qs ? n : ea(n);
}
function Uo() {
  throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.");
}
const Q = g({
  /**
   * Additional optional provider specific data. Used for custom functionality or model provider
   * specific fields.
   */
  providerData: Y(d(), F()).optional()
}), ut = Q.extend({
  /**
   * An ID to identify the item. This is optional by default. If a model provider absolutely
   * requires this field, it will be validated on the model level.
   */
  id: d().optional()
}), Jo = Q.extend({
  type: m("refusal"),
  /**
   * The refusal explanation from the model.
   */
  refusal: d()
}), qo = Q.extend({
  type: m("output_text"),
  /**
   * The text output from the model.
   */
  text: d()
}), ta = Q.extend({
  type: m("input_text"),
  /**
   * A text input for example a message from a user
   */
  text: d()
}), Bo = Q.extend({
  type: m("reasoning_text"),
  /**
   * A text input for example a message from a user
   */
  text: d()
}), Go = Q.extend({
  type: m("input_image"),
  /**
   * The image input to the model. Could be a URL, base64 or an object with a file ID.
   */
  image: d().or(g({
    id: d()
  })).describe("Could be a URL, base64 or an object with a file ID.")
}), zo = Q.extend({
  type: m("input_file"),
  /**
   * The file input to the model. Could be a URL, base64 or an object with a file ID.
   */
  file: d().describe("Either base64 encoded file data or a publicly accessible file URL").or(g({
    id: d().describe("OpenAI file ID")
  })).or(g({
    url: d().describe("Publicly accessible PDF file URL")
  })).describe("Contents of the file or an object with a file ID.")
}), na = Q.extend({
  type: m("audio"),
  /**
   * The audio input to the model. Could be base64 encoded audio data or an object with a file ID.
   */
  audio: d().or(g({
    id: d()
  })).describe("Base64 encoded audio data or file id"),
  /**
   * The format of the audio.
   */
  format: d().nullable().optional(),
  /**
   * The transcript of the audio.
   */
  transcript: d().nullable().optional()
}), Vo = Q.extend({
  type: m("image"),
  /**
   * The image input to the model. Could be base64 encoded image data or an object with a file ID.
   */
  image: d().describe("Base64 encoded image data")
}), Ho = Q.extend({
  type: m("text"),
  /**
   * The text output from the model.
   */
  text: d()
}), Wo = Q.extend({
  type: m("image"),
  /**
   * The image data. Could be base64 encoded image data or an object with a file ID.
   */
  data: d().describe("Base64 encoded image data"),
  /**
   * The media type of the image.
   */
  mediaType: d().describe("IANA media type of the image")
}), Ko = Q.extend({
  type: m("computer_screenshot"),
  /**
   * A base64 encoded image data or a URL representing the screenshot.
   */
  data: d().describe("Base64 encoded image data or URL")
}), Yo = le("type", [
  g({ type: m("screenshot") }),
  g({
    type: m("click"),
    x: C(),
    y: C(),
    button: re(["left", "right", "wheel", "back", "forward"])
  }),
  g({
    type: m("double_click"),
    x: C(),
    y: C()
  }),
  g({
    type: m("scroll"),
    x: C(),
    y: C(),
    scroll_x: C(),
    scroll_y: C()
  }),
  g({
    type: m("type"),
    text: d()
  }),
  g({ type: m("wait") }),
  g({
    type: m("move"),
    x: C(),
    y: C()
  }),
  g({
    type: m("keypress"),
    keys: U(d())
  }),
  g({
    type: m("drag"),
    path: U(g({ x: C(), y: C() }))
  })
]), Xo = le("type", [
  qo,
  Jo,
  na,
  Vo
]), Ir = ut.extend({
  /**
   * Any item without a type is treated as a message
   */
  type: m("message").optional()
}), Zn = Ir.extend({
  /**
   * Representing a message from the assistant (i.e. the model)
   */
  role: m("assistant"),
  /**
   * The status of the message.
   */
  status: re(["in_progress", "completed", "incomplete"]),
  /**
   * The content of the message.
   */
  content: U(Xo)
}), Qo = le("type", [
  ta,
  Go,
  zo,
  na
]), ra = Ir.extend({
  // type: z.literal('message'),
  /**
   * Representing a message from the user
   */
  role: m("user"),
  /**
   * The content of the message.
   */
  content: U(Qo).or(d())
}), sa = Ir.extend({
  // type: z.literal('message'),
  /**
   * Representing a system message to the user
   */
  role: m("system"),
  /**
   * The content of the message.
   */
  content: d()
});
le("role", [
  sa,
  Zn,
  ra
]);
const Lt = ut.extend({
  type: m("hosted_tool_call"),
  /**
   * The name of the hosted tool. For example `web_search_call` or `file_search_call`
   */
  name: d().describe("The name of the hosted tool"),
  /**
   * The arguments of the hosted tool call.
   */
  arguments: d().describe("The arguments of the hosted tool call").optional(),
  /**
   * The status of the tool call.
   */
  status: d().optional(),
  /**
   * The primary output of the tool call. Additional output might be in the `providerData` field.
   */
  output: d().optional()
}), Ut = ut.extend({
  type: m("function_call"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: d().describe("The ID of the tool call"),
  /**
   * The name of the function.
   */
  name: d().describe("The name of the function"),
  /**
   * The status of the function call.
   */
  status: re(["in_progress", "completed", "incomplete"]).optional(),
  /**
   * The arguments of the function call.
   */
  arguments: d()
}), mr = ut.extend({
  type: m("function_call_result"),
  /**
   * The name of the tool that was called
   */
  name: d().describe("The name of the tool"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: d().describe("The ID of the tool call"),
  /**
   * The status of the tool call.
   */
  status: re(["in_progress", "completed", "incomplete"]),
  /**
   * The output of the tool call.
   */
  output: le("type", [Ho, Wo])
}), Ar = ut.extend({
  type: m("computer_call"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: d().describe("The ID of the computer call"),
  /**
   * The status of the computer call.
   */
  status: re(["in_progress", "completed", "incomplete"]),
  /**
   * The action to be performed by the computer.
   */
  action: Yo
}), eu = ut.extend({
  type: m("computer_call_result"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: d().describe("The ID of the computer call"),
  /**
   * The output of the computer call.
   */
  output: Ko
}), tu = le("type", [
  Ar,
  Ut,
  Lt
]), Cr = Q.extend({
  id: d().optional(),
  type: m("reasoning"),
  /**
   * The user facing representation of the reasoning. Additional information might be in the `providerData` field.
   */
  content: U(ta),
  /**
   * The raw reasoning text from the model.
   */
  rawContent: U(Bo).optional()
}), aa = ut.extend({
  type: m("unknown")
}), Or = le("type", [
  Zn,
  Lt,
  Ut,
  Ar,
  Cr,
  aa
]), nu = Zs([
  ra,
  Zn,
  sa,
  Lt,
  Ut,
  Ar,
  mr,
  eu,
  Cr,
  aa
]), ru = g({
  requests: C().optional(),
  inputTokens: C(),
  outputTokens: C(),
  totalTokens: C(),
  inputTokensDetails: Y(d(), C()).optional(),
  outputTokensDetails: Y(d(), C()).optional()
}), ia = Q.extend({
  type: m("output_text_delta"),
  /**
   * The delta text that was streamed by the modelto the user.
   */
  delta: d()
}), su = Q.extend({
  type: m("response_started")
}), oa = Q.extend({
  type: m("response_done"),
  /**
   * The response from the model.
   */
  response: Q.extend({
    /**
     * The ID of the response.
     */
    id: d(),
    /**
     * The usage data for the response.
     */
    usage: ru,
    /**
     * The output from the model.
     */
    output: U(Or)
  })
}), au = Q.extend({
  type: m("model"),
  event: F().describe("The event from the model")
});
le("type", [
  ia,
  oa,
  su,
  au
]);
class Ln {
  constructor(e) {
    /**
     * The number of requests made to the LLM API.
     */
    _(this, "requests");
    /**
     * The number of input tokens used across all requests.
     */
    _(this, "inputTokens");
    /**
     * The number of output tokens used across all requests.
     */
    _(this, "outputTokens");
    /**
     * The total number of tokens sent and received, across all requests.
     */
    _(this, "totalTokens");
    /**
     * Details about the input tokens used across all requests.
     */
    _(this, "inputTokensDetails", []);
    /**
     * Details about the output tokens used across all requests.
     */
    _(this, "outputTokensDetails", []);
    if (typeof e > "u")
      this.requests = 0, this.inputTokens = 0, this.outputTokens = 0, this.totalTokens = 0, this.inputTokensDetails = [], this.outputTokensDetails = [];
    else {
      this.requests = (e == null ? void 0 : e.requests) ?? 1, this.inputTokens = (e == null ? void 0 : e.inputTokens) ?? (e == null ? void 0 : e.input_tokens) ?? 0, this.outputTokens = (e == null ? void 0 : e.outputTokens) ?? (e == null ? void 0 : e.output_tokens) ?? 0, this.totalTokens = (e == null ? void 0 : e.totalTokens) ?? (e == null ? void 0 : e.total_tokens) ?? 0;
      const t = (e == null ? void 0 : e.inputTokensDetails) ?? (e == null ? void 0 : e.input_tokens_details);
      this.inputTokensDetails = t ? [t] : [];
      const r = (e == null ? void 0 : e.outputTokensDetails) ?? (e == null ? void 0 : e.output_tokens_details);
      this.outputTokensDetails = r ? [r] : [];
    }
  }
  add(e) {
    this.requests += e.requests, this.inputTokens += e.inputTokens, this.outputTokens += e.outputTokens, this.totalTokens += e.totalTokens, e.inputTokensDetails && this.inputTokensDetails.push(...e.inputTokensDetails), e.outputTokensDetails && this.outputTokensDetails.push(...e.outputTokensDetails);
  }
}
var ce;
class pt {
  constructor(e = {}) {
    /**
     * The context object passed by you to the `Runner.run()`
     */
    _(this, "context");
    /**
     * The usage of the agent run so far. For streamed responses, the usage will be stale until the
     * last chunk of the stream is processed.
     */
    _(this, "usage");
    /**
     * A map of tool names to whether they have been approved.
     */
    k(this, ce);
    this.context = e, this.usage = new Ln(), y(this, ce, /* @__PURE__ */ new Map());
  }
  /**
   * Rebuild the approvals map from a serialized state.
   * @internal
   *
   * @param approvals - The approvals map to rebuild.
   */
  _rebuildApprovals(e) {
    y(this, ce, new Map(Object.entries(e)));
  }
  /**
   * Check if a tool call has been approved.
   *
   * @param toolName - The name of the tool.
   * @param callId - The call ID of the tool call.
   * @returns `true` if the tool call has been approved, `false` if blocked and `undefined` if not yet approved or rejected.
   */
  isToolApproved({ toolName: e, callId: t }) {
    const r = u(this, ce).get(e);
    if ((r == null ? void 0 : r.approved) === !0 && r.rejected === !0)
      return O.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"), !0;
    if ((r == null ? void 0 : r.approved) === !0)
      return !0;
    if ((r == null ? void 0 : r.rejected) === !0)
      return !1;
    const s = Array.isArray(r == null ? void 0 : r.approved) ? r.approved.includes(t) : !1, a = Array.isArray(r == null ? void 0 : r.rejected) ? r.rejected.includes(t) : !1;
    if (s && a)
      return O.warn(`Tool call ${t} is both approved and rejected at the same time. Approval takes precedence`), !0;
    if (s)
      return !0;
    if (a)
      return !1;
  }
  /**
   * Approve a tool call.
   *
   * @param toolName - The name of the tool.
   * @param callId - The call ID of the tool call.
   */
  approveTool(e, { alwaysApprove: t = !1 } = {}) {
    const r = e.rawItem.name;
    if (t) {
      u(this, ce).set(r, {
        approved: !0,
        rejected: []
      });
      return;
    }
    const s = u(this, ce).get(r) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(s.approved)) {
      const a = "callId" in e.rawItem ? e.rawItem.callId : e.rawItem.id;
      s.approved.push(a);
    }
    u(this, ce).set(r, s);
  }
  /**
   * Reject a tool call.
   *
   * @param approvalItem - The tool approval item to reject.
   */
  rejectTool(e, { alwaysReject: t = !1 } = {}) {
    const r = e.rawItem.name;
    if (t) {
      u(this, ce).set(r, {
        approved: !1,
        rejected: !0
      });
      return;
    }
    const s = u(this, ce).get(r) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(s.rejected)) {
      const a = "callId" in e.rawItem ? e.rawItem.callId : e.rawItem.id;
      s.rejected.push(a);
    }
    u(this, ce).set(r, s);
  }
  toJSON() {
    return {
      context: this.context,
      usage: this.usage,
      approvals: Object.fromEntries(u(this, ce).entries())
    };
  }
}
ce = new WeakMap();
class ua {
  constructor(e) {
    _(this, "state");
    this.state = e;
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during
   * the agent run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return Jt(this.input, this.newItems);
  }
  /**
   * The new items generated during the agent run. These include things like new messages, tool
   * calls and their outputs, etc.
   *
   * It does not include information about the agents and instead represents the model data.
   *
   * For the output including the agents, use the `newItems` property.
   */
  get output() {
    return Jt([], this.newItems);
  }
  /**
   * A copy of the original input items.
   */
  get input() {
    return this.state._originalInput;
  }
  /**
   * The run items generated during the agent run. This associates the model data with the agents.
   *
   * For the model data that can be used as inputs for the next agent run, use the `output` property.
   */
  get newItems() {
    return this.state._generatedItems;
  }
  /**
   * The raw LLM responses generated by the model during the agent run.
   */
  get rawResponses() {
    return this.state._modelResponses;
  }
  /**
   * The last response ID generated by the model during the agent run.
   */
  get lastResponseId() {
    const e = this.rawResponses;
    return e && e.length > 0 ? e[e.length - 1].responseId : void 0;
  }
  /**
   * The last agent that was run
   */
  get lastAgent() {
    return this.state._currentAgent;
  }
  /**
   * Guardrail results for the input messages.
   */
  get inputGuardrailResults() {
    return this.state._inputGuardrailResults;
  }
  /**
   * Guardrail results for the final output of the agent.
   */
  get outputGuardrailResults() {
    return this.state._outputGuardrailResults;
  }
  /**
   * Any interruptions that occurred during the agent run for example for tool approvals.
   */
  get interruptions() {
    var e;
    return ((e = this.state._currentStep) == null ? void 0 : e.type) === "next_step_interruption" ? this.state._currentStep.data.interruptions : [];
  }
  /**
   * The final output of the agent. If the output type was set to anything other than `text`,
   * this will be parsed either as JSON or using the Zod schema you provided.
   */
  get finalOutput() {
    var e;
    if (((e = this.state._currentStep) == null ? void 0 : e.type) === "next_step_final_output")
      return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);
    O.warn("Accessed finalOutput before agent run is completed.");
  }
}
class Qn extends ua {
  constructor(e) {
    super(e);
  }
}
var Yt, wt, ge, Le, xt, Xt, Qt, en;
class iu extends ua {
  constructor(t = {}) {
    super(t.state);
    /**
     * The current turn number
     */
    _(this, "currentTurn", 0);
    /**
     * The maximum number of turns that can be run
     */
    _(this, "maxTurns");
    k(this, Yt, null);
    k(this, wt);
    k(this, ge);
    k(this, Le);
    k(this, xt);
    k(this, Xt);
    k(this, Qt);
    k(this, en, !1);
    y(this, wt, t.signal), u(this, wt) && u(this, wt).addEventListener("abort", async () => {
      await u(this, Le).cancel();
    }), y(this, Le, new ho({
      start: (r) => {
        y(this, ge, r);
      },
      cancel: () => {
        y(this, en, !0);
      }
    })), y(this, xt, new Promise((r, s) => {
      y(this, Xt, r), y(this, Qt, s);
    }));
  }
  /**
   * The current agent that is running
   */
  get currentAgent() {
    return this.lastAgent;
  }
  /**
   * @internal
   * Adds an item to the stream of output items
   */
  _addItem(t) {
    var r;
    this.cancelled || (r = u(this, ge)) == null || r.enqueue(t);
  }
  /**
   * @internal
   * Indicates that the stream has been completed
   */
  _done() {
    var t;
    !this.cancelled && u(this, ge) && (u(this, ge).close(), y(this, ge, void 0), (t = u(this, Xt)) == null || t.call(this));
  }
  /**
   * @internal
   * Handles an error in the stream loop.
   */
  _raiseError(t) {
    var r;
    !this.cancelled && u(this, ge) && (u(this, ge).error(t), y(this, ge, void 0)), y(this, Yt, t), (r = u(this, Qt)) == null || r.call(this, t), u(this, xt).catch((s) => {
      O.debug(`Resulted in an error: ${s}`);
    });
  }
  /**
   * Returns true if the stream has been cancelled.
   */
  get cancelled() {
    return u(this, en);
  }
  /**
   * Returns the underlying readable stream.
   * @returns A readable stream of the agent run.
   */
  toStream() {
    return u(this, Le);
  }
  /**
   * Await this promise to ensure that the stream has been completed if you are not consuming the
   * stream directly.
   */
  get completed() {
    return u(this, xt);
  }
  /**
   * Error thrown during the run, if any.
   */
  get error() {
    return u(this, Yt);
  }
  toTextStream(t = {}) {
    const r = u(this, Le).pipeThrough(new mo({
      transform(s, a) {
        if (s.type === "raw_model_stream_event" && s.data.type === "output_text_delta") {
          const i = ia.parse(s.data);
          a.enqueue(i.delta);
        }
      }
    }));
    return t.compatibleWithNodeStreams ? fo.fromWeb(r) : r;
  }
  [Symbol.asyncIterator]() {
    return u(this, Le)[Symbol.asyncIterator]();
  }
}
Yt = new WeakMap(), wt = new WeakMap(), ge = new WeakMap(), Le = new WeakMap(), xt = new WeakMap(), Xt = new WeakMap(), Qt = new WeakMap(), en = new WeakMap();
function ms(n) {
  return n.type === "function" ? {
    type: "function",
    name: n.name,
    description: n.description,
    parameters: n.parameters,
    strict: n.strict
  } : n.type === "computer" ? {
    type: "computer",
    name: n.name,
    environment: n.computer.environment,
    dimensions: n.computer.dimensions
  } : {
    type: "hosted_tool",
    name: n.name,
    providerData: n.providerData
  };
}
function gs(n) {
  return {
    toolName: n.toolName,
    toolDescription: n.toolDescription,
    inputJsonSchema: n.inputJsonSchema,
    strictJsonSchema: n.strictJsonSchema
  };
}
class ct {
  constructor() {
    _(this, "type", "base_item");
    _(this, "rawItem");
  }
  toJSON() {
    return {
      type: this.type,
      rawItem: this.rawItem
    };
  }
}
class Un extends ct {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "message_output_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
  get content() {
    let t = "";
    for (const r of this.rawItem.content)
      r.type === "output_text" && (t += r.text);
    return t;
  }
}
class et extends ct {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "tool_call_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class Ot extends ct {
  constructor(t, r, s) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "output");
    _(this, "type", "tool_call_output_item");
    this.rawItem = t, this.agent = r, this.output = s;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON(),
      output: it(this.output)
    };
  }
}
class Er extends ct {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "reasoning_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class Nr extends ct {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "handoff_call_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class Rr extends ct {
  constructor(t, r, s) {
    super();
    _(this, "rawItem");
    _(this, "sourceAgent");
    _(this, "targetAgent");
    _(this, "type", "handoff_output_item");
    this.rawItem = t, this.sourceAgent = r, this.targetAgent = s;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      sourceAgent: this.sourceAgent.toJSON(),
      targetAgent: this.targetAgent.toJSON()
    };
  }
}
class Te extends ct {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "tool_approval_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
function ca(n) {
  if (n.type !== "message" || n.role !== "assistant")
    return;
  const e = n.content[n.content.length - 1];
  if (e.type === "output_text")
    return e.text;
}
function ou(n) {
  return n.output.length === 0 ? "" : ca(n.output[n.output.length - 1]) || "";
}
class uu {
  /**
   * @param data The raw responses stream events from the LLM.
   */
  constructor(e) {
    _(this, "data");
    /**
     * The type of the event.
     */
    _(this, "type", "raw_model_stream_event");
    this.data = e;
  }
}
class cu {
  /**
   * @param name The name of the event.
   * @param item The item that was created.
   */
  constructor(e, t) {
    _(this, "name");
    _(this, "item");
    _(this, "type", "run_item_stream_event");
    this.name = e, this.item = t;
  }
}
class du {
  /**
   * @param agent The new agent
   */
  constructor(e) {
    _(this, "agent");
    _(this, "type", "agent_updated_stream_event");
    this.agent = e;
  }
}
function _s(n, e, t, r) {
  var b;
  const s = [], a = [], i = [], o = [], l = [], c = [], p = new Map(r.map((v) => [v.toolName, v])), f = new Map(t.filter((v) => v.type === "function").map((v) => [v.name, v])), h = t.find((v) => v.type === "computer"), S = new Map(t.filter((v) => {
    var E;
    return v.type === "hosted_tool" && ((E = v.providerData) == null ? void 0 : E.type) === "mcp";
  }).map((v) => v).map((v) => [v.providerData.server_label, v]));
  for (const v of n.output) {
    if (v.type === "message")
      v.role === "assistant" && s.push(new Un(v, e));
    else if (v.type === "hosted_tool_call") {
      s.push(new et(v, e));
      const R = v.name;
      if (c.push(R), ((b = v.providerData) == null ? void 0 : b.type) === "mcp_approval_request" || v.name === "mcp_approval_request") {
        const z = v.providerData, W = z.server_label, ie = S.get(W);
        if (typeof ie > "u") {
          const Et = `MCP server (${W}) not found in Agent (${e.name})`;
          throw ht({
            message: Et,
            data: { mcp_server_label: W }
          }), new pe(Et);
        }
        const oe = new Te({
          type: "hosted_tool_call",
          // We must use this name to align with the name sent from the servers
          name: z.name,
          id: z.id,
          status: "in_progress",
          providerData: z
        }, e);
        l.push({
          requestItem: oe,
          mcpTool: ie
        }), ie.providerData.on_approval || s.push(oe);
      }
    } else if (v.type === "reasoning")
      s.push(new Er(v, e));
    else if (v.type === "computer_call") {
      if (s.push(new et(v, e)), c.push("computer_use"), !h)
        throw ht({
          message: "Model produced computer action without a computer tool.",
          data: {
            agent_name: e.name
          }
        }), new pe("Model produced computer action without a computer tool.");
      o.push({
        toolCall: v,
        computer: h
      });
    }
    if (v.type !== "function_call")
      continue;
    c.push(v.name);
    const E = p.get(v.name);
    if (E)
      s.push(new Nr(v, e)), a.push({
        toolCall: v,
        handoff: E
      });
    else {
      const R = f.get(v.name);
      if (!R)
        throw ht({
          message: `Tool ${v.name} not found in agent ${e.name}.`,
          data: {
            tool_name: v.name,
            agent_name: e.name
          }
        }), new pe(`Tool ${v.name} not found in agent ${e.name}.`);
      s.push(new et(v, e)), i.push({
        toolCall: v,
        tool: R
      });
    }
  }
  return {
    newItems: s,
    handoffs: a,
    functions: i,
    computerActions: o,
    mcpApprovalRequests: l,
    toolsUsed: c,
    hasToolsOrApprovalsToRun() {
      return a.length > 0 || i.length > 0 || l.length > 0 || o.length > 0;
    }
  };
}
const lu = le("type", [
  g({
    type: m("next_step_handoff"),
    newAgent: F()
  }),
  g({
    type: m("next_step_final_output"),
    output: d()
  }),
  g({
    type: m("next_step_run_again")
  }),
  g({
    type: m("next_step_interruption"),
    data: Y(d(), F())
  })
]);
class _e {
  constructor(e, t, r, s, a) {
    _(this, "originalInput");
    _(this, "modelResponse");
    _(this, "preStepItems");
    _(this, "newStepItems");
    _(this, "nextStep");
    this.originalInput = e, this.modelResponse = t, this.preStepItems = r, this.newStepItems = s, this.nextStep = a;
  }
  /**
   * The items generated during the agent run (i.e. everything generated after originalInput)
   */
  get generatedItems() {
    return this.preStepItems.concat(this.newStepItems);
  }
}
function ys(n, e, t) {
  return n.resetToolChoice && e.hasUsedTools(n) ? { ...t, toolChoice: void 0 } : t;
}
async function vs(n, e, t, r, s, a, i) {
  const o = t.filter((b) => b instanceof Te && "callId" in b.rawItem && b.rawItem.type === "function_call").map((b) => b.rawItem.callId), l = s.functions.filter((b) => o.includes(b.toolCall.callId)), c = await da(n, l, a, i), p = c.map((b) => b.runItem), f = s.mcpApprovalRequests.filter((b) => {
    var v;
    return b.requestItem.type === "tool_approval_item" && b.requestItem.rawItem.type === "hosted_tool_call" && ((v = b.requestItem.rawItem.providerData) == null ? void 0 : v.type) === "mcp_approval_request";
  });
  for (const b of f) {
    const v = b.requestItem.rawItem.id, E = i._context.isToolApproved({
      // Since this item name must be the same with the one sent from Responses API server
      toolName: b.requestItem.rawItem.name,
      callId: v
    });
    if (typeof E < "u") {
      const R = {
        approve: E,
        approval_request_id: v,
        reason: void 0
      };
      p.push(new et({
        type: "hosted_tool_call",
        name: "mcp_approval_response",
        providerData: R
      }, n));
    }
  }
  const h = await la(n, c, i), S = t.filter((b) => !(b instanceof Te));
  return h.isFinalOutput ? (a.emit("agent_end", i._context, n, h.finalOutput), n.emit("agent_end", i._context, h.finalOutput), new _e(e, r, S, p, {
    type: "next_step_final_output",
    output: h.finalOutput
  })) : h.isInterrupted ? new _e(e, r, S, p, {
    type: "next_step_interruption",
    data: {
      interruptions: h.interruptions
    }
  }) : new _e(e, r, S, p, { type: "next_step_run_again" });
}
async function ws(n, e, t, r, s, a, i) {
  const o = t;
  let l = s.newItems;
  const [c, p] = await Promise.all([
    da(n, s.functions, a, i),
    fu(n, s.computerActions, a, i._context)
  ]);
  if (l = l.concat(c.map((b) => b.runItem)), l = l.concat(p), s.mcpApprovalRequests.length > 0)
    for (const b of s.mcpApprovalRequests) {
      const v = b.mcpTool.providerData, E = b.requestItem.rawItem.providerData;
      if (v.on_approval) {
        const R = await v.on_approval(i._context, b.requestItem), z = {
          approve: R.approve,
          approval_request_id: E.id,
          reason: R.reason
        };
        l.push(new et({
          type: "hosted_tool_call",
          name: "mcp_approval_response",
          providerData: z
        }, n));
      } else {
        l.push(b.requestItem);
        const R = {
          type: "hosted_mcp_tool_approval",
          tool: b.mcpTool,
          runItem: new Te({
            type: "hosted_tool_call",
            name: E.name,
            id: E.id,
            arguments: E.arguments,
            status: "in_progress",
            providerData: E
          }, n)
        };
        c.push(R);
      }
    }
  if (s.handoffs.length > 0)
    return await hu(n, e, o, l, r, s.handoffs, a, i._context);
  const f = await la(n, c, i);
  if (f.isFinalOutput)
    return a.emit("agent_end", i._context, n, f.finalOutput), n.emit("agent_end", i._context, f.finalOutput), new _e(e, r, o, l, {
      type: "next_step_final_output",
      output: f.finalOutput
    });
  if (f.isInterrupted)
    return new _e(e, r, o, l, {
      type: "next_step_interruption",
      data: {
        interruptions: f.interruptions
      }
    });
  const h = l.filter((b) => b instanceof Un), S = h.length > 0 ? ca(h[h.length - 1].rawItem) : void 0;
  if (!S)
    return new _e(e, r, o, l, { type: "next_step_run_again" });
  if (n.outputType === "text" && !s.hasToolsOrApprovalsToRun())
    return new _e(e, r, o, l, {
      type: "next_step_final_output",
      output: S
    });
  if (n.outputType !== "text" && S) {
    const { parser: b } = Tr(n.outputType, "final_output"), [v] = await xr(() => b(S));
    if (v)
      throw ht({
        message: "Invalid output type",
        data: {
          error: String(v)
        }
      }), new pe("Invalid output type");
    return new _e(e, r, o, l, { type: "next_step_final_output", output: S });
  }
  return new _e(e, r, o, l, { type: "next_step_run_again" });
}
function Dn(n, e) {
  return {
    type: "function_call_result",
    name: n.name,
    callId: n.callId,
    status: "completed",
    output: {
      type: "text",
      text: it(e)
    }
  };
}
async function da(n, e, t, r) {
  async function s(a) {
    let i = a.toolCall.arguments;
    if (a.tool.parameters && (at(a.tool.parameters) ? i = a.tool.parameters.parse(i) : i = JSON.parse(i)), await a.tool.needsApproval(r._context, i, a.toolCall.callId)) {
      const l = r._context.isToolApproved({
        toolName: a.tool.name,
        callId: a.toolCall.callId
      });
      if (l === !1)
        return ps(async (c) => {
          const p = "Tool execution was not approved.";
          return c.setError({
            message: p,
            data: {
              tool_name: a.tool.name,
              error: `Tool execution for ${a.toolCall.callId} was manually rejected by user.`
            }
          }), c.spanData.output = p, {
            type: "function_output",
            tool: a.tool,
            output: p,
            runItem: new Ot(Dn(a.toolCall, p), n, p)
          };
        }, {
          data: {
            name: a.tool.name
          }
        });
      if (l !== !0)
        return {
          type: "function_approval",
          tool: a.tool,
          runItem: new Te(a.toolCall, n)
        };
    }
    return ps(async (l) => {
      t.config.traceIncludeSensitiveData && (l.spanData.input = a.toolCall.arguments);
      try {
        t.emit("agent_tool_start", r._context, n, a.tool, {
          toolCall: a.toolCall
        }), n.emit("agent_tool_start", r._context, a.tool, {
          toolCall: a.toolCall
        });
        const c = await a.tool.invoke(r._context, a.toolCall.arguments), p = it(c);
        return t.emit("agent_tool_end", r._context, n, a.tool, p, { toolCall: a.toolCall }), n.emit("agent_tool_end", r._context, a.tool, p, { toolCall: a.toolCall }), t.config.traceIncludeSensitiveData && (l.spanData.output = p), {
          type: "function_output",
          tool: a.tool,
          output: c,
          runItem: new Ot(Dn(a.toolCall, c), n, c)
        };
      } catch (c) {
        throw l.setError({
          message: "Error running tool",
          data: {
            tool_name: a.tool.name,
            error: String(c)
          }
        }), c;
      }
    }, {
      data: {
        name: a.tool.name
      }
    });
  }
  try {
    return await Promise.all(e.map(s));
  } catch (a) {
    throw new Ki(`Failed to run function tools: ${a}`, a, r);
  }
}
async function pu(n, e) {
  const t = e.action;
  let r;
  switch (t.type) {
    case "click":
      await n.click(t.x, t.y, t.button);
      break;
    case "double_click":
      await n.doubleClick(t.x, t.y);
      break;
    case "drag":
      await n.drag(t.path.map((s) => [s.x, s.y]));
      break;
    case "keypress":
      await n.keypress(t.keys);
      break;
    case "move":
      await n.move(t.x, t.y);
      break;
    case "screenshot":
      r = await n.screenshot();
      break;
    case "scroll":
      await n.scroll(t.x, t.y, t.scroll_x, t.scroll_y);
      break;
    case "type":
      await n.type(t.text);
      break;
    case "wait":
      await n.wait();
      break;
  }
  if (typeof r < "u" || typeof n.screenshot == "function" && (r = await n.screenshot(), typeof r < "u"))
    return r;
  throw new Error("Computer does not implement screenshot()");
}
async function fu(n, e, t, r, s = void 0) {
  const a = s ?? O, i = [];
  for (const o of e) {
    const l = o.computer.computer, c = o.toolCall;
    t.emit("agent_tool_start", r, n, o.computer, {
      toolCall: c
    }), typeof n.emit == "function" && n.emit("agent_tool_start", r, o.computer, { toolCall: c });
    let p;
    try {
      p = await pu(l, c);
    } catch (S) {
      a.error("Failed to execute computer action:", S), p = "";
    }
    t.emit("agent_tool_end", r, n, o.computer, p, {
      toolCall: c
    }), typeof n.emit == "function" && n.emit("agent_tool_end", r, o.computer, p, {
      toolCall: c
    });
    const f = p ? `data:image/png;base64,${p}` : "", h = {
      type: "computer_call_result",
      callId: c.callId,
      output: { type: "computer_screenshot", data: f }
    };
    i.push(new Ot(h, n, f));
  }
  return i;
}
async function hu(n, e, t, r, s, a, i, o) {
  if (r = [...r], a.length === 0)
    return O.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."), new _e(e, s, t, r, { type: "next_step_run_again" });
  if (a.length > 1) {
    const c = "Multiple handoffs detected, ignoring this one.";
    for (let p = 1; p < a.length; p++)
      r.push(new Ot(Dn(a[p].toolCall, c), n, c));
  }
  const l = a[0];
  return Ro(async (c) => {
    const p = l.handoff, f = await p.onInvokeHandoff(o, l.toolCall.arguments);
    if (c.spanData.to_agent = f.name, a.length > 1) {
      const S = a.map((b) => b.handoff.agentName);
      c.setError({
        message: "Multiple handoffs requested",
        data: {
          requested_agents: S
        }
      });
    }
    r.push(new Rr(Dn(l.toolCall, Xs(f)), n, f)), i.emit("agent_handoff", o, n, f), n.emit("agent_handoff", o, f);
    const h = p.inputFilter ?? i.config.handoffInputFilter;
    if (h) {
      O.debug("Filtering inputs for handoff"), typeof h != "function" && c.setError({
        message: "Invalid input filter",
        data: {
          details: "not callable"
        }
      });
      const S = {
        inputHistory: Array.isArray(e) ? [...e] : e,
        preHandoffItems: [...t],
        newItems: [...r],
        runContext: o
      }, b = h(S);
      e = b.inputHistory, t = b.preHandoffItems, r = b.newItems;
    }
    return new _e(e, s, t, r, { type: "next_step_handoff", newAgent: f });
  }, {
    data: {
      from_agent: n.name
    }
  });
}
const fn = {
  isFinalOutput: !1,
  isInterrupted: void 0
};
async function la(n, e, t) {
  if (e.length === 0)
    return fn;
  const r = e.filter((i) => i.runItem instanceof Te).map((i) => i.runItem);
  if (r.length > 0)
    return {
      isFinalOutput: !1,
      isInterrupted: !0,
      interruptions: r
    };
  if (n.toolUseBehavior === "run_llm_again")
    return fn;
  const s = e[0];
  if (n.toolUseBehavior === "stop_on_first_tool")
    return (s == null ? void 0 : s.type) === "function_output" ? {
      isFinalOutput: !0,
      isInterrupted: void 0,
      finalOutput: it(s.output)
    } : fn;
  const a = n.toolUseBehavior;
  if (typeof a == "object") {
    const i = e.find((o) => a.stopAtToolNames.includes(o.tool.name));
    return (i == null ? void 0 : i.type) === "function_output" ? {
      isFinalOutput: !0,
      isInterrupted: void 0,
      finalOutput: it(i.output)
    } : fn;
  }
  if (typeof a == "function")
    return a(t._context, e);
  throw new X(`Invalid toolUseBehavior: ${a}`, t);
}
function xs(n, e) {
  for (const t of e.newStepItems) {
    let r;
    if (t instanceof Un)
      r = "message_output_created";
    else if (t instanceof Nr)
      r = "handoff_requested";
    else if (t instanceof Rr)
      r = "handoff_occurred";
    else if (t instanceof et)
      r = "tool_called";
    else if (t instanceof Ot)
      r = "tool_output";
    else if (t instanceof Er)
      r = "reasoning_item_created";
    else if (t instanceof Te)
      r = "tool_approval_requested";
    else {
      O.warn("Unknown item type: ", t);
      continue;
    }
    n._addItem(new cu(r, t));
  }
}
var bt;
class bs {
  constructor() {
    k(this, bt, /* @__PURE__ */ new Map());
  }
  addToolUse(e, t) {
    u(this, bt).set(e, t);
  }
  hasUsedTools(e) {
    return u(this, bt).has(e);
  }
  toJSON() {
    return Object.fromEntries(Array.from(u(this, bt).entries()).map(([e, t]) => [e.name, t]));
  }
}
bt = new WeakMap();
const mn = "1.0", mu = m(mn), ve = g({
  name: d()
}), gu = g({
  object: m("trace.span"),
  id: d(),
  trace_id: d(),
  parent_id: d().nullable(),
  started_at: d().nullable(),
  ended_at: d().nullable(),
  error: g({
    message: d(),
    data: Y(d(), F()).optional()
  }).nullable(),
  span_data: Y(d(), F())
}), pa = gu.extend({
  previous_span: ci(() => pa).optional()
}), fa = g({
  requests: C(),
  inputTokens: C(),
  outputTokens: C(),
  totalTokens: C()
}), Ss = g({
  usage: fa,
  output: U(Or),
  responseId: d().optional(),
  providerData: Y(d(), F()).optional()
}), ha = le("type", [
  g({
    type: m("message_output_item"),
    rawItem: Zn,
    agent: ve
  }),
  g({
    type: m("tool_call_item"),
    rawItem: tu.or(Lt),
    agent: ve
  }),
  g({
    type: m("tool_call_output_item"),
    rawItem: mr,
    agent: ve,
    output: d()
  }),
  g({
    type: m("reasoning_item"),
    rawItem: Cr,
    agent: ve
  }),
  g({
    type: m("handoff_call_item"),
    rawItem: Ut,
    agent: ve
  }),
  g({
    type: m("handoff_output_item"),
    rawItem: mr,
    sourceAgent: ve,
    targetAgent: ve
  }),
  g({
    type: m("tool_approval_item"),
    rawItem: Ut.or(Lt),
    agent: ve
  })
]), _u = g({
  object: m("trace"),
  id: d(),
  workflow_name: d(),
  group_id: d().nullable(),
  metadata: Y(d(), F())
}), yu = g({
  newItems: U(ha),
  toolsUsed: U(d()),
  handoffs: U(g({
    toolCall: F(),
    handoff: F()
  })),
  functions: U(g({
    toolCall: F(),
    tool: F()
  })),
  computerActions: U(g({
    toolCall: F(),
    computer: F()
  })),
  mcpApprovalRequests: U(g({
    requestItem: g({
      // protocol.HostedToolCallItem
      rawItem: g({
        type: m("hosted_tool_call"),
        name: d(),
        arguments: d().optional(),
        status: d().optional(),
        output: d().optional(),
        // this always exists but marked as optional for early version compatibility; when releasing 1.0, we can remove the nullable and optional
        providerData: Y(d(), F()).nullable().optional()
      })
    }),
    // HostedMCPTool
    mcpTool: g({
      type: m("hosted_tool"),
      name: m("hosted_mcp"),
      providerData: Y(d(), F())
    })
  })).optional()
}), ma = g({
  tripwireTriggered: Dt(),
  outputInfo: F()
}), vu = g({
  guardrail: g({
    type: m("input"),
    name: d()
  }),
  output: ma
}), wu = g({
  guardrail: g({
    type: m("output"),
    name: d()
  }),
  agentOutput: F(),
  agent: ve,
  output: ma
}), Ts = g({
  $schemaVersion: mu,
  currentTurn: C(),
  currentAgent: ve,
  originalInput: d().or(U(nu)),
  modelResponses: U(Ss),
  context: g({
    usage: fa,
    approvals: Y(d(), g({
      approved: U(d()).or(Dt()),
      rejected: U(d()).or(Dt())
    })),
    context: Y(d(), F())
  }),
  toolUseTracker: Y(d(), U(d())),
  maxTurns: C(),
  currentAgentSpan: pa.nullable().optional(),
  noActiveAgentRun: Dt(),
  inputGuardrailResults: U(vu),
  outputGuardrailResults: U(wu),
  currentStep: lu.optional(),
  lastModelResponse: Ss.optional(),
  generatedItems: U(ha),
  lastProcessedResponse: yu.optional(),
  trace: _u.nullable()
});
class Be {
  constructor(e, t, r, s) {
    /**
     * Current turn number in the conversation.
     */
    _(this, "_currentTurn", 0);
    /**
     * The agent currently handling the conversation.
     */
    _(this, "_currentAgent");
    /**
     * Original user input prior to any processing.
     */
    _(this, "_originalInput");
    /**
     * Responses from the model so far.
     */
    _(this, "_modelResponses");
    /**
     * Active tracing span for the current agent if tracing is enabled.
     */
    _(this, "_currentAgentSpan");
    /**
     * Run context tracking approvals, usage, and other metadata.
     */
    _(this, "_context");
    /**
     * Tracks what tools each agent has used.
     */
    _(this, "_toolUseTracker");
    /**
     * Items generated by the agent during the run.
     */
    _(this, "_generatedItems");
    /**
     * Maximum allowed turns before forcing termination.
     */
    _(this, "_maxTurns");
    /**
     * Whether the run has an active agent step in progress.
     */
    _(this, "_noActiveAgentRun", !0);
    /**
     * Last model response for the previous turn.
     */
    _(this, "_lastTurnResponse");
    /**
     * Results from input guardrails applied to the run.
     */
    _(this, "_inputGuardrailResults");
    /**
     * Results from output guardrails applied to the run.
     */
    _(this, "_outputGuardrailResults");
    /**
     * Next step computed for the agent to take.
     */
    _(this, "_currentStep");
    /**
     * Parsed model response after applying guardrails and tools.
     */
    _(this, "_lastProcessedResponse");
    /**
     * Trace associated with this run if tracing is enabled.
     */
    _(this, "_trace", null);
    this._context = e, this._originalInput = structuredClone(t), this._modelResponses = [], this._currentAgentSpan = void 0, this._currentAgent = r, this._toolUseTracker = new bs(), this._generatedItems = [], this._maxTurns = s, this._inputGuardrailResults = [], this._outputGuardrailResults = [], this._trace = jt();
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during the run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return Jt(this._originalInput, this._generatedItems);
  }
  /**
   * Returns all interruptions if the current step is an interruption otherwise returns an empty array.
   */
  getInterruptions() {
    var e;
    return ((e = this._currentStep) == null ? void 0 : e.type) !== "next_step_interruption" ? [] : this._currentStep.data.interruptions;
  }
  /**
   * Approves a tool call requested by the agent through an interruption and approval item request.
   *
   * To approve the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only approve the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysApprove` option to `true`.
   *
   * @param approvalItem - The tool call approval item to approve.
   * @param options - Options for the approval.
   */
  approve(e, t = { alwaysApprove: !1 }) {
    this._context.approveTool(e, t);
  }
  /**
   * Rejects a tool call requested by the agent through an interruption and approval item request.
   *
   * To reject the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only reject the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysReject` option to `true`.
   *
   * @param approvalItem - The tool call approval item to reject.
   * @param options - Options for the rejection.
   */
  reject(e, t = { alwaysReject: !1 }) {
    this._context.rejectTool(e, t);
  }
  /**
   * Serializes the run state to a JSON object.
   *
   * This method is used to serialize the run state to a JSON object that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toJSON() {
    var r;
    const e = {
      $schemaVersion: mn,
      currentTurn: this._currentTurn,
      currentAgent: {
        name: this._currentAgent.name
      },
      originalInput: this._originalInput,
      modelResponses: this._modelResponses.map((s) => ({
        usage: {
          requests: s.usage.requests,
          inputTokens: s.usage.inputTokens,
          outputTokens: s.usage.outputTokens,
          totalTokens: s.usage.totalTokens
        },
        output: s.output,
        responseId: s.responseId,
        providerData: s.providerData
      })),
      context: this._context.toJSON(),
      toolUseTracker: this._toolUseTracker.toJSON(),
      maxTurns: this._maxTurns,
      currentAgentSpan: (r = this._currentAgentSpan) == null ? void 0 : r.toJSON(),
      noActiveAgentRun: this._noActiveAgentRun,
      inputGuardrailResults: this._inputGuardrailResults,
      outputGuardrailResults: this._outputGuardrailResults.map((s) => ({
        ...s,
        agent: s.agent.toJSON()
      })),
      currentStep: this._currentStep,
      lastModelResponse: this._lastTurnResponse,
      generatedItems: this._generatedItems.map((s) => s.toJSON()),
      lastProcessedResponse: this._lastProcessedResponse,
      trace: this._trace ? this._trace.toJSON() : null
    }, t = Ts.safeParse(e);
    if (!t.success)
      throw new Wi(`Failed to serialize run state. ${t.error.message}`);
    return t.data;
  }
  /**
   * Serializes the run state to a string.
   *
   * This method is used to serialize the run state to a string that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toString() {
    return JSON.stringify(this.toJSON());
  }
  /**
   * Deserializes a run state from a string.
   *
   * This method is used to deserialize a run state from a string that was serialized using the
   * `toString` method.
   */
  static async fromString(e, t) {
    var f, h, S, b, v;
    const [r, s] = await xr(() => JSON.parse(t));
    if (r)
      throw new X(`Failed to parse run state. ${r instanceof Error ? r.message : String(r)}`);
    const a = s.$schemaVersion;
    if (!a)
      throw new X("Run state is missing schema version");
    if (a !== mn)
      throw new X(`Run state schema version ${a} is not supported. Please use version ${mn}`);
    const i = Ts.parse(JSON.parse(t)), o = xu(e), l = new pt(i.context.context);
    l._rebuildApprovals(i.context.approvals);
    const c = o.get(i.currentAgent.name);
    if (!c)
      throw new X(`Agent ${i.currentAgent.name} not found`);
    const p = new Be(l, "", c, i.maxTurns);
    p._currentTurn = i.currentTurn, p._toolUseTracker = new bs();
    for (const [E, R] of Object.entries(i.toolUseTracker))
      p._toolUseTracker.addToolUse(o.get(E), R);
    if (i.currentAgentSpan) {
      i.trace || O.warn("Trace is not set, skipping tracing setup");
      const E = ke().createTrace({
        traceId: (f = i.trace) == null ? void 0 : f.id,
        name: (h = i.trace) == null ? void 0 : h.workflow_name,
        groupId: ((S = i.trace) == null ? void 0 : S.group_id) ?? void 0,
        metadata: (b = i.trace) == null ? void 0 : b.metadata
      });
      p._currentAgentSpan = ga(E, i.currentAgentSpan), p._trace = E;
    }
    return p._noActiveAgentRun = i.noActiveAgentRun, p._inputGuardrailResults = i.inputGuardrailResults, p._outputGuardrailResults = i.outputGuardrailResults.map((E) => ({
      ...E,
      agent: o.get(E.agent.name)
    })), p._currentStep = i.currentStep, p._originalInput = i.originalInput, p._modelResponses = i.modelResponses.map(ks), p._lastTurnResponse = i.lastModelResponse ? ks(i.lastModelResponse) : void 0, p._generatedItems = i.generatedItems.map((E) => _a(E, o)), p._lastProcessedResponse = i.lastProcessedResponse ? await bu(o, p._currentAgent, p._context, i.lastProcessedResponse) : void 0, ((v = i.currentStep) == null ? void 0 : v.type) === "next_step_handoff" && (p._currentStep = {
      type: "next_step_handoff",
      newAgent: o.get(i.currentStep.newAgent.name)
    }), p;
  }
}
function xu(n) {
  const e = /* @__PURE__ */ new Map(), t = [n];
  for (; t.length > 0; ) {
    const r = t.shift();
    if (!e.has(r.name)) {
      e.set(r.name, r);
      for (const s of r.handoffs)
        s instanceof ot ? e.has(s.name) || t.push(s) : s.agent && (e.has(s.agent.name) || t.push(s.agent));
    }
  }
  return e;
}
function ga(n, e) {
  const t = e.span_data, r = e.previous_span ? ga(n, e.previous_span) : void 0, s = ke().createSpan({
    spanId: e.id,
    traceId: e.trace_id,
    parentId: e.parent_id ?? void 0,
    startedAt: e.started_at ?? void 0,
    endedAt: e.ended_at ?? void 0,
    data: t
  }, n);
  return s.previousSpan = r, s;
}
function ks(n) {
  const e = new Ln();
  return e.requests = n.usage.requests, e.inputTokens = n.usage.inputTokens, e.outputTokens = n.usage.outputTokens, e.totalTokens = n.usage.totalTokens, {
    usage: e,
    output: n.output.map((t) => Or.parse(t)),
    responseId: n.responseId,
    providerData: n.providerData
  };
}
function _a(n, e) {
  switch (n.type) {
    case "message_output_item":
      return new Un(n.rawItem, e.get(n.agent.name));
    case "tool_call_item":
      return new et(n.rawItem, e.get(n.agent.name));
    case "tool_call_output_item":
      return new Ot(n.rawItem, e.get(n.agent.name), n.output);
    case "reasoning_item":
      return new Er(n.rawItem, e.get(n.agent.name));
    case "handoff_call_item":
      return new Nr(n.rawItem, e.get(n.agent.name));
    case "handoff_output_item":
      return new Rr(n.rawItem, e.get(n.sourceAgent.name), e.get(n.targetAgent.name));
    case "tool_approval_item":
      return new Te(n.rawItem, e.get(n.agent.name));
  }
}
async function bu(n, e, t, r) {
  const s = await e.getAllTools(t), a = new Map(s.filter((c) => c.type === "function").map((c) => [c.name, c])), i = new Map(s.filter((c) => c.type === "computer").map((c) => [c.name, c])), o = new Map(e.handoffs.map((c) => c instanceof ot ? [c.name, ea(c)] : [c.toolName, c])), l = {
    newItems: r.newItems.map((c) => _a(c, n)),
    toolsUsed: r.toolsUsed,
    handoffs: r.handoffs.map((c) => {
      if (!o.has(c.handoff.toolName))
        throw new X(`Handoff ${c.handoff.toolName} not found`);
      return {
        toolCall: c.toolCall,
        handoff: o.get(c.handoff.toolName)
      };
    }),
    functions: await Promise.all(r.functions.map(async (c) => {
      if (!a.has(c.tool.name))
        throw new X(`Tool ${c.tool.name} not found`);
      return {
        toolCall: c.toolCall,
        tool: a.get(c.tool.name)
      };
    })),
    computerActions: r.computerActions.map((c) => {
      const p = c.computer.name;
      if (!i.has(p))
        throw new X(`Computer tool ${p} not found`);
      return {
        toolCall: c.toolCall,
        computer: i.get(p)
      };
    }),
    mcpApprovalRequests: (r.mcpApprovalRequests ?? []).map((c) => ({
      requestItem: new Te(c.requestItem.rawItem, e),
      mcpTool: c.mcpTool
    }))
  };
  return {
    ...l,
    hasToolsOrApprovalsToRun() {
      return l.handoffs.length > 0 || l.functions.length > 0 || l.mcpApprovalRequests.length > 0 || l.computerActions.length > 0;
    }
  };
}
const Is = 10;
function As(n, e) {
  return n ? !1 : e ? !0 : "enabled_without_data";
}
function Jt(n, e) {
  const t = e.filter((r) => r.type !== "tool_approval_item").map((r) => r.rawItem);
  return typeof n == "string" && (n = [{ type: "message", role: "user", content: n }]), [...n, ...t];
}
var ne, gr, _r, yr, ya, vr;
class Su extends Fo {
  constructor(t = {}) {
    super();
    k(this, ne);
    _(this, "config");
    _(this, "inputGuardrailDefs");
    _(this, "outputGuardrailDefs");
    this.config = {
      modelProvider: t.modelProvider ?? Uo(),
      model: t.model,
      modelSettings: t.modelSettings,
      handoffInputFilter: t.handoffInputFilter,
      inputGuardrails: t.inputGuardrails,
      outputGuardrails: t.outputGuardrails,
      tracingDisabled: t.tracingDisabled ?? !1,
      traceIncludeSensitiveData: t.traceIncludeSensitiveData ?? !0,
      workflowName: t.workflowName ?? "Agent workflow",
      traceId: t.traceId,
      groupId: t.groupId,
      traceMetadata: t.traceMetadata
    }, this.inputGuardrailDefs = (t.inputGuardrails ?? []).map(hs), this.outputGuardrailDefs = (t.outputGuardrails ?? []).map(hr);
  }
  run(t, r, s = {
    stream: !1,
    context: void 0
  }) {
    return r instanceof Be && r._trace ? vo(r._trace, async () => (r._currentAgentSpan && hn(r._currentAgentSpan), s != null && s.stream ? $(this, ne, vr).call(this, t, r, s) : $(this, ne, gr).call(this, t, r, s))) : wo(async () => s != null && s.stream ? $(this, ne, vr).call(this, t, r, s) : $(this, ne, gr).call(this, t, r, s), {
      traceId: this.config.traceId,
      name: this.config.workflowName,
      groupId: this.config.groupId,
      metadata: this.config.traceMetadata
    });
  }
}
ne = new WeakSet(), gr = async function(t, r, s) {
  return lr(async () => {
    var i, o;
    const a = r instanceof Be ? r : new Be(s.context instanceof pt ? s.context : new pt(s.context), r, t, s.maxTurns ?? Is);
    try {
      for (; ; ) {
        let l = Cs(a._currentAgent.model, this.config.model);
        if (typeof l == "string" && (l = await this.config.modelProvider.getModel(l)), a._currentStep = a._currentStep ?? {
          type: "next_step_run_again"
        }, a._currentStep.type === "next_step_interruption") {
          if (O.debug("Continuing from interruption"), !a._lastTurnResponse || !a._lastProcessedResponse)
            throw new X("No model response found in previous state", a);
          const c = await vs(a._currentAgent, a._originalInput, a._generatedItems, a._lastTurnResponse, a._lastProcessedResponse, this, a);
          if (a._toolUseTracker.addToolUse(a._currentAgent, a._lastProcessedResponse.toolsUsed), a._originalInput = c.originalInput, a._generatedItems = c.generatedItems, a._currentStep = c.nextStep, c.nextStep.type === "next_step_interruption")
            return new Qn(a);
          continue;
        }
        if (a._currentStep.type === "next_step_run_again") {
          const c = [];
          if (a._currentAgent.handoffs && c.push(...a._currentAgent.handoffs.map(Rn)), !a._currentAgentSpan) {
            const R = c.map((z) => z.agentName);
            a._currentAgentSpan = ls({
              data: {
                name: a._currentAgent.name,
                handoffs: R,
                output_type: a._currentAgent.outputSchemaName
              }
            }), a._currentAgentSpan.start(), hn(a._currentAgentSpan);
          }
          const p = await a._currentAgent.getAllTools(a._context), f = p.map((R) => ms(R)), h = c.map((R) => gs(R));
          if (a._currentAgentSpan && (a._currentAgentSpan.spanData.tools = p.map((R) => R.name)), a._currentTurn++, a._currentTurn > a._maxTurns)
            throw (i = a._currentAgentSpan) == null || i.setError({
              message: "Max turns exceeded",
              data: { max_turns: a._maxTurns }
            }), new Qr(`Max turns (${a._maxTurns}) exceeded`, a);
          O.debug(`Running agent ${a._currentAgent.name} (turn ${a._currentTurn})`), a._currentTurn === 1 && await $(this, ne, _r).call(this, a);
          const S = Jt(a._originalInput, a._generatedItems);
          a._noActiveAgentRun && (a._currentAgent.emit("agent_start", a._context, a._currentAgent), this.emit("agent_start", a._context, a._currentAgent));
          let b = {
            ...this.config.modelSettings,
            ...a._currentAgent.modelSettings
          };
          b = ys(a._currentAgent, a._toolUseTracker, b), a._lastTurnResponse = await l.getResponse({
            systemInstructions: await a._currentAgent.getSystemPrompt(a._context),
            prompt: await a._currentAgent.getPrompt(a._context),
            input: S,
            previousResponseId: s.previousResponseId,
            modelSettings: b,
            tools: f,
            outputType: ns(a._currentAgent.outputType),
            handoffs: h,
            tracing: As(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
            signal: s.signal
          }), a._modelResponses.push(a._lastTurnResponse), a._context.usage.add(a._lastTurnResponse.usage), a._noActiveAgentRun = !1;
          const v = _s(a._lastTurnResponse, a._currentAgent, p, c);
          a._lastProcessedResponse = v;
          const E = await ws(a._currentAgent, a._originalInput, a._generatedItems, a._lastTurnResponse, a._lastProcessedResponse, this, a);
          a._toolUseTracker.addToolUse(a._currentAgent, a._lastProcessedResponse.toolsUsed), a._originalInput = E.originalInput, a._generatedItems = E.generatedItems, a._currentStep = E.nextStep;
        }
        if (a._currentStep && a._currentStep.type === "next_step_final_output")
          return await $(this, ne, yr).call(this, a, a._currentStep.output), this.emit("agent_end", a._context, a._currentAgent, a._currentStep.output), a._currentAgent.emit("agent_end", a._context, a._currentStep.output), new Qn(a);
        if (a._currentStep && a._currentStep.type === "next_step_handoff")
          a._currentAgent = a._currentStep.newAgent, a._currentAgentSpan && (a._currentAgentSpan.end(), Rt(), a._currentAgentSpan = void 0), a._noActiveAgentRun = !0, a._currentStep = { type: "next_step_run_again" };
        else {
          if (a._currentStep && a._currentStep.type === "next_step_interruption")
            return new Qn(a);
          O.debug("Running next loop");
        }
      }
    } catch (l) {
      throw a._currentAgentSpan && a._currentAgentSpan.setError({
        message: "Error in agent run",
        data: { error: String(l) }
      }), l;
    } finally {
      a._currentAgentSpan && (((o = a._currentStep) == null ? void 0 : o.type) !== "next_step_interruption" && a._currentAgentSpan.end(), Rt());
    }
  });
}, _r = async function(t) {
  const r = this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map(hs));
  if (r.length > 0) {
    const s = {
      agent: t._currentAgent,
      input: t._originalInput,
      context: t._context
    };
    try {
      const a = await Promise.all(r.map(async (i) => fs(async (o) => {
        const l = await i.run(s);
        return o.spanData.triggered = l.output.tripwireTriggered, l;
      }, { data: { name: i.name } }, t._currentAgentSpan)));
      for (const i of a)
        if (i.output.tripwireTriggered)
          throw t._currentAgentSpan && t._currentAgentSpan.setError({
            message: "Guardrail tripwire triggered",
            data: { guardrail: i.guardrail.name }
          }), new ts(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`, i, t);
    } catch (a) {
      throw a instanceof ts ? a : (t._currentTurn--, new es(`Input guardrail failed to complete: ${a}`, a, t));
    }
  }
}, yr = async function(t, r) {
  const s = this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(hr));
  if (s.length > 0) {
    const a = t._currentAgent.processFinalOutput(r), i = {
      agent: t._currentAgent,
      agentOutput: a,
      context: t._context,
      details: { modelResponse: t._lastTurnResponse }
    };
    try {
      const o = await Promise.all(s.map(async (l) => fs(async (c) => {
        const p = await l.run(i);
        return c.spanData.triggered = p.output.tripwireTriggered, p;
      }, { data: { name: l.name } }, t._currentAgentSpan)));
      for (const l of o)
        if (l.output.tripwireTriggered)
          throw t._currentAgentSpan && t._currentAgentSpan.setError({
            message: "Guardrail tripwire triggered",
            data: { guardrail: l.guardrail.name }
          }), new cr(`Output guardrail triggered: ${JSON.stringify(l.output.outputInfo)}`, l, t);
    } catch (o) {
      throw o instanceof cr ? o : new es(`Output guardrail failed to complete: ${o}`, o, t);
    }
  }
}, ya = async function(t, r) {
  var s, a, i;
  try {
    for (; ; ) {
      const o = t.state._currentAgent, l = o.handoffs.map(Rn), c = await o.getAllTools(t.state._context), p = c.map((h) => ms(h)), f = l.map((h) => gs(h));
      if (t.state._currentStep = t.state._currentStep ?? {
        type: "next_step_run_again"
      }, t.state._currentStep.type === "next_step_interruption") {
        if (O.debug("Continuing from interruption"), !t.state._lastTurnResponse || !t.state._lastProcessedResponse)
          throw new X("No model response found in previous state", t.state);
        const h = await vs(t.state._currentAgent, t.state._originalInput, t.state._generatedItems, t.state._lastTurnResponse, t.state._lastProcessedResponse, this, t.state);
        if (xs(t, h), t.state._toolUseTracker.addToolUse(t.state._currentAgent, t.state._lastProcessedResponse.toolsUsed), t.state._originalInput = h.originalInput, t.state._generatedItems = h.generatedItems, t.state._currentStep = h.nextStep, h.nextStep.type === "next_step_interruption")
          return;
        continue;
      }
      if (t.state._currentStep.type === "next_step_run_again") {
        if (!t.state._currentAgentSpan) {
          const z = l.map((W) => W.agentName);
          t.state._currentAgentSpan = ls({
            data: {
              name: o.name,
              handoffs: z,
              tools: c.map((W) => W.name),
              output_type: o.outputSchemaName
            }
          }), t.state._currentAgentSpan.start(), hn(t.state._currentAgentSpan);
        }
        if (t.state._currentTurn++, t.state._currentTurn > t.state._maxTurns)
          throw (s = t.state._currentAgentSpan) == null || s.setError({
            message: "Max turns exceeded",
            data: { max_turns: t.state._maxTurns }
          }), new Qr(`Max turns (${t.state._maxTurns}) exceeded`, t.state);
        O.debug(`Running agent ${o.name} (turn ${t.state._currentTurn})`);
        let h = Cs(o.model, this.config.model);
        typeof h == "string" && (h = await this.config.modelProvider.getModel(h)), t.state._currentTurn === 1 && await $(this, ne, _r).call(this, t.state);
        let S = {
          ...this.config.modelSettings,
          ...o.modelSettings
        };
        S = ys(o, t.state._toolUseTracker, S);
        const b = Jt(t.input, t.newItems);
        t.state._noActiveAgentRun && (o.emit("agent_start", t.state._context, o), this.emit("agent_start", t.state._context, o));
        let v;
        for await (const z of h.getStreamedResponse({
          systemInstructions: await o.getSystemPrompt(t.state._context),
          prompt: await o.getPrompt(t.state._context),
          input: b,
          previousResponseId: r.previousResponseId,
          modelSettings: S,
          tools: p,
          handoffs: f,
          outputType: ns(o.outputType),
          tracing: As(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
          signal: r.signal
        })) {
          if (z.type === "response_done") {
            const W = oa.parse(z);
            v = {
              usage: new Ln(W.response.usage),
              output: W.response.output,
              responseId: W.response.id
            };
          }
          if (t.cancelled)
            return;
          t._addItem(new uu(z));
        }
        if (t.state._noActiveAgentRun = !1, !v)
          throw new pe("Model did not produce a final response!", t.state);
        t.state._lastTurnResponse = v, t.state._modelResponses.push(t.state._lastTurnResponse);
        const E = _s(t.state._lastTurnResponse, o, c, l);
        t.state._lastProcessedResponse = E;
        const R = await ws(o, t.state._originalInput, t.state._generatedItems, t.state._lastTurnResponse, t.state._lastProcessedResponse, this, t.state);
        xs(t, R), t.state._toolUseTracker.addToolUse(o, E.toolsUsed), t.state._originalInput = R.originalInput, t.state._generatedItems = R.generatedItems, t.state._currentStep = R.nextStep;
      }
      if (t.state._currentStep.type === "next_step_final_output") {
        await $(this, ne, yr).call(this, t.state, t.state._currentStep.output);
        return;
      } else {
        if (t.state._currentStep.type === "next_step_interruption")
          return;
        t.state._currentStep.type === "next_step_handoff" ? (t.state._currentAgent = (a = t.state._currentStep) == null ? void 0 : a.newAgent, t.state._currentAgentSpan && (t.state._currentAgentSpan.end(), Rt()), t.state._currentAgentSpan = void 0, t._addItem(new du(t.state._currentAgent)), t.state._noActiveAgentRun = !0, t.state._currentStep = {
          type: "next_step_run_again"
        }) : O.debug("Running next loop");
      }
    }
  } catch (o) {
    throw t.state._currentAgentSpan && t.state._currentAgentSpan.setError({
      message: "Error in agent run",
      data: { error: String(o) }
    }), o;
  } finally {
    t.state._currentAgentSpan && (((i = t.state._currentStep) == null ? void 0 : i.type) !== "next_step_interruption" && t.state._currentAgentSpan.end(), Rt());
  }
}, vr = async function(t, r, s) {
  return s = s ?? {}, lr(async () => {
    const a = r instanceof Be ? r : new Be(s.context instanceof pt ? s.context : new pt(s.context), r, t, s.maxTurns ?? Is), i = new iu({
      signal: s.signal,
      state: a
    });
    return i.maxTurns = s.maxTurns ?? a._maxTurns, $(this, ne, ya).call(this, i, s).then(() => {
      i._done();
    }, (o) => {
      i._raiseError(o);
    }), i;
  });
};
function Cs(n, e) {
  return typeof n == "string" && n !== ot.DEFAULT_MODEL_PLACEHOLDER || n ? n : e ?? n ?? ot.DEFAULT_MODEL_PLACEHOLDER;
}
const ft = class ft extends $o {
  constructor(t) {
    super();
    _(this, "name");
    _(this, "instructions");
    _(this, "prompt");
    _(this, "handoffDescription");
    _(this, "handoffs");
    _(this, "model");
    _(this, "modelSettings");
    _(this, "tools");
    _(this, "mcpServers");
    _(this, "inputGuardrails");
    _(this, "outputGuardrails");
    _(this, "outputType", "text");
    _(this, "toolUseBehavior");
    _(this, "resetToolChoice");
    if (typeof t.name != "string" || t.name.trim() === "")
      throw new X("Agent must have a name.");
    if (this.name = t.name, this.instructions = t.instructions ?? ft.DEFAULT_MODEL_PLACEHOLDER, this.prompt = t.prompt, this.handoffDescription = t.handoffDescription ?? "", this.handoffs = t.handoffs ?? [], this.model = t.model ?? "", this.modelSettings = t.modelSettings ?? {}, this.tools = t.tools ?? [], this.mcpServers = t.mcpServers ?? [], this.inputGuardrails = t.inputGuardrails ?? [], this.outputGuardrails = t.outputGuardrails ?? [], t.outputType && (this.outputType = t.outputType), this.toolUseBehavior = t.toolUseBehavior ?? "run_llm_again", this.resetToolChoice = t.resetToolChoice ?? !0, (t.handoffOutputTypeWarningEnabled === void 0 || t.handoffOutputTypeWarningEnabled) && this.handoffs && this.outputType) {
      const r = /* @__PURE__ */ new Set([JSON.stringify(this.outputType)]);
      for (const s of this.handoffs)
        "outputType" in s && s.outputType ? r.add(JSON.stringify(s.outputType)) : "agent" in s && s.agent.outputType && r.add(JSON.stringify(s.agent.outputType));
      r.size > 1 && O.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`);
    }
  }
  /**
   * Create an Agent with handoffs and automatically infer the union type for TOutput from the handoff agents' output types.
   */
  static create(t) {
    return new ft({
      ...t,
      handoffs: t.handoffs,
      outputType: t.outputType,
      handoffOutputTypeWarningEnabled: !1
    });
  }
  /**
   * Output schema name.
   */
  get outputSchemaName() {
    if (this.outputType === "text")
      return "text";
    if (at(this.outputType))
      return "ZodOutput";
    if (typeof this.outputType == "object")
      return this.outputType.name;
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Makes a copy of the agent, with the given arguments changed. For example, you could do:
   *
   * ```
   * const newAgent = agent.clone({ instructions: 'New instructions' })
   * ```
   *
   * @param config - A partial configuration to change.
   * @returns A new agent with the given changes.
   */
  clone(t) {
    return new ft({
      ...this,
      ...t
    });
  }
  /**
   * Transform this agent into a tool, callable by other agents.
   *
   * This is different from handoffs in two ways:
   * 1. In handoffs, the new agent receives the conversation history. In this tool, the new agent
   *    receives generated input.
   * 2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is
   *    called as a tool, and the conversation is continued by the original agent.
   *
   * @param options - Options for the tool.
   * @returns A tool that runs the agent and returns the output text.
   */
  asTool(t) {
    const { toolName: r, toolDescription: s, customOutputExtractor: a } = t;
    return dr({
      name: r ?? Nn(this.name),
      description: s ?? "",
      parameters: {
        type: "object",
        properties: {
          input: {
            type: "string"
          }
        },
        required: ["input"],
        additionalProperties: !1
      },
      strict: !0,
      execute: async (i, o) => {
        if (!Yi(i))
          throw new pe("Agent tool called with invalid input");
        const c = await new Su().run(this, i.input, {
          context: o == null ? void 0 : o.context
        });
        return typeof a == "function" ? a(c) : ou(c.rawResponses[c.rawResponses.length - 1]);
      }
    });
  }
  /**
   * Returns the system prompt for the agent.
   *
   * If the agent has a function as its instructions, this function will be called with the
   * runContext and the agent instance.
   */
  async getSystemPrompt(t) {
    return typeof this.instructions == "function" ? await this.instructions(t, this) : this.instructions;
  }
  /**
   * Returns the prompt template for the agent, if defined.
   *
   * If the agent has a function as its prompt, this function will be called with the
   * runContext and the agent instance.
   */
  async getPrompt(t) {
    return typeof this.prompt == "function" ? await this.prompt(t, this) : this.prompt;
  }
  /**
   * Fetches the available tools from the MCP servers.
   * @returns the MCP powered tools
   */
  async getMcpTools(t) {
    return this.mcpServers.length > 0 ? co({
      mcpServers: this.mcpServers,
      runContext: t,
      agent: this,
      convertSchemasToStrict: !1
    }) : [];
  }
  /**
   * ALl agent tools, including the MCPl and function tools.
   *
   * @returns all configured tools
   */
  async getAllTools(t) {
    return [...await this.getMcpTools(t), ...this.tools];
  }
  /**
   * Processes the final output of the agent.
   *
   * @param output - The output of the agent.
   * @returns The parsed out.
   */
  processFinalOutput(t) {
    if (this.outputType === "text")
      return t;
    if (typeof this.outputType == "object") {
      const r = JSON.parse(t);
      return at(this.outputType) ? this.outputType.parse(r) : r;
    }
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Returns a JSON representation of the agent, which is serializable.
   *
   * @returns A JSON object containing the agent's name.
   */
  toJSON() {
    return {
      name: this.name
    };
  }
};
_(ft, "DEFAULT_MODEL_PLACEHOLDER", "");
let ot = ft;
jo(Ws());
class Ic extends ot {
  constructor(t) {
    super(t);
    /**
     * The voice intended to be used by the agent. If another agent already spoke during the
     * RealtimeSession, changing the voice during a handoff will fail.
     */
    _(this, "voice");
    this.voice = t.voice ?? "ash";
  }
}
function Tu(n) {
  return {
    debounceTextLength: n.debounceTextLength ?? 100
  };
}
function ku({ policyHint: n, ...e }) {
  const t = hr(e), r = n ?? t.name;
  return {
    ...t,
    policyHint: r,
    run: async (s) => {
      const a = await t.run(s);
      return {
        ...a,
        guardrail: { ...a.guardrail, policyHint: r }
      };
    }
  };
}
function Iu(n) {
  return `
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo ?? {})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim();
}
const Ae = zs("openai-agents:realtime");
g({
  itemId: d()
});
const Os = le("role", [
  g({
    itemId: d(),
    previousItemId: d().nullable().optional(),
    type: m("message"),
    role: m("system"),
    content: U(g({ type: m("input_text"), text: d() }))
  }),
  g({
    itemId: d(),
    previousItemId: d().nullable().optional(),
    type: m("message"),
    role: m("user"),
    status: re(["in_progress", "completed"]),
    content: U(g({ type: m("input_text"), text: d() }).or(g({
      type: m("input_audio"),
      audio: d().nullable().optional(),
      transcript: d().nullable()
    })))
  }),
  g({
    itemId: d(),
    previousItemId: d().nullable().optional(),
    type: m("message"),
    role: m("assistant"),
    status: re(["in_progress", "completed", "incomplete"]),
    content: U(g({ type: m("text"), text: d() }).or(g({
      type: m("audio"),
      audio: d().nullable().optional(),
      transcript: d().nullable().optional()
    })))
  })
]), Es = g({
  itemId: d(),
  previousItemId: d().nullable().optional(),
  type: m("function_call"),
  status: re(["in_progress", "completed"]),
  arguments: d(),
  name: d(),
  output: d().nullable()
}), va = g({
  id: d().optional().nullable(),
  conversation_id: d().optional().nullable(),
  max_output_tokens: C().or(m("inf")).optional().nullable(),
  metadata: Y(d(), F()).optional().nullable(),
  modalities: U(d()).optional().nullable(),
  object: m("realtime.response").optional().nullable(),
  output: U(F()).optional().nullable(),
  output_audio_format: d().optional().nullable(),
  status: re(["completed", "incomplete", "failed", "cancelled", "in_progress"]).optional().nullable(),
  status_details: Y(d(), F()).optional().nullable(),
  usage: g({
    input_tokens: C().optional(),
    input_tokens_details: Y(d(), F()).optional().nullable(),
    output_tokens: C().optional(),
    output_tokens_details: Y(d(), F()).optional().nullable()
  }).optional().nullable(),
  voice: d().optional().nullable()
}), Au = g({
  id: d().optional(),
  audio: d().nullable().optional(),
  text: d().nullable().optional(),
  transcript: d().nullable().optional(),
  type: Zs([
    m("input_text"),
    m("input_audio"),
    m("item_reference"),
    m("text"),
    m("audio")
  ])
}), ln = g({
  id: d().optional(),
  arguments: d().optional(),
  call_id: d().optional(),
  content: U(Au).optional(),
  name: d().optional(),
  object: m("realtime.item").optional(),
  output: d().optional(),
  role: re(["user", "assistant", "system"]).optional(),
  status: re(["completed", "incomplete", "in_progress"]).optional(),
  type: re(["message", "function_call", "function_call_output"]).optional()
}), Cu = g({
  type: m("conversation.created"),
  event_id: d(),
  conversation: g({
    id: d().optional(),
    object: m("realtime.conversation").optional()
  })
}), Ou = g({
  type: m("conversation.item.created"),
  event_id: d(),
  item: ln,
  previous_item_id: d().nullable().optional()
}), Eu = g({
  type: m("conversation.item.deleted"),
  event_id: d(),
  item_id: d()
}), Nu = g({
  type: m("conversation.item.input_audio_transcription.completed"),
  event_id: d(),
  item_id: d(),
  content_index: C(),
  transcript: d(),
  logprobs: U(F()).nullable().optional()
}), Ru = g({
  type: m("conversation.item.input_audio_transcription.delta"),
  event_id: d(),
  item_id: d(),
  content_index: C().optional(),
  delta: d().optional(),
  logprobs: U(F()).nullable().optional()
}), Du = g({
  type: m("conversation.item.input_audio_transcription.failed"),
  event_id: d(),
  item_id: d(),
  content_index: C(),
  error: g({
    code: d().optional(),
    message: d().optional(),
    param: d().optional(),
    type: d().optional()
  })
}), Pu = g({
  type: m("conversation.item.retrieved"),
  event_id: d(),
  item: ln
}), Mu = g({
  type: m("conversation.item.truncated"),
  event_id: d(),
  item_id: d(),
  audio_end_ms: C(),
  content_index: C()
}), ju = g({
  type: m("conversation.item.create"),
  item: ln,
  event_id: d().optional(),
  previous_item_id: d().nullable().optional()
}), $u = g({
  type: m("conversation.item.delete"),
  item_id: d(),
  event_id: d().optional()
}), Fu = g({
  type: m("conversation.item.retrieve"),
  item_id: d(),
  event_id: d().optional()
}), Zu = g({
  type: m("conversation.item.truncate"),
  item_id: d(),
  audio_end_ms: C(),
  content_index: C(),
  event_id: d().optional()
}), Lu = g({
  type: m("error"),
  event_id: d().optional(),
  error: F().optional()
}), Uu = g({
  type: m("input_audio_buffer.cleared"),
  event_id: d()
}), Ju = g({
  type: m("input_audio_buffer.append"),
  audio: d(),
  event_id: d().optional()
}), qu = g({
  type: m("input_audio_buffer.clear"),
  event_id: d().optional()
}), Bu = g({
  type: m("input_audio_buffer.commit"),
  event_id: d().optional()
}), Gu = g({
  type: m("input_audio_buffer.committed"),
  event_id: d(),
  item_id: d(),
  previous_item_id: d().nullable().optional()
}), zu = g({
  type: m("input_audio_buffer.speech_started"),
  event_id: d(),
  item_id: d(),
  audio_start_ms: C()
}), Vu = g({
  type: m("input_audio_buffer.speech_stopped"),
  event_id: d(),
  item_id: d(),
  audio_end_ms: C()
}), Hu = g({
  type: m("output_audio_buffer.started"),
  event_id: d()
}).passthrough(), Wu = g({
  type: m("output_audio_buffer.stopped"),
  event_id: d()
}).passthrough(), Ku = g({
  type: m("output_audio_buffer.cleared"),
  event_id: d()
}), Yu = g({
  type: m("rate_limits.updated"),
  event_id: d(),
  rate_limits: U(g({
    limit: C().optional(),
    name: re(["requests", "tokens"]).optional(),
    remaining: C().optional(),
    reset_seconds: C().optional()
  }))
}), Xu = g({
  type: m("response.audio.delta"),
  event_id: d(),
  item_id: d(),
  content_index: C(),
  delta: d(),
  output_index: C(),
  response_id: d()
}), Qu = g({
  type: m("response.audio.done"),
  event_id: d(),
  item_id: d(),
  content_index: C(),
  output_index: C(),
  response_id: d()
}), ec = g({
  type: m("response.audio_transcript.delta"),
  event_id: d(),
  item_id: d(),
  content_index: C(),
  delta: d(),
  output_index: C(),
  response_id: d()
}), tc = g({
  type: m("response.audio_transcript.done"),
  event_id: d(),
  item_id: d(),
  content_index: C(),
  transcript: d(),
  output_index: C(),
  response_id: d()
}), nc = g({
  type: m("response.content_part.added"),
  event_id: d(),
  item_id: d(),
  content_index: C(),
  output_index: C(),
  response_id: d(),
  part: g({
    audio: d().optional(),
    text: d().optional(),
    transcript: d().optional(),
    type: re(["text", "audio"]).optional()
  })
}), rc = g({
  type: m("response.content_part.done"),
  event_id: d(),
  item_id: d(),
  content_index: C(),
  output_index: C(),
  response_id: d(),
  part: g({
    audio: d().optional(),
    text: d().optional(),
    transcript: d().optional(),
    type: re(["text", "audio"]).optional()
  })
}), sc = g({
  type: m("response.created"),
  event_id: d(),
  response: va
}), wa = g({
  type: m("response.done"),
  event_id: d(),
  response: va
}), ac = g({
  type: m("response.function_call_arguments.delta"),
  event_id: d(),
  item_id: d(),
  call_id: d(),
  delta: d(),
  output_index: C(),
  response_id: d()
}), ic = g({
  type: m("response.function_call_arguments.done"),
  event_id: d(),
  item_id: d(),
  call_id: d(),
  arguments: d(),
  output_index: C(),
  response_id: d()
}), oc = g({
  type: m("response.output_item.added"),
  event_id: d(),
  item: ln,
  output_index: C(),
  response_id: d()
}), uc = g({
  type: m("response.output_item.done"),
  event_id: d(),
  item: ln,
  output_index: C(),
  response_id: d()
}), cc = g({
  type: m("response.text.delta"),
  event_id: d(),
  item_id: d(),
  content_index: C(),
  delta: d(),
  output_index: C(),
  response_id: d()
}), dc = g({
  type: m("response.text.done"),
  event_id: d(),
  item_id: d(),
  content_index: C(),
  text: d(),
  output_index: C(),
  response_id: d()
}), lc = g({
  type: m("session.created"),
  event_id: d(),
  session: F()
}), pc = g({
  type: m("session.updated"),
  event_id: d(),
  session: F()
}), fc = g({
  type: m("response.cancel"),
  event_id: d().optional(),
  response_id: d().optional()
}), hc = g({
  type: m("response.create"),
  event_id: d().optional(),
  response: F().optional()
}), mc = g({
  type: m("session.update"),
  event_id: d().optional(),
  session: F()
}), gc = g({
  type: m("transcription_session.update"),
  event_id: d().optional(),
  session: F()
}), _c = g({
  type: m("transcription_session.updated"),
  event_id: d(),
  session: F()
}), yc = g({
  type: d(),
  event_id: d().optional().nullable()
}).passthrough(), vc = le("type", [
  Cu,
  Ou,
  Eu,
  Nu,
  Ru,
  Du,
  Pu,
  Mu,
  Lu,
  Uu,
  Gu,
  zu,
  Vu,
  Hu,
  Wu,
  Ku,
  Yu,
  Xu,
  Qu,
  ec,
  tc,
  nc,
  rc,
  sc,
  wa,
  ac,
  ic,
  oc,
  uc,
  cc,
  dc,
  lc,
  pc,
  _c
]);
le("type", [
  ju,
  $u,
  Fu,
  Zu,
  Ju,
  qu,
  Bu,
  fc,
  hc,
  mc,
  gc
]);
function Dr(n) {
  const e = JSON.parse(n.data.toString()), t = vc.safeParse(e);
  if (!t.success) {
    const r = yc.safeParse(e);
    return r.success ? { data: r.data, isGeneric: !0 } : { data: null, isGeneric: !0 };
  }
  return { data: t.data, isGeneric: !1 };
}
const wc = "gpt-4o-realtime-preview", ye = {
  voice: "ash",
  modalities: ["text", "audio"],
  inputAudioFormat: "pcm16",
  outputAudioFormat: "pcm16",
  inputAudioTranscription: {
    model: "gpt-4o-mini-transcribe"
  },
  turnDetection: {
    type: "semantic_vad"
  },
  inputAudioNoiseReduction: null,
  speed: 1
};
var He, tn, de, nn;
const jr = class jr extends kr {
  constructor(t = {}) {
    super();
    k(this, He);
    k(this, tn);
    k(this, de, null);
    k(this, nn, null);
    _(this, "eventEmitter", new $n());
    y(this, He, t.model ?? wc), y(this, tn, t.apiKey);
  }
  /**
   * The current model that is being used by the transport layer.
   */
  get currentModel() {
    return u(this, He);
  }
  /**
   * The current model that is being used by the transport layer.
   * **Note**: The model cannot be changed mid conversation.
   */
  set currentModel(t) {
    y(this, He, t);
  }
  get _rawSessionConfig() {
    return u(this, nn) ?? null;
  }
  async _getApiKey(t) {
    const r = t.apiKey ?? u(this, tn);
    return typeof r == "function" ? await r() : r;
  }
  _onMessage(t) {
    var a, i, o, l, c, p;
    const { data: r, isGeneric: s } = Dr(t);
    if (r !== null && (this.emit("*", r), !s)) {
      if (r.type === "error" ? this.emit("error", { type: "error", error: r }) : this.emit(r.type, r), r.type === "response.created") {
        this.emit("turn_started", {
          type: "response_started",
          providerData: {
            ...r
          }
        });
        return;
      }
      if (r.type === "session.updated" && y(this, nn, r.session), r.type === "response.done") {
        const f = wa.safeParse(r);
        if (!f.success) {
          Ae.error("Error parsing response done event", f.error);
          return;
        }
        const h = ((a = f.data.response.usage) == null ? void 0 : a.input_tokens) ?? 0, S = ((i = f.data.response.usage) == null ? void 0 : i.output_tokens) ?? 0, b = h + S, v = new Ln({
          inputTokens: h,
          inputTokensDetails: ((o = f.data.response.usage) == null ? void 0 : o.input_tokens_details) ?? {},
          outputTokens: S,
          outputTokensDetails: ((l = f.data.response.usage) == null ? void 0 : l.output_tokens_details) ?? {},
          totalTokens: b
        });
        this.emit("usage_update", v), this.emit("turn_done", {
          type: "response_done",
          response: {
            id: f.data.response.id ?? "",
            output: f.data.response.output ?? [],
            usage: {
              inputTokens: h,
              inputTokensDetails: ((c = f.data.response.usage) == null ? void 0 : c.input_tokens_details) ?? {},
              outputTokens: S,
              outputTokensDetails: ((p = f.data.response.usage) == null ? void 0 : p.output_tokens_details) ?? {},
              totalTokens: b
            }
          }
        });
        return;
      }
      if (r.type === "response.audio.done") {
        this.emit("audio_done");
        return;
      }
      if (r.type === "conversation.item.deleted") {
        this.emit("item_deleted", {
          itemId: r.item_id
        });
        return;
      }
      if (r.type === "conversation.item.input_audio_transcription.completed" || r.type === "conversation.item.truncated") {
        this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: r.item_id
        });
        return;
      }
      if (r.type === "conversation.item.input_audio_transcription.delta" || r.type === "response.text.delta" || r.type === "response.audio_transcript.delta" || r.type === "response.function_call_arguments.delta") {
        r.type === "response.audio_transcript.delta" && this.emit("audio_transcript_delta", {
          type: "transcript_delta",
          delta: r.delta,
          itemId: r.item_id,
          responseId: r.response_id
        });
        return;
      }
      if ((r.type === "conversation.item.created" || r.type === "conversation.item.retrieved") && r.item.type === "message") {
        const f = r.type === "conversation.item.created" ? r.previous_item_id : null, h = Os.parse({
          itemId: r.item.id,
          previousItemId: f,
          type: r.item.type,
          role: r.item.role,
          content: r.item.content,
          status: r.item.status
        });
        this.emit("item_update", h);
        return;
      }
      if (r.type === "response.output_item.done" || r.type === "response.output_item.added") {
        const f = r.item;
        if (f.type === "function_call" && f.status === "completed") {
          const h = Es.parse({
            itemId: f.id,
            type: f.type,
            status: "in_progress",
            // we set it to in_progress for the UI as it will only be completed with the output
            arguments: f.arguments,
            name: f.name,
            output: null
          });
          this.emit("item_update", h), this.emit("function_call", {
            id: f.id,
            type: "function_call",
            callId: f.call_id ?? "",
            arguments: f.arguments ?? "",
            name: f.name ?? ""
          });
          return;
        }
        if (f.type === "message") {
          const h = Os.parse({
            itemId: r.item.id,
            type: r.item.type,
            role: r.item.role,
            content: r.item.content,
            status: "in_progress"
          });
          this.emit("item_update", h);
          return;
        }
      }
    }
  }
  _onError(t) {
    this.emit("error", {
      type: "error",
      error: t
    });
  }
  _onOpen() {
    this.emit("connected");
  }
  _onClose() {
    this.emit("disconnected");
  }
  /**
   * Send a message to the Realtime API. This will create a new item in the conversation and
   * trigger a response.
   *
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(t, r) {
    this.sendEvent({
      type: "conversation.item.create",
      item: typeof t == "string" ? {
        type: "message",
        role: "user",
        content: [
          {
            type: "input_text",
            text: t
          }
        ]
      } : t,
      ...r
    }), this.sendEvent({
      type: "response.create"
    });
  }
  _getMergedSessionConfig(t) {
    var s;
    return {
      instructions: t.instructions,
      model: t.model ?? u(this, He) ?? ye.model,
      voice: t.voice ?? ye.voice,
      speed: t.speed ?? ye.speed,
      modalities: t.modalities ?? ye.modalities,
      input_audio_format: t.inputAudioFormat ?? ye.inputAudioFormat,
      output_audio_format: t.outputAudioFormat ?? ye.outputAudioFormat,
      input_audio_transcription: t.inputAudioTranscription ?? ye.inputAudioTranscription,
      input_audio_noise_reduction: t.inputAudioNoiseReduction ?? ye.inputAudioNoiseReduction,
      turn_detection: jr.buildTurnDetectionConfig(t.turnDetection) ?? ye.turnDetection,
      tool_choice: t.toolChoice ?? ye.toolChoice,
      tools: (s = t.tools) == null ? void 0 : s.map((a) => ({
        ...a,
        strict: void 0
      })),
      // We don't set tracing here to make sure that we don't try to override it on every
      // session.update as it might lead to errors
      ...t.providerData ?? {}
    };
  }
  static buildTurnDetectionConfig(t) {
    if (typeof t > "u")
      return;
    const { type: r, createResponse: s, create_response: a, eagerness: i, interruptResponse: o, interrupt_response: l, prefixPaddingMs: c, prefix_padding_ms: p, silenceDurationMs: f, silence_duration_ms: h, threshold: S, ...b } = t, v = {
      type: r,
      create_response: s || a,
      eagerness: i,
      interrupt_response: o || l,
      prefix_padding_ms: c || p,
      silence_duration_ms: f || h,
      threshold: S,
      ...b
    };
    return Object.keys(v).forEach((E) => {
      v[E] === void 0 && delete v[E];
    }), Object.keys(v).length > 0 ? v : void 0;
  }
  /**
   * Sets the internal tracing config. This is used to track the tracing config that has been set
   * during the session.create event.
   */
  set _tracingConfig(t) {
    y(this, de, t);
  }
  /**
   * Sets the tracing config for the session. This will send the tracing config to the Realtime API.
   *
   * @param tracingConfig - The tracing config to set. We don't support 'auto' here as the SDK will always configure a Workflow Name unless it exists
   */
  _updateTracingConfig(t) {
    var r, s, a;
    if (typeof u(this, de) > "u" && y(this, de, null), t === "auto") {
      this.sendEvent({
        type: "session.update",
        session: {
          tracing: "auto"
        }
      });
      return;
    }
    if (typeof u(this, de) != "string" && typeof t != "string") {
      Ae.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");
      return;
    }
    if (t === null) {
      Ae.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."), this.sendEvent({
        type: "session.update",
        session: {
          tracing: null
        }
      });
      return;
    }
    if (u(this, de) === null || typeof u(this, de) == "string") {
      this.sendEvent({
        type: "session.update",
        session: {
          tracing: t
        }
      });
      return;
    }
    if ((t == null ? void 0 : t.group_id) !== ((r = u(this, de)) == null ? void 0 : r.group_id) || (t == null ? void 0 : t.metadata) !== ((s = u(this, de)) == null ? void 0 : s.metadata) || (t == null ? void 0 : t.workflow_name) !== ((a = u(this, de)) == null ? void 0 : a.workflow_name)) {
      Ae.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s", JSON.stringify(u(this, de)), JSON.stringify(t));
      return;
    }
    this.sendEvent({
      type: "session.update",
      session: {
        tracing: t
      }
    });
  }
  /**
   * Updates the session config. This will merge it with the current session config with the default
   * values and send it to the Realtime API.
   *
   * @param config - The session config to update.
   */
  updateSessionConfig(t) {
    const r = this._getMergedSessionConfig(t);
    this.sendEvent({
      type: "session.update",
      session: r
    });
  }
  /**
   * Send the output of a function call to the Realtime API.
   *
   * @param toolCall - The tool call to send the output for.
   * @param output - The output of the function call.
   * @param startResponse - Whether to start a new response after sending the output.
   */
  sendFunctionCallOutput(t, r, s = !0) {
    this.sendEvent({
      type: "conversation.item.create",
      item: {
        type: "function_call_output",
        output: r,
        call_id: t.callId
      }
    });
    try {
      const a = Es.parse({
        itemId: t.id,
        previousItemId: t.previousItemId,
        type: "function_call",
        status: "completed",
        arguments: t.arguments,
        name: t.name,
        output: r
      });
      this.emit("item_update", a);
    } catch (a) {
      Ae.error("Error parsing tool call item", a, t);
    }
    s && this.sendEvent({
      type: "response.create"
    });
  }
  /**
   * Send an audio buffer to the Realtime API. If `{ commit: true }` is passed, the audio buffer
   * will be committed and the model will start processing it. This is necessary if you have
   * disabled turn detection / voice activity detection (VAD).
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(t, { commit: r = !1 } = {}) {
    this.sendEvent({
      type: "input_audio_buffer.append",
      audio: Rs(t)
    }), r && this.sendEvent({
      type: "input_audio_buffer.commit"
    });
  }
  /**
   * Reset the history of the conversation. This will create a diff between the old and new history
   * and send the necessary events to the Realtime API to update the history.
   *
   * @param oldHistory - The old history of the conversation.
   * @param newHistory - The new history of the conversation.
   */
  resetHistory(t, r) {
    const { removals: s, additions: a, updates: i } = Oa(t, r), o = new Set(s.map((c) => c.itemId));
    for (const c of i)
      o.add(c.itemId);
    if (o.size > 0)
      for (const c of o)
        this.sendEvent({
          type: "conversation.item.delete",
          item_id: c
        });
    const l = [...a, ...i];
    for (const c of l)
      if (c.type === "message") {
        const p = {
          type: "message",
          role: c.role,
          content: c.content,
          id: c.itemId
        };
        c.role !== "system" && c.status && (p.status = c.status), this.sendEvent({
          type: "conversation.item.create",
          item: p
        });
      } else c.type === "function_call" && Ae.warn("Function calls cannot be manually added or updated at the moment. Ignoring.");
  }
};
He = new WeakMap(), tn = new WeakMap(), de = new WeakMap(), nn = new WeakMap();
let Pn = jr;
var rn, B, sn, We, an;
class xc extends Pn {
  constructor(t = {}) {
    if (typeof RTCPeerConnection > "u")
      throw new Error("WebRTC is not supported in this environment");
    super(t);
    _(this, "options");
    k(this, rn);
    k(this, B, {
      status: "disconnected",
      peerConnection: void 0,
      dataChannel: void 0
    });
    k(this, sn);
    k(this, We, !1);
    k(this, an, !1);
    this.options = t, y(this, rn, t.baseUrl ?? "https://api.openai.com/v1/realtime"), y(this, sn, t.useInsecureApiKey ?? !1);
  }
  /**
   * The current status of the WebRTC connection.
   */
  get status() {
    return u(this, B).status;
  }
  /**
   * The current connection state of the WebRTC connection including the peer connection and data
   * channel.
   */
  get connectionState() {
    return u(this, B);
  }
  /**
   * Whether the session is muted.
   */
  get muted() {
    return u(this, an);
  }
  /**
   * Connect to the Realtime API. This will establish the connection to the OpenAI Realtime API
   * via WebRTC.
   *
   * If you are using a browser, the transport layer will also automatically configure the
   * microphone and audio output to be used by the session.
   *
   * @param options - The options for the connection.
   */
  async connect(t) {
    if (u(this, B).status === "connected")
      return;
    u(this, B).status === "connecting" && Ae.warn("Realtime connection already in progress. Please await original promise");
    const r = t.model ?? this.currentModel;
    this.currentModel = r;
    const s = t.url ?? u(this, rn), a = await this._getApiKey(t), i = typeof a == "string" && a.startsWith("ek_");
    if (!u(this, sn) && !i)
      throw new X("Using the WebRTC connection in a browser environment requires an insecure API key. Please use a WebSocket connection instead or set the useInsecureApiKey option to true.");
    return new Promise(async (o, l) => {
      try {
        const c = {
          ...t.initialSessionConfig || {},
          model: this.currentModel
        }, p = new URL(s);
        let f = new RTCPeerConnection();
        const h = f.createDataChannel("oai-events");
        y(this, B, {
          status: "connecting",
          peerConnection: f,
          dataChannel: h
        }), this.emit("connection_change", u(this, B).status), h.addEventListener("open", () => {
          y(this, B, {
            status: "connected",
            peerConnection: f,
            dataChannel: h
          }), this.updateSessionConfig(c), this.emit("connection_change", u(this, B).status), this._onOpen(), o();
        }), h.addEventListener("error", (ie) => {
          this.close(), this._onError(ie), l(ie);
        }), h.addEventListener("message", (ie) => {
          this._onMessage(ie);
          const { data: oe, isGeneric: Et } = Dr(ie);
          !oe || Et || (oe.type === "response.created" ? y(this, We, !0) : oe.type === "response.done" && y(this, We, !1), oe.type === "session.created" && (this._tracingConfig = oe.session.tracing, this._updateTracingConfig(c.tracing ?? "auto")));
        });
        const S = this.options.audioElement ?? document.createElement("audio");
        S.autoplay = !0, f.ontrack = (ie) => {
          S.srcObject = ie.streams[0];
        };
        const b = this.options.mediaStream ?? await navigator.mediaDevices.getUserMedia({
          audio: !0
        });
        f.addTrack(b.getAudioTracks()[0]), this.options.changePeerConnection && (f = await this.options.changePeerConnection(f), y(this, B, { ...u(this, B), peerConnection: f }));
        const v = await f.createOffer();
        if (await f.setLocalDescription(v), !v.sdp)
          throw new Error("Failed to create offer");
        const E = {
          ...this._getMergedSessionConfig(c),
          model: this.currentModel
        }, R = new FormData();
        R.append("sdp", v.sdp), R.append("session", JSON.stringify(E));
        const W = {
          type: "answer",
          sdp: await (await fetch(p, {
            method: "POST",
            body: R,
            headers: {
              Authorization: `Bearer ${a}`,
              "X-OpenAI-Agents-SDK": Na["X-OpenAI-Agents-SDK"]
            }
          })).text()
        };
        await f.setRemoteDescription(W);
      } catch (c) {
        this.close(), this._onError(c), l(c);
      }
    });
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(t) {
    if (!u(this, B).dataChannel || u(this, B).dataChannel.readyState !== "open")
      throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");
    u(this, B).dataChannel.send(JSON.stringify(t));
  }
  /**
   * Mute or unmute the session.
   * @param muted - Whether to mute the session.
   */
  mute(t) {
    y(this, an, t), u(this, B).peerConnection && u(this, B).peerConnection.getSenders().forEach((s) => {
      s.track && (s.track.enabled = !t);
    });
  }
  /**
   * Close the connection to the Realtime API and disconnects the underlying WebRTC connection.
   */
  close() {
    if (u(this, B).dataChannel && u(this, B).dataChannel.close(), u(this, B).peerConnection) {
      const t = u(this, B).peerConnection;
      t.getSenders().forEach((r) => {
        var s;
        (s = r.track) == null || s.stop();
      }), t.close();
    }
    u(this, B).status !== "disconnected" && (y(this, B, {
      status: "disconnected",
      peerConnection: void 0,
      dataChannel: void 0
    }), this.emit("connection_change", u(this, B).status), this._onClose());
  }
  /**
   * Interrupt the current response if one is ongoing and clear the audio buffer so that the agent
   * stops talking.
   */
  interrupt() {
    u(this, We) && (this.sendEvent({
      type: "response.cancel"
    }), y(this, We, !1)), this.sendEvent({
      type: "output_audio_buffer.clear"
    });
  }
}
rn = new WeakMap(), B = new WeakMap(), sn = new WeakMap(), We = new WeakMap(), an = new WeakMap();
const bc = globalThis.WebSocket;
var Ke, Ye, K, on, Ee, Xe, Qe, jn, xa;
class Sc extends Pn {
  constructor(t = {}) {
    super(t);
    k(this, jn);
    k(this, Ke);
    k(this, Ye);
    k(this, K, {
      status: "disconnected",
      websocket: void 0
    });
    k(this, on);
    k(this, Ee);
    k(this, Xe);
    /**
     * Timestamp maintained by the transport layer to aid with the calculation of the elapsed time
     * since the response started to compute the right interruption time.
     *
     * Mostly internal but might be used by extended transport layers for their interruption
     * calculation.
     */
    _(this, "_firstAudioTimestamp");
    _(this, "_audioLengthMs", 0);
    k(this, Qe, !1);
    y(this, Ye, t.url), y(this, on, t.useInsecureApiKey ?? !1);
  }
  /**
   * The current status of the WebSocket connection.
   */
  get status() {
    return u(this, K).status;
  }
  /**
   * The current connection state of the WebSocket connection.
   */
  get connectionState() {
    return u(this, K);
  }
  /**
   * Always returns `null` as the WebSocket transport layer does not handle muting. Instead,
   * this should be handled by the client by not triggering the `sendAudio` method.
   */
  get muted() {
    return null;
  }
  /**
   * The current item ID of the ongoing response.
   */
  get currentItemId() {
    return u(this, Ee);
  }
  /**
   * Triggers the `audio` event that a client might listen to to receive the audio buffer.
   * Protected for you to be able to override and disable emitting this event in case your extended
   * transport layer handles audio internally.
   *
   * @param audioEvent - The audio event to emit.
   */
  _onAudio(t) {
    this.emit("audio", t);
  }
  async connect(t) {
    const r = t.model ?? this.currentModel;
    this.currentModel = r, y(this, Ke, await this._getApiKey(t));
    const s = t.url ?? u(this, Ye) ?? `wss://api.openai.com/v1/realtime?model=${this.currentModel}`;
    y(this, Ye, s);
    const a = {
      ...t.initialSessionConfig || {},
      model: this.currentModel
    };
    await new Promise((i, o) => {
      try {
        $(this, jn, xa).call(this, i, o, a);
      } catch (l) {
        o(l);
      }
    }), await this.updateSessionConfig(a);
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(t) {
    if (!u(this, K).websocket)
      throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");
    u(this, K).websocket.send(JSON.stringify(t));
  }
  /**
   * Close the WebSocket connection.
   *
   * This will also reset any internal connection tracking used for interruption handling.
   */
  close() {
    var t;
    (t = u(this, K).websocket) == null || t.close(), y(this, Ee, void 0), this._firstAudioTimestamp = void 0, this._audioLengthMs = 0, y(this, Xe, void 0);
  }
  /**
   * Will throw an error as the WebSocket transport layer does not support muting.
   */
  mute(t) {
    throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.");
  }
  /**
   * Send an audio buffer to the Realtime API. This is used for your client to send audio to the
   * model to respond.
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(t, r = {}) {
    u(this, K).status === "connected" && super.sendAudio(t, r);
  }
  /**
   * Send a cancel response event to the Realtime API. This is used to cancel an ongoing
   *  response that the model is currently generating.
   */
  _cancelResponse() {
    u(this, Qe) && (this.sendEvent({
      type: "response.cancel"
    }), y(this, Qe, !1));
  }
  /**
   * Do NOT call this method directly. Call `interrupt()` instead for proper interruption handling.
   *
   * This method is used to send the right events to the API to inform the model that the user has
   * interrupted the response. It might be overridden/extended by an extended transport layer. See
   * the `TwilioRealtimeTransportLayer` for an example.
   *
   * @param elapsedTime - The elapsed time since the response started.
   */
  _interrupt(t, r = !0) {
    if (t < 0)
      return;
    r && this._cancelResponse();
    const s = this._audioLengthMs ?? Number.POSITIVE_INFINITY, a = Math.max(0, Math.min(Math.floor(t), s));
    this.emit("audio_interrupted"), this.sendEvent({
      type: "conversation.item.truncate",
      item_id: u(this, Ee),
      content_index: u(this, Xe),
      audio_end_ms: a
    });
  }
  /**
   * Interrupt the ongoing response. This method is triggered automatically by the client when
   * voice activity detection (VAD) is enabled (default) as well as when an output guardrail got
   * triggered.
   *
   * You can also call this method directly if you want to interrupt the conversation for example
   * based on an event in the client.
   */
  interrupt(t = !0) {
    if (!u(this, Ee) || typeof this._firstAudioTimestamp != "number")
      return;
    const r = Date.now() - this._firstAudioTimestamp;
    r >= 0 && this._interrupt(r, t), y(this, Ee, void 0), this._firstAudioTimestamp = void 0, this._audioLengthMs = 0, y(this, Xe, void 0);
  }
}
Ke = new WeakMap(), Ye = new WeakMap(), K = new WeakMap(), on = new WeakMap(), Ee = new WeakMap(), Xe = new WeakMap(), Qe = new WeakMap(), jn = new WeakSet(), xa = function(t, r, s) {
  if (u(this, K).websocket) {
    t();
    return;
  }
  if (!u(this, Ke))
    throw new X("API key is not set. Please call `connect()` with an API key first.");
  if (!u(this, Ke).startsWith("ek_") && !u(this, on))
    throw new X("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");
  const a = [
    "realtime",
    // Auth
    "openai-insecure-api-key." + u(this, Ke),
    // Beta protocol, required
    "openai-beta.realtime-v1",
    // Version header
    Ra
  ], i = new bc(u(this, Ye), a);
  y(this, K, {
    status: "connecting",
    websocket: i
  }), this.emit("connection_change", u(this, K).status), i.addEventListener("open", () => {
    y(this, K, {
      status: "connected",
      websocket: i
    }), this.emit("connection_change", u(this, K).status), this._onOpen(), t();
  }), i.addEventListener("error", (o) => {
    this._onError(o), y(this, K, {
      status: "disconnected",
      websocket: void 0
    }), this.emit("connection_change", u(this, K).status), r(o);
  }), i.addEventListener("message", (o) => {
    var p, f, h;
    this._onMessage(o);
    const { data: l, isGeneric: c } = Dr(o);
    if (!(!l || c))
      if (l.type === "response.audio.delta") {
        y(this, Xe, l.content_index), y(this, Ee, l.item_id), this._firstAudioTimestamp === void 0 && (this._firstAudioTimestamp = Date.now(), this._audioLengthMs = 0);
        const S = Ns(l.delta);
        (((p = this._rawSessionConfig) == null ? void 0 : p.output_audio_format) ?? "pcm16").startsWith("g711_") ? this._audioLengthMs += S.byteLength / 8 : this._audioLengthMs += S.byteLength / 24 / 2;
        const v = {
          type: "audio",
          data: S,
          responseId: l.response_id
        };
        this._onAudio(v);
      } else if (l.type === "input_audio_buffer.speech_started") {
        const S = ((h = (f = this._rawSessionConfig) == null ? void 0 : f.turn_detection) == null ? void 0 : h.interrupt_response) ?? !1;
        this.interrupt(!S);
      } else l.type === "response.created" ? y(this, Qe, !0) : l.type === "response.done" ? y(this, Qe, !1) : l.type === "session.created" && (this._tracingConfig = l.session.tracing, this._updateTracingConfig(s.tracing ?? "auto"));
  }), i.addEventListener("close", () => {
    y(this, K, {
      status: "disconnected",
      websocket: void 0
    }), this.emit("connection_change", u(this, K).status), this._onClose();
  });
};
var L, M, un, D, St, Tt, cn, G, kt, It, we, dn, V, gn, _n, ba, yn, Sa, wr, Ta;
class Ac extends $n {
  constructor(t, r = {}) {
    super();
    k(this, V);
    _(this, "initialAgent");
    _(this, "options");
    k(this, L);
    k(this, M);
    k(this, un, []);
    k(this, D);
    k(this, St, []);
    k(this, Tt);
    k(this, cn, {});
    k(this, G, []);
    k(this, kt);
    k(this, It, {});
    k(this, we, !1);
    // Keeps track of the last full session config we sent (camelCase keys) so that
    // subsequent updates (e.g. during agent handoffs) preserve properties that are
    // not explicitly recalculated here (such as inputAudioFormat, outputAudioFormat,
    // modalities, speed, toolChoice, turnDetection, etc.). Without this, updating
    // the agent would drop audio format overrides (e.g. g711_ulaw) and revert to
    // transport defaults causing issues for integrations like Twilio.
    k(this, dn, null);
    this.initialAgent = t, this.options = r, typeof r.transport > "u" && Ea() || r.transport === "webrtc" ? y(this, L, new xc()) : r.transport === "websocket" || typeof r.transport > "u" ? y(this, L, new Sc()) : y(this, L, r.transport), y(this, M, t), y(this, D, new pt({
      ...r.context ?? {},
      history: u(this, G)
    })), y(this, St, (r.outputGuardrails ?? []).map(ku)), y(this, Tt, Tu(r.outputGuardrailSettings ?? {})), y(this, kt, r.historyStoreAudio ?? !1);
  }
  /**
   * The transport layer used by the session.
   */
  get transport() {
    return u(this, L);
  }
  /**
   * The current agent in the session.
   */
  get currentAgent() {
    return u(this, M);
  }
  /**
   * The current usage of the session.
   */
  get usage() {
    return u(this, D).usage;
  }
  /**
   * The current context of the session.
   */
  get context() {
    return u(this, D);
  }
  /**
   * Whether the session is muted. Might be `null` if the underlying transport layer does not
   * support muting.
   */
  get muted() {
    return u(this, L).muted;
  }
  /**
   * The history of the session.
   */
  get history() {
    return u(this, G);
  }
  async updateAgent(t) {
    return u(this, M).emit("agent_handoff", u(this, D), t), this.emit("agent_handoff", u(this, D), u(this, M), t), await $(this, V, gn).call(this, t), await u(this, L).updateSessionConfig(await $(this, V, _n).call(this)), t;
  }
  /**
   * Connect to the session. This will establish the connection to the underlying transport layer
   * and start the session.
   *
   * After connecting, the session will also emit a `history_updated` event with an empty history.
   *
   * @param options - The options for the connection.
   */
  async connect(t) {
    await $(this, V, gn).call(this, this.initialAgent), $(this, V, Ta).call(this), await u(this, L).connect({
      apiKey: t.apiKey ?? this.options.apiKey,
      model: this.options.model,
      url: t.url,
      initialSessionConfig: await $(this, V, _n).call(this, this.options.config)
    }), y(this, G, []), this.emit("history_updated", u(this, G));
  }
  /**
   * Update the history of the session.
   * @param newHistory - The new history to set.
   */
  updateHistory(t) {
    let r;
    typeof t == "function" ? r = t(u(this, G)) : r = t, u(this, L).resetHistory(u(this, G), r);
  }
  /**
   * Send a message to the session.
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(t, r = {}) {
    u(this, L).sendMessage(t, r);
  }
  /**
   * Mute the session.
   * @param muted - Whether to mute the session.
   */
  mute(t) {
    u(this, L).mute(t);
  }
  /**
   * Disconnect from the session.
   */
  close() {
    y(this, It, {}), u(this, L).close();
  }
  /**
   * Send audio to the session.
   * @param audio - The audio to send.
   * @param options - Additional options.
   * @param options.commit - Whether to finish the turn with this audio.
   */
  sendAudio(t, r = {}) {
    u(this, L).sendAudio(t, r);
  }
  /**
   * Interrupt the session artificially for example if you want to build a "stop talking"
   * button.
   */
  interrupt() {
    u(this, L).interrupt();
  }
  /**
   * Approve a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to approve.
   * @param options - Additional options.
   * @param options.alwaysApprove - Whether to always approve the tool call.
   */
  async approve(t, r = { alwaysApprove: !1 }) {
    u(this, D).approveTool(t, r);
    const s = u(this, M).tools.find((a) => a.name === t.rawItem.name);
    if (s && s.type === "function" && t.rawItem.type === "function_call")
      await $(this, V, yn).call(this, t.rawItem, s);
    else
      throw new pe(`Tool ${t.rawItem.name} not found`);
  }
  /**
   * Reject a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to reject.
   * @param options - Additional options.
   * @param options.alwaysReject - Whether to always reject the tool call.
   */
  async reject(t, r = { alwaysReject: !1 }) {
    u(this, D).rejectTool(t, r);
    const s = u(this, M).tools.find((a) => a.name === t.rawItem.name);
    if (s && s.type === "function" && t.rawItem.type === "function_call")
      await $(this, V, yn).call(this, t.rawItem, s);
    else
      throw new pe(`Tool ${t.rawItem.name} not found`);
  }
}
L = new WeakMap(), M = new WeakMap(), un = new WeakMap(), D = new WeakMap(), St = new WeakMap(), Tt = new WeakMap(), cn = new WeakMap(), G = new WeakMap(), kt = new WeakMap(), It = new WeakMap(), we = new WeakMap(), dn = new WeakMap(), V = new WeakSet(), gn = async function(t) {
  y(this, M, t);
  const s = u(this, M).handoffs.map(Rn).map((i) => i.getHandoffAsFunctionTool()), a = await u(this, M).getAllTools(u(this, D));
  y(this, un, [
    ...a.filter((i) => i.type === "function"),
    ...s
  ]);
}, _n = async function(t = {}) {
  const r = await u(this, M).getSystemPrompt(u(this, D)), s = this.options.tracingDisabled ? null : this.options.workflowName ? {
    workflow_name: this.options.workflowName
  } : "auto";
  s !== null && s !== "auto" ? (this.options.groupId && (s.group_id = this.options.groupId), this.options.traceMetadata && (s.metadata = this.options.traceMetadata)) : (this.options.groupId || this.options.traceMetadata) && Ae.warn("In order to set traceMetadata or a groupId you need to specify a workflowName.");
  const i = {
    ...{
      ...u(this, dn) ?? {},
      ...this.options.config ?? {},
      ...t ?? {}
    },
    instructions: r,
    voice: u(this, M).voice,
    model: this.options.model,
    tools: u(this, un),
    tracing: s
  };
  return y(this, dn, i), i;
}, ba = async function(t, r) {
  const s = await r.onInvokeHandoff(u(this, D), t.arguments);
  u(this, M).emit("agent_handoff", u(this, D), s), this.emit("agent_handoff", u(this, D), u(this, M), s), await $(this, V, gn).call(this, s), await u(this, L).updateSessionConfig(await $(this, V, _n).call(this));
  const a = Xs(s);
  return u(this, L).sendFunctionCallOutput(t, a, !0), s;
}, yn = async function(t, r) {
  u(this, D).context.history = JSON.parse(JSON.stringify(u(this, G)));
  let s = t.arguments;
  if (r.parameters && (at(r.parameters) ? s = r.parameters.parse(s) : s = JSON.parse(s)), await r.needsApproval(u(this, D), s, t.callId)) {
    const l = this.context.isToolApproved({
      toolName: r.name,
      callId: t.callId
    });
    if (l === !1) {
      this.emit("agent_tool_start", u(this, D), u(this, M), r, {
        toolCall: t
      }), u(this, M).emit("agent_tool_start", u(this, D), r, {
        toolCall: t
      });
      const c = "Tool execution was not approved.";
      u(this, L).sendFunctionCallOutput(t, c, !0), this.emit("agent_tool_end", u(this, D), u(this, M), r, c, { toolCall: t }), u(this, M).emit("agent_tool_end", u(this, D), r, c, {
        toolCall: t
      });
      return;
    } else if (typeof l > "u") {
      this.emit("tool_approval_requested", u(this, D), u(this, M), {
        type: "function_approval",
        tool: r,
        approvalItem: new Te(t, u(this, M))
      });
      return;
    }
  }
  this.emit("agent_tool_start", u(this, D), u(this, M), r, {
    toolCall: t
  }), u(this, M).emit("agent_tool_start", u(this, D), r, {
    toolCall: t
  }), u(this, D).context.history = JSON.parse(JSON.stringify(u(this, G)));
  const i = await r.invoke(u(this, D), t.arguments), o = it(i);
  u(this, L).sendFunctionCallOutput(t, o, !0), this.emit("agent_tool_end", u(this, D), u(this, M), r, o, { toolCall: t }), u(this, M).emit("agent_tool_end", u(this, D), r, o, { toolCall: t });
}, Sa = async function(t) {
  const r = new Map(u(this, M).handoffs.map(Rn).map((o) => [o.toolName, o])), s = await u(this, M).getAllTools(u(this, D)), a = new Map(s.map((o) => [o.name, o])), i = r.get(t.name);
  if (i)
    await $(this, V, ba).call(this, t, i);
  else {
    const o = a.get(t.name);
    if (o && o.type === "function")
      await $(this, V, yn).call(this, t, o);
    else
      throw new pe(`Tool ${t.name} not found`);
  }
}, wr = async function(t, r, s) {
  if (u(this, St).length === 0)
    return;
  const a = {
    agent: u(this, M),
    agentOutput: t,
    context: u(this, D)
  }, o = (await Promise.all(u(this, St).map((l) => l.run(a)))).find((l) => l.output.tripwireTriggered);
  if (o) {
    if (u(this, It)[r])
      return;
    u(this, It)[r] = !0;
    const l = new cr(`Output guardrail triggered: ${JSON.stringify(o.output.outputInfo)}`, o);
    this.emit("guardrail_tripped", u(this, D), u(this, M), l, {
      itemId: s
    }), this.interrupt();
    const c = Iu(o);
    this.sendMessage(c);
    return;
  }
}, Ta = function() {
  u(this, L).on("*", (s) => {
    if (this.emit("transport_event", s), s.type === "conversation.item.input_audio_transcription.completed")
      try {
        const a = s;
        y(this, G, Lr(u(this, G), a, u(this, kt))), u(this, D).context.history = u(this, G), this.emit("history_updated", u(this, G));
      } catch (a) {
        this.emit("error", {
          type: "error",
          error: a
        });
      }
  }), u(this, L).on("audio", (s) => {
    u(this, we) || (y(this, we, !0), this.emit("audio_start", u(this, D), u(this, M))), this.emit("audio", s);
  }), u(this, L).on("turn_started", () => {
    y(this, we, !1), this.emit("agent_start", u(this, D), u(this, M)), u(this, M).emit("agent_start", u(this, D), u(this, M));
  }), u(this, L).on("turn_done", (s) => {
    const a = s.response.output[s.response.output.length - 1], i = Ds(a) ?? "", o = (a == null ? void 0 : a.id) ?? "";
    this.emit("agent_end", u(this, D), u(this, M), i), u(this, M).emit("agent_end", u(this, D), i), $(this, V, wr).call(this, i, s.response.id, o);
  }), u(this, L).on("audio_done", () => {
    u(this, we) && y(this, we, !1), this.emit("audio_stopped", u(this, D), u(this, M));
  });
  let t = 0, r;
  u(this, L).on("audio_transcript_delta", (s) => {
    try {
      const a = s.delta, i = s.itemId, o = s.responseId;
      r !== i && (r = i, t = 0);
      const c = (u(this, cn)[i] ?? "") + a;
      if (u(this, cn)[i] = c, u(this, Tt).debounceTextLength < 0)
        return;
      const p = Math.floor(c.length / u(this, Tt).debounceTextLength);
      p > t && (t = p, $(this, V, wr).call(this, c, o, i));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, L).on("item_update", (s) => {
    try {
      const a = !u(this, G).some((i) => i.itemId === s.itemId);
      if (y(this, G, Lr(u(this, G), s, u(this, kt))), u(this, D).context.history = u(this, G), a) {
        const i = u(this, G).find((o) => o.itemId === s.itemId);
        i && this.emit("history_added", i);
      }
      this.emit("history_updated", u(this, G));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, L).on("item_deleted", (s) => {
    try {
      y(this, G, u(this, G).filter((a) => a.itemId !== s.itemId)), u(this, D).context.history = u(this, G), this.emit("history_updated", u(this, G));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, L).on("function_call", async (s) => {
    try {
      await $(this, V, Sa).call(this, s);
    } catch (a) {
      Ae.error("Error handling function call", a), this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, L).on("usage_update", (s) => {
    u(this, D).usage.add(s);
  }), u(this, L).on("audio_interrupted", () => {
    u(this, we) && y(this, we, !1), this.emit("audio_interrupted", u(this, D), u(this, M));
  }), u(this, L).on("error", (s) => {
    this.emit("error", s);
  });
};
const Cc = {
  base64ToArrayBuffer: Ns,
  arrayBufferToBase64: Rs,
  getLastTextFromAudioOutputMessage: Ds
};
export {
  wc as DEFAULT_OPENAI_REALTIME_MODEL,
  ye as DEFAULT_OPENAI_REALTIME_SESSION_CONFIG,
  pe as ModelBehaviorError,
  Pn as OpenAIRealtimeBase,
  xc as OpenAIRealtimeWebRTC,
  Sc as OpenAIRealtimeWebSocket,
  cr as OutputGuardrailTripwireTriggered,
  Ic as RealtimeAgent,
  Ac as RealtimeSession,
  X as UserError,
  dr as tool,
  Cc as utils
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
